<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Fuzzing101-Exercise1</title>
    <link href="/2023/07/09/Exercise1/"/>
    <url>/2023/07/09/Exercise1/</url>
    
    <content type="html"><![CDATA[<h2 id="Fuzzing-101"><a href="#Fuzzing-101" class="headerlink" title="Fuzzing 101"></a>Fuzzing 101</h2><h3 id="Exercise-1"><a href="#Exercise-1" class="headerlink" title="Exercise 1"></a>Exercise 1</h3><p>实验目的：安装Xpdf，安装AFL工具并了解如何使用</p><p>创建目录并安装基本工具包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> fuzzing_xpdf &amp;&amp; <span class="hljs-built_in">cd</span> fuzzing_xpdf/<br>sudo apt install build-essential<br></code></pre></td></tr></table></figure><p>下载，解压Xpdf，并完成安装</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim">wget https://<span class="hljs-keyword">dl</span>.xpdfreader.<span class="hljs-keyword">com</span>/old/xpdf-<span class="hljs-number">3.02</span>.tar.gz<br>tar -xvzf xpdf-<span class="hljs-number">3.02</span>.tar.gz<br><span class="hljs-keyword">cd</span> xpdf-<span class="hljs-number">3.02</span><br>sudo apt <span class="hljs-keyword">update</span> &amp;&amp; sudo apt install -<span class="hljs-keyword">y</span> build-essential gcc<br>./configure --prefix=<span class="hljs-string">&quot;$HOME/fuzzing_xpdf/install/&quot;</span><br><span class="hljs-keyword">make</span><br><span class="hljs-keyword">make</span> install<br></code></pre></td></tr></table></figure><p>测试Xpdf，可以下载测试样例或者自己造一个pdf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span>/fuzzing_xpdf<br><span class="hljs-built_in">mkdir</span> pdf_examples &amp;&amp; <span class="hljs-built_in">cd</span> pdf_examples<br>wget http://www.africau.edu/images/default/sample.pdf<br></code></pre></td></tr></table></figure><p>通过命令 <code>$HOME/fuzzing_xpdf/install/bin/pdfinfo -box -meta $HOME/fuzzing_xpdf/pdf_examples/sample.pdf</code>  可以得到如下输出</p><p><code>$HOME/fuzzing_xpdf/install/bin/pdfinfo</code> 指定的要执行的程序路径，<code>-box -meta</code> 是向pdfinfo程序传递的选项和参数，-box 表示显示文档的页面框线，-meta显示文档的元数据信息</p><p><code>$HOME/fuzzing_xpdf/pdf_examples/sample.pdf</code> 指定的是要操作的pdf文件</p><p>![image-20230708231306619](&#x2F;Users&#x2F;lavau&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230708231306619.png)</p><p>在pdfinfo的目录下还有如下程序：</p><ul><li>pdffonts：用于显示 PDF 文件中使用的字体信息，包括字体名称、类型、嵌入状态等</li><li>pdfimages：用于从 PDF 文件中提取图像。它可以将 PDF 文件中的图像提取为独立的图像文件</li><li>pdftops：用于将 PDF 文件转换为 PostScript 格式。PostScript 是一种页面描述语言，可以在打印机或其他设备上进行渲染和打印</li><li>pdftotext：用于将 PDF 文件中的文本提取为纯文本格式</li></ul><p>![image-20230708231459280](&#x2F;Users&#x2F;lavau&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230708231459280.png)</p><p>接下来安装AFL++</p><p>第一条安装命令用于安装构建软件包（<code>build-essential</code>）、Python 3 开发库（<code>python3-dev</code>）、自动构建工具（<code>automake</code>）、版本控制工具 Git（<code>git</code>）、词法分析器生成器 Flex（<code>flex</code>）、语法分析器生成器 Bison（<code>bison</code>）、GLib 开发库（<code>libglib2.0-dev</code>）、像素管理库 Pixman 开发库（<code>libpixman-1-dev</code>）以及 Python 3 的 setuptools。</p><p>第二条安装命令用于安装 LLVM 和 Clang </p><p>第三条安装命令根据系统上已安装的 GCC 版本，安装相应的插件开发包和 libstdc++ 开发库</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">sudo apt-get update<br>sudo apt-get install -y build-essential python3-dev automake git flex bison libglib2.<span class="hljs-number">0</span>-dev libpixman-<span class="hljs-number">1</span>-dev python3-setuptools<br>sudo apt-get install -y lld-<span class="hljs-number">11</span> llvm-<span class="hljs-number">11</span> llvm-<span class="hljs-number">11</span>-dev clang-<span class="hljs-number">11</span><span class="hljs-operator"> || </span>sudo apt-get install -y lld llvm llvm-dev clang <br>sudo apt-get install -y gcc-<span class="hljs-constructor">$(<span class="hljs-params">gcc</span> --<span class="hljs-params">version</span>|<span class="hljs-params">head</span> -<span class="hljs-params">n1</span>|<span class="hljs-params">sed</span> &#x27;<span class="hljs-params">s</span><span class="hljs-operator">/</span>.<span class="hljs-operator">*</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span>&#x27;|<span class="hljs-params">sed</span> &#x27;<span class="hljs-params">s</span><span class="hljs-operator">/</span>\..<span class="hljs-operator">*</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span>&#x27;)</span>-plugin-dev libstdc++-<span class="hljs-constructor">$(<span class="hljs-params">gcc</span> --<span class="hljs-params">version</span>|<span class="hljs-params">head</span> -<span class="hljs-params">n1</span>|<span class="hljs-params">sed</span> &#x27;<span class="hljs-params">s</span><span class="hljs-operator">/</span>.<span class="hljs-operator">*</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span>&#x27;|<span class="hljs-params">sed</span> &#x27;<span class="hljs-params">s</span><span class="hljs-operator">/</span>\..<span class="hljs-operator">*</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span>&#x27;)</span>-dev<br></code></pre></td></tr></table></figure><p>接着安装AFL++工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span><br>git <span class="hljs-built_in">clone</span> https://github.com/AFLplusplus/AFLplusplus &amp;&amp; <span class="hljs-built_in">cd</span> AFLplusplus<br><span class="hljs-built_in">export</span> LLVM_CONFIG=<span class="hljs-string">&quot;llvm-config-11&quot;</span><br>make distrib<br>sudo make install<br></code></pre></td></tr></table></figure><p>此处遇到一个报错：</p><p>![image-20230709105123404](&#x2F;Users&#x2F;lavau&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230709105123404.png)</p><p>可以通过禁用SSL证书解决，但会降低安全性，需要在可靠的网络环境中操作</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> install gnutls-bin<br>git<span class="hljs-built_in"> config </span>--global http.sslVerify <span class="hljs-literal">false</span><br>git<span class="hljs-built_in"> config </span>--global http.postBuffer 1048576000<br></code></pre></td></tr></table></figure><p>至此AFL安装完成，可以输入 <code>afl-fuzz</code>得到如下输出</p><p>![image-20230709151638679](&#x2F;Users&#x2F;lavau&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230709151638679.png)</p><p>通过命令，可以对pdftotext进行测试</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">afl-fuzz -i <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/</span>pdf_examples<span class="hljs-regexp">/ -o $HOME/</span>fuzzing_xpdf<span class="hljs-regexp">/out/</span> -s <span class="hljs-number">123</span> -- <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/i</span>nstall<span class="hljs-regexp">/bin/</span>pdftotext @@ <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/</span>output<br></code></pre></td></tr></table></figure><p>该命令使用 AFL 工具对 pdftotext 程序进行模糊测试。它从指定的输入文件夹中获取测试样本，将 AFL 输出结果保存到out中。使用随机数种子 123，测试 pdftotext 程序，并将程序的输出结果保存到output中</p><p>等待程序运行可以得到如下结果，红色的为发现的崩溃</p><p>![image-20230709215359532](&#x2F;Users&#x2F;lavau&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230709215359532.png)</p><p>运行命令，<code>-g</code> 选项用于在编译过程中生成调试符号信息，而 <code>-O0</code> 选项则指示编译器禁用优化。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">make clean<br><span class="hljs-attribute">CFLAGS</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;-g -O0&quot;</span> CXXFLAGS<span class="hljs-operator">=</span><span class="hljs-string">&quot;-g -O0&quot;</span> ./configure --prefix<span class="hljs-operator">=</span><span class="hljs-string">&quot;$HOME/fuzzing_xpdf/install/&quot;</span><br>make<br>make install<br></code></pre></td></tr></table></figure><p>运行gdb，此处的your filename应该填写crashes文件夹中的，包含报错信息的文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">gdb --args <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/i</span>nstall<span class="hljs-regexp">/bin/</span>pdftotext <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/fuzzing_xpdf/</span>out<span class="hljs-regexp">/default/</span>crashes<span class="hljs-regexp">/&lt;your filename&gt; $HOME/</span>fuzzing_xpdf/output<br></code></pre></td></tr></table></figure><p>输入run或者r来运行，可以得到错误信息，程序收到了SIGSEGV信号，也称为分段错误（Segmentation fault）。这种错误通常是由于访问无效的内存地址导致的。</p><p>![image-20230716150720853](&#x2F;Users&#x2F;lavau&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230716150720853.png)</p><p>通过bt命令进行回溯，可以看到反复进行了getobj和makestream的调用</p><p>![image-20230716153423406](&#x2F;Users&#x2F;lavau&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230716153423406.png)</p><p>下载官方修复了该问题的Xpdf4.02发现，与此版本相比，添加了一个记录循环次数的变量，解决该问题</p><p>旧：</p><p>![image-20230716153759316](&#x2F;Users&#x2F;lavau&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230716153759316.png)</p><p>新：</p><p>![image-20230716154017601](&#x2F;Users&#x2F;lavau&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230716154017601.png)</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>此次实验了解了模糊测试器功能，通过种子的变异和组合不断对pdftotext这个程序进行测试。同时也熟悉了gdb的相关操作以及提升了一定的程序流分析能力。</p>]]></content>
    
    
    <categories>
      
      <category>Fuzzing101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读后感：So you want to work in security?</title>
    <link href="/2023/07/07/ReflectionPeper/"/>
    <url>/2023/07/07/ReflectionPeper/</url>
    
    <content type="html"><![CDATA[<h2 id="读后感：So-you-want-to-work-in-security"><a href="#读后感：So-you-want-to-work-in-security" class="headerlink" title="读后感：So you want to work in security?"></a>读后感：So you want to work in security?</h2><p><a href="http://ifsec.blogspot.com/2018/02/so-you-want-to-work-in-security-and-for.html">So you want to work in security?</a></p><h3 id="得忙起来"><a href="#得忙起来" class="headerlink" title="得忙起来"></a>得忙起来</h3><p>对于这篇博客，我更愿意将其视作一个纠正我暑期，或是说毕业之后的一个较为松懈的学习态度以及开学前以何种学习方式去补充自己的不足的一篇文章。</p><p>显然，本科毕业确实给我带来了一些可能与我并不相称的快乐，即其实我算是选择大于努力的那一部分人，在考研过程中我并未付出和其他人那般的努力，所以其实更应该看到自己与别人的差距，让我快要生锈的脑子转起来。</p><h3 id="任重道远"><a href="#任重道远" class="headerlink" title="任重道远"></a>任重道远</h3><p>安全方向所涉及的知识面的广度，在我浅薄的认知里，我认为是大于其他方向的。这一点其实早期在蓝鲸短暂学习的时候就感受过了。而其实这也是我在文中感觉被狠狠打脸的一部分。“<strong>Don’t give up when you encounter things you don’t understand</strong>”文中如是说，其实原来我很有幸的扛过了蓝鲸筛选的第一阶段，但随着难度上升，我逃避了。很戏谑的，某学长就在交流中问过：“这回学不学的下去”。我认为这一点确实也是我需要去克服的。</p><p>同时，文中写到要充分利用资源，对于这一点，我认为应该是充分的利用有效资源，或者说是如何高效的利用资源处理亟待解决的问题。其实无论从本科的学习还是说之前的毕设或者是论文分享，都可以看出，查找学习知识是一个类似于剥洋葱的过程，查找A中发现有B不懂，那么再去找B，学习B是发现其中出现的C，D不清楚，那么就应该先去把C，D看懂，再一层层往上反着推，无疑这会消耗大量时间，但总归是要比一知半解的了解A是什么会来的更有收获。</p><h3 id="保持思考"><a href="#保持思考" class="headerlink" title="保持思考"></a>保持思考</h3><p>这一点不仅是说是，如何去提出问题，也是面对一个问题时你能怎么去解决。安全方面，解决问题需要灵活性，可能本科期间，多数时间我们都在跟着课本学习所谓的标准答案，也就是文中提到的“If you prefer to follow a pre-set curriculum, you’re not going to get very far in security”跟着预定的课程走。我确实不否认我更乐意去按着安排做事儿，答案跟着标准答案走，但我觉着确实也应该做出一些突破了。</p>]]></content>
    
    
    <categories>
      
      <category>Something interesting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>read</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读后感：So you want to work in security</title>
    <link href="/2023/07/07/Reflection%20Paper%EF%BC%9ASo%20you%20want%20to%20work%20in%20security/"/>
    <url>/2023/07/07/Reflection%20Paper%EF%BC%9ASo%20you%20want%20to%20work%20in%20security/</url>
    
    <content type="html"><![CDATA[<h2 id="读后感：So-you-want-to-work-in-security"><a href="#读后感：So-you-want-to-work-in-security" class="headerlink" title="读后感：So you want to work in security?"></a>读后感：So you want to work in security?</h2><p><a href="http://ifsec.blogspot.com/2018/02/so-you-want-to-work-in-security-and-for.html">So you want to work in security?</a></p><h3 id="得忙起来"><a href="#得忙起来" class="headerlink" title="得忙起来"></a>得忙起来</h3><pre><code class="hljs"> 对于这篇博客，我更愿意将其视作一个纠正我暑期，或是说毕业之后的一个较为松懈的学习态度以及开学前以何种学习方式去补充自己的不足的一篇文章。 显然，本科毕业确实给我带来了一些可能与我并不相称的快乐，即其实我算是选择大于努力的那一部分人，在考研过程中我并未付出和其他人那般的努力，所以其实更应该看到自己与别人的差距，让我快要生锈的脑子转起来。</code></pre><h3 id="任重道远"><a href="#任重道远" class="headerlink" title="任重道远"></a>任重道远</h3><pre><code class="hljs"> 安全方向所涉及的知识面的广度，在我浅薄的认知里，我认为是大于其他方向的。这一点其实早期在蓝鲸短暂学习的时候就感受过了。而其实这也是我在文中感觉被狠狠打脸的一部分。“**Don’t give up when you encounter things you don’t understand**”文中如是说，其实原来我很有幸的扛过了蓝鲸筛选的第一阶段，但随着难度上升，我逃避了。很戏谑的，某学长就在交流中问过：“这回学不学的下去”。我认为这一点确实也是我需要去克服的。 同时，文中写到要充分利用资源，对于这一点，我认为应该是充分的利用有效资源，或者说是如何高效的利用资源处理亟待解决的问题。其实无论从本科的学习还是说之前的毕设或者是论文分享，都可以看出，查找学习知识是一个类似于剥洋葱的过程，查找A中发现有B不懂，那么再去找B，学习B是发现其中出现的C，D不清楚，那么就应该先去把C，D看懂，再一层层往上反着推，无疑这会消耗大量时间，但总归是要比一知半解的了解A是什么会来的更有收获。</code></pre><h3 id="保持思考"><a href="#保持思考" class="headerlink" title="保持思考"></a>保持思考</h3><pre><code class="hljs"> 这一点不仅是说是，如何去提出问题，也是面对一个问题时你能怎么去解决。安全方面，解决问题需要灵活性，可能本科期间，多数时间我们都在跟着课本学习所谓的标准答案，也就是文中提到的“If you prefer to follow a pre-set curriculum, you’re not going to get very far in security”跟着预定的课程走。我确实不否认我更乐意去按着安排做事儿，答案跟着标准答案走，但我觉着确实也应该做出一些突破了。</code></pre>]]></content>
    
    
    <categories>
      
      <category>Something interesting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>read</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
